{"version":3,"sources":["../../../Warhammer/AOS Reminders/src/components/modals/generic/generic_modal.tsx","../../../Warhammer/AOS Reminders/src/components/modals/generic/generic_destructive_modal.tsx","../../../Warhammer/AOS Reminders/src/components/info/visibilityToggle.tsx","../../../Warhammer/AOS Reminders/src/utils/hooks/useGetArmy.tsx","../../../Warhammer/AOS Reminders/src/components/info/card.tsx","../../../Warhammer/AOS Reminders/src/utils/hooks/useGetArmyBuilderCards.tsx","../../../Warhammer/AOS Reminders/src/components/input/army_builder.tsx"],"names":["Modal","setAppElement","GenericModal","props","children","closeModal","isOpen","label","isProcessing","isDark","useTheme","modalClassName","concat","_jsx","className","contentLabel","onRequestClose","overlayClassName","_jsxs","ModalSpinner","hidden","_ref","variant","Spinner","size","GenericDestructiveModal","bodyText","confirmText","denyText","headerText","onConfirm","onConfirmAsync","onDeny","theme","setIsProcessing","useState","btnReponsiveClass","text","GenericButton","modalDangerClass","onClick","async","e","preventDefault","err","console","error","FaCheck","modalConfirmClass","icons","clear","visible","MdClear","MdAdd","eye","MdVisibility","MdVisibilityOff","fold","MdUnfoldLess","MdUnfoldMore","minus","MdRemove","MdExpandMore","VisibilityToggle","isVisible","setVisibility","type","appearance","withConfirmation","icon","VisibilityComponent","modalIsOpen","setModalIsOpen","handleClick","handleSetVisibility","useCallback","_e$preventDefault","call","_Fragment","IconContext","Provider","value","Dropdown","Item","useGetArmy","factionName","subFactionName","origin_realm","realmscape","useSelector","selectRealmscapeSlice","useMemo","getArmy","CardComponent","title","mobileTitle","selectionCount","isMobile","useWindowSize","bodyClass","cardBody","colMobile","colDesktop","colClass","bgColor","card","CardHeader","show","visibilityActions","deleteSelector","hide","addSelector","CardMultiSelect","hiddenSelectors","selectors","selectSelectors","enableLog","items","setValues","values","selectItems","map","x","name","find","log","length","SelectMulti","isClearable","CardSingleSelect","setValue","SelectOne","iconSize","dispatch","useDispatch","handleVisibility","useEffect","styles","cardHeader","flexClass","flexWrapperClass","vizWrapper","titleText","selectionCountText","useGetArmyBuilderCards","army","selections","selectSelections","slice","Units","selectionActions","setUnits","units","sideEffects","getSideEffects","Flavors","setFlavors","FlavorType","flavors","Battalions","setBattalions","battalions","CommandTraits","setCommandTraits","command_traits","MountTraits","setMountTraits","mount_traits","MonstrousRampages","setMonstrousRampages","monstrous_rampages","CommandAbilities","setCommandAbilities","command_abilities","Artifacts","setArtifacts","artifacts","Prayers","setPrayers","prayers","Spells","setSpells","spells","Manifestations","setManifestations","manifestations","BattleTactics","setBattleTactics","battle_tactics","CoreRules","setCoreRules","core_rules","Incarnates","setIncarnates","incarnates","Scenery","setScenery","scenery","GrandStrategies","setGrandStrategies","grand_strategies","Triumphs","setTriumphs","triumphs","SUPPORTED_REALMSCAPES","realmscapeActions","setRealmscape","ArmyBuilder","selectFactionNameSlice","armyActions","updateArmy","rowClass","cards","Fragment","withSelectMultiWithSideEffects","withSelectOne"],"mappings":"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","file":"static/js/19.d08ce4c2.chunk.js","sourcesContent":["import Spinner from 'components/helpers/spinner'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React from 'react'\r\nimport Modal from 'react-modal'\r\n\r\ninterface IGenericModalProps {\r\n  isProcessing?: boolean\r\n  isOpen: boolean\r\n  closeModal: () => void\r\n  label: string\r\n}\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst GenericModal = (props: React.PropsWithChildren<IGenericModalProps>) => {\r\n  const { children, closeModal, isOpen, label, isProcessing = false } = props\r\n  const { isDark } = useTheme()\r\n\r\n  const themeType = isDark ? 'Dark' : 'Light'\r\n  const modalClassName = `Modal-${isProcessing ? `Transparent` : themeType}`\r\n\r\n  return (\r\n    <Modal\r\n      className={modalClassName}\r\n      contentLabel={label}\r\n      isOpen={isOpen}\r\n      onRequestClose={closeModal}\r\n      overlayClassName={'Modal-Overlay'}\r\n    >\r\n      <div className={`container`}>\r\n        {isProcessing && <ModalSpinner />}\r\n        <div hidden={isProcessing}>{children}</div>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default GenericModal\r\n\r\nconst ModalSpinner = ({ isDark = false }) => {\r\n  const variant = isDark ? 'light-gray' : 'dark'\r\n  return (\r\n    <div className={`d-flex flex-row justify-content-center`}>\r\n      <Spinner variant={variant} size=\"large\" />\r\n    </div>\r\n  )\r\n}\r\n","import GenericButton from 'components/input/generic_button'\r\nimport GenericModal from 'components/modals/generic/generic_modal'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useState } from 'react'\r\nimport { FaCheck } from 'react-icons/fa'\r\n\r\ninterface IModalComponentProps {\r\n  closeModal: () => any\r\n  confirmText?: string\r\n  denyText?: string\r\n  isOpen: boolean\r\n  onConfirmAsync?: () => Promise<any>\r\n  onConfirm?: () => any\r\n  onDeny?: () => any\r\n  headerText: string\r\n  bodyText?: string\r\n}\r\n\r\n/**\r\n * A re-usable generic confirmation modal component\r\n *\r\n * Ask if we really want to do a destructive action.\r\n *\r\n * @param props\r\n */\r\nconst GenericDestructiveModal = (props: React.PropsWithChildren<IModalComponentProps>) => {\r\n  const {\r\n    bodyText = '',\r\n    children,\r\n    closeModal,\r\n    confirmText = 'Confirm',\r\n    denyText = 'Cancel',\r\n    headerText,\r\n    isOpen,\r\n    onConfirm = null,\r\n    onConfirmAsync = null,\r\n    onDeny = null,\r\n  } = props\r\n  const { theme } = useTheme()\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n  const handleConfirm = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (onConfirmAsync) {\r\n      try {\r\n        setIsProcessing(true)\r\n        await onConfirmAsync()\r\n      } catch (err) {\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    if (onConfirm) onConfirm()\r\n\r\n    closeModal()\r\n  }\r\n\r\n  const handleDeny = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (onDeny) onDeny()\r\n    closeModal()\r\n  }\r\n\r\n  const btnReponsiveClass = `mx-2 mx-sm-1`\r\n\r\n  return (\r\n    <GenericModal\r\n      isOpen={isOpen}\r\n      isProcessing={isProcessing}\r\n      closeModal={closeModal}\r\n      label={`${headerText} Confirmation Modal`}\r\n    >\r\n      <div className=\"flex-row\">\r\n        <div className={`col ${theme.text} text-center`}>\r\n          <h4 className=\"mb-3\">{headerText}</h4>\r\n          {bodyText && <p className=\"mb-3\">{bodyText}</p>}\r\n          {children ? <div className={`mb-3`}>{children}</div> : null}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex flex-row justify-content-around\">\r\n        <GenericButton className={`${theme.modalDangerClass} ${btnReponsiveClass}`} onClick={handleConfirm}>\r\n          <FaCheck className=\"mr-2\" /> {confirmText}\r\n        </GenericButton>\r\n        <GenericButton className={`${theme.modalConfirmClass} ${btnReponsiveClass}`} onClick={handleDeny}>\r\n          {denyText}\r\n        </GenericButton>\r\n      </div>\r\n    </GenericModal>\r\n  )\r\n}\r\n\r\nexport default GenericDestructiveModal\r\n","import GenericDestructiveModal from 'components/modals/generic/generic_destructive_modal'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { Dropdown } from 'react-bootstrap'\r\nimport { IconContext, IconType } from 'react-icons'\r\nimport {\r\n  MdAdd,\r\n  MdClear,\r\n  MdExpandMore,\r\n  MdRemove,\r\n  MdUnfoldLess,\r\n  MdUnfoldMore,\r\n  MdVisibility,\r\n  MdVisibilityOff,\r\n} from 'react-icons/md'\r\n\r\nexport type TVisibilityIconType = 'clear' | 'eye' | 'fold' | 'minus'\r\n\r\ninterface IVisibilityToggleProps {\r\n  appearance?: 'icon' | 'menuItem'\r\n  className?: string\r\n  isVisible: boolean\r\n  text?: string\r\n  setVisibility?: () => void\r\n  size?: number\r\n  type?: TVisibilityIconType\r\n  withConfirmation?: boolean\r\n}\r\n\r\nconst icons: Record<TVisibilityIconType, { visible: IconType; hidden: IconType }> = {\r\n  clear: {\r\n    visible: MdClear,\r\n    hidden: MdAdd,\r\n  },\r\n  eye: {\r\n    visible: MdVisibility,\r\n    hidden: MdVisibilityOff,\r\n  },\r\n  fold: {\r\n    visible: MdUnfoldLess,\r\n    hidden: MdUnfoldMore,\r\n  },\r\n  minus: {\r\n    visible: MdRemove,\r\n    hidden: MdExpandMore,\r\n  },\r\n}\r\n\r\nexport const VisibilityToggle = (props: IVisibilityToggleProps) => {\r\n  const {\r\n    isVisible,\r\n    setVisibility,\r\n    size = 1.4,\r\n    type = 'eye',\r\n    appearance = 'icon',\r\n    text = '',\r\n    className = '',\r\n    withConfirmation = false,\r\n  } = props\r\n  const { theme } = useTheme()\r\n\r\n  const icon = icons[type]\r\n  const VisibilityComponent = isVisible ? icon.visible : icon.hidden\r\n  const [modalIsOpen, setModalIsOpen] = useState(false)\r\n\r\n  const openModal = () => setModalIsOpen(true)\r\n  const closeModal = () => setModalIsOpen(false)\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    withConfirmation ? openModal() : handleSetVisibility(e)\r\n  }\r\n\r\n  const handleSetVisibility = useCallback(\r\n    (e?: React.MouseEvent) => {\r\n      e?.preventDefault?.()\r\n      setVisibility?.()\r\n    },\r\n    [setVisibility]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {appearance === 'icon' && (\r\n        <IconContext.Provider value={{ size: `${size}em`, className: className || theme.text }}>\r\n          <VisibilityComponent onClick={handleClick} />\r\n        </IconContext.Provider>\r\n      )}\r\n      {appearance === 'menuItem' && (\r\n        <Dropdown.Item className={className} onClick={handleClick}>\r\n          {isVisible ? `Hide` : `Show`}\r\n          {text && ` ${text}`}\r\n        </Dropdown.Item>\r\n      )}\r\n      {modalIsOpen && (\r\n        <GenericDestructiveModal\r\n          closeModal={closeModal}\r\n          confirmText={'Hide'}\r\n          isOpen={modalIsOpen}\r\n          onConfirm={handleSetVisibility}\r\n          headerText={'Hide Rule?'}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { selectRealmscapeSlice } from 'ducks/selectors'\r\nimport { TSupportedFaction } from 'meta/factions'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { IArmy } from 'types/army'\r\nimport { getArmy } from 'utils/getArmy/getArmy'\r\n\r\nconst useGetArmy = (factionName: TSupportedFaction, subFactionName?: string) => {\r\n  const { origin_realm, realmscape } = useSelector(selectRealmscapeSlice)\r\n  const army = useMemo(\r\n    () => getArmy(factionName, subFactionName || null, origin_realm, realmscape),\r\n    [factionName, origin_realm, realmscape, subFactionName]\r\n  )\r\n  return army as IArmy\r\n}\r\n\r\nexport default useGetArmy\r\n","import { ActionCreatorWithPayload } from '@reduxjs/toolkit'\r\nimport { TVisibilityIconType, VisibilityToggle } from 'components/info/visibilityToggle'\r\nimport { SelectMulti, SelectOne, TSelectMultiSetValueFn, TSelectOneSetValueFn } from 'components/input/select'\r\nimport { useTheme } from 'context/useTheme'\r\nimport { selectors, visibilityActions } from 'ducks'\r\nimport React, { useCallback, useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { TEntry } from 'types/data'\r\nimport useWindowSize from 'utils/hooks/useWindowSize'\r\n\r\ninterface IBaseCardProps {\r\n  label?: string\r\n  mobileTitle?: string | null\r\n  title: string\r\n}\r\n\r\ninterface ICardProps extends IBaseCardProps {\r\n  isVisible: boolean\r\n  selectionCount: number\r\n}\r\n\r\nconst CardComponent = (props: React.PropsWithChildren<ICardProps>) => {\r\n  const { title, isVisible, mobileTitle, children, selectionCount } = props\r\n  const { isMobile } = useWindowSize()\r\n  const { theme } = useTheme()\r\n\r\n  const bodyClass = `${theme.cardBody} ${isVisible ? `` : `d-none`} ${isMobile ? `py-3` : ``}`\r\n  const colMobile = isMobile && !isVisible ? `col w-50 px-1` : `col-12 px-1`\r\n  const colDesktop = `col-sm-12 col-md-6 col-lg-4 col-xl-4 ${!isMobile ? `mb-2` : ``}`\r\n  const colClass = `${colMobile} ${colDesktop} ${theme.bgColor} mx-auto mt-1`\r\n\r\n  return (\r\n    <div className={colClass}>\r\n      <div className={theme.card}>\r\n        <CardHeader\r\n          isVisible={isVisible}\r\n          title={title}\r\n          mobileTitle={mobileTitle}\r\n          selectionCount={selectionCount}\r\n          show={visibilityActions.deleteSelector}\r\n          hide={visibilityActions.addSelector}\r\n        />\r\n        <div className={bodyClass}>{children}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface ICardMultiProps extends IBaseCardProps {\r\n  items: TEntry[]\r\n  selectionCount: number\r\n  setValues: TSelectMultiSetValueFn\r\n  values: string[]\r\n  enableLog?: boolean\r\n}\r\n\r\nexport const CardMultiSelect = (props: ICardMultiProps) => {\r\n  const hiddenSelectors = useSelector(selectors.selectSelectors)\r\n\r\n  const { enableLog = false, items, label = null, mobileTitle = null, setValues, title, values } = props\r\n\r\n  const selectItems = items.map(x => x.name)\r\n  const isVisible = useMemo(() => !hiddenSelectors.find(x => x === title), [hiddenSelectors, title])\r\n  const log = enableLog ? { title, label: label || title } : null\r\n\r\n  if (!items.length) return null\r\n\r\n  return (\r\n    <CardComponent\r\n      title={title}\r\n      isVisible={isVisible}\r\n      mobileTitle={mobileTitle}\r\n      selectionCount={values.length}\r\n    >\r\n      <SelectMulti values={values} items={selectItems} setValues={setValues} isClearable={true} log={log} />\r\n    </CardComponent>\r\n  )\r\n}\r\n\r\ninterface ICardSingleSelectProps extends IBaseCardProps {\r\n  enableLog?: boolean\r\n  items: string[]\r\n  selectionCount: number\r\n  setValue: TSelectOneSetValueFn\r\n  value?: string | null\r\n}\r\n\r\nexport const CardSingleSelect = (props: ICardSingleSelectProps) => {\r\n  const hiddenSelectors = useSelector(selectors.selectSelectors)\r\n  const { enableLog = false, items, label = null, mobileTitle = null, setValue, title, value = null } = props\r\n  const isVisible = useMemo(() => !hiddenSelectors.find(x => x === title), [hiddenSelectors, title])\r\n  const log = enableLog ? { title, label: label || title } : null\r\n\r\n  return (\r\n    <CardComponent\r\n      title={title}\r\n      isVisible={isVisible}\r\n      mobileTitle={mobileTitle}\r\n      selectionCount={value ? 1 : 0}\r\n    >\r\n      <SelectOne setValue={setValue} items={items} value={value} isClearable={true} log={log} />\r\n    </CardComponent>\r\n  )\r\n}\r\n\r\ninterface ICardHeaderProps extends IBaseCardProps {\r\n  headerClassName?: string\r\n  iconSize?: number\r\n  isVisible: boolean\r\n  selectionCount?: number\r\n  type?: TVisibilityIconType\r\n  hide: ActionCreatorWithPayload<any>\r\n  show: ActionCreatorWithPayload<any>\r\n}\r\n\r\nexport const CardHeader = (props: ICardHeaderProps) => {\r\n  const { title, mobileTitle, isVisible, type = 'minus', iconSize = 1, selectionCount, show, hide } = props\r\n  const dispatch = useDispatch()\r\n  const { theme } = useTheme()\r\n  const { isMobile } = useWindowSize()\r\n\r\n  const handleVisibility = useCallback(() => {\r\n    dispatch(isVisible ? hide(title) : show(title))\r\n  }, [dispatch, hide, isVisible, show, title])\r\n\r\n  useEffect(() => {\r\n    if (isMobile && title !== 'Units') dispatch(hide(title))\r\n  }, [dispatch, hide, isMobile, title])\r\n\r\n  const styles = {\r\n    cardHeader: `${theme.cardHeader} py-${isMobile ? 3 : 2} ${isMobile ? `px-3` : ``}`,\r\n    flexClass: `flex-grow-1 text-center ${!isMobile ? `pl-5` : ``}`,\r\n    flexWrapperClass: `d-flex justify-content-${isMobile ? `end` : `center`} align-items-center`,\r\n    vizWrapper: `${isMobile ? `pr-0` : `px-3`} d-print-none`,\r\n  }\r\n\r\n  const titleText = isMobile && mobileTitle ? mobileTitle : title\r\n  const selectionCountText = selectionCount && !isVisible ? ` (${selectionCount})` : ``\r\n\r\n  return (\r\n    <div className={styles.cardHeader} onClick={handleVisibility}>\r\n      <div className={styles.flexWrapperClass}>\r\n        <div className={styles.flexClass}>\r\n          {isMobile ? (\r\n            <h5 className=\"CardHeaderTitle text-nowrap\">\r\n              {titleText}\r\n              {selectionCountText}\r\n            </h5>\r\n          ) : (\r\n            <h4 className=\"CardHeaderTitle text-nowrap\">\r\n              {titleText}\r\n              {selectionCountText}\r\n            </h4>\r\n          )}\r\n        </div>\r\n        <div className={styles.vizWrapper}>\r\n          <VisibilityToggle isVisible={isVisible} size={iconSize} type={type} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { realmscapeActions, selectionActions } from 'ducks'\r\nimport { selectRealmscapeSlice, selectSelections } from 'ducks/selectors'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { IArmy } from 'types/army'\r\nimport { SUPPORTED_REALMSCAPES } from 'types/realmscapes'\r\nimport { getSideEffects } from 'utils/getSideEffects'\r\n\r\nconst useGetArmyBuilderCards = (army: IArmy) => {\r\n  const { realmscape } = useSelector(selectRealmscapeSlice)\r\n  const selections = useSelector(selectSelections)\r\n\r\n  const value = useMemo(() => {\r\n    return [\r\n      {\r\n        slice: 'units' as const,\r\n        items: army.Units,\r\n        setValues: selectionActions.setUnits,\r\n        title: 'Units',\r\n        values: selections.units || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Units),\r\n      },\r\n      {\r\n        slice: 'flavors' as const,\r\n        items: army.Flavors,\r\n        setValues: selectionActions.setFlavors,\r\n        title: army.FlavorType || 'Flavors',\r\n        values: selections.flavors || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Flavors),\r\n      },\r\n      {\r\n        slice: 'battalions' as const,\r\n        items: army.Battalions,\r\n        setValues: selectionActions.setBattalions,\r\n        title: 'Battalions',\r\n        values: selections.battalions || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Battalions),\r\n      },\r\n      {\r\n        slice: 'command_traits' as const,\r\n        items: army.CommandTraits,\r\n        setValues: selectionActions.setCommandTraits,\r\n        title: 'Heroic Traits',\r\n        values: selections.command_traits || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.CommandTraits),\r\n      },\r\n      {\r\n        slice: 'mount_traits' as const,\r\n        items: army.MountTraits,\r\n        setValues: selectionActions.setMountTraits,\r\n        title: 'Mount Traits',\r\n        values: selections.mount_traits || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.MountTraits),\r\n      },\r\n      {\r\n        slice: 'monstrous_rampages' as const,\r\n        items: army.MonstrousRampages,\r\n        setValues: selectionActions.setMonstrousRampages,\r\n        title: 'Monstrous Rampages',\r\n        values: selections.monstrous_rampages || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.MonstrousRampages),\r\n      },\r\n      {\r\n        slice: 'command_abilities' as const,\r\n        items: army.CommandAbilities,\r\n        setValues: selectionActions.setCommandAbilities,\r\n        title: 'Command Abilities',\r\n        values: selections.command_abilities || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.CommandAbilities),\r\n      },\r\n      {\r\n        slice: 'artifacts' as const,\r\n        items: army.Artifacts,\r\n        setValues: selectionActions.setArtifacts,\r\n        title: 'Artifacts',\r\n        values: selections.artifacts || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Artifacts),\r\n      },\r\n      {\r\n        slice: 'prayers' as const,\r\n        items: army.Prayers,\r\n        setValues: selectionActions.setPrayers,\r\n        title: 'Prayers',\r\n        values: selections.prayers || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Prayers),\r\n      },\r\n      {\r\n        slice: 'spells' as const,\r\n        items: army.Spells,\r\n        setValues: selectionActions.setSpells,\r\n        title: 'Spells',\r\n        values: selections.spells || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Spells),\r\n      },\r\n      {\r\n        slice: 'manifestations' as const,\r\n        items: army.Manifestations,\r\n        setValues: selectionActions.setManifestations,\r\n        title: 'Manifestations',\r\n        values: selections.manifestations || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Manifestations),\r\n      },\r\n      {\r\n        slice: 'battle_tactics' as const,\r\n        items: army.BattleTactics,\r\n        setValues: selectionActions.setBattleTactics,\r\n        title: 'Battle Tactics',\r\n        values: selections.battle_tactics || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.BattleTactics),\r\n      },\r\n      {\r\n        slice: 'core_rules' as const,\r\n        items: army.CoreRules,\r\n        setValues: selectionActions.setCoreRules,\r\n        title: 'Core Rules',\r\n        values: selections.core_rules || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.CoreRules),\r\n      },\r\n      /*{\r\n        slice: 'endless_spells' as const,\r\n        items: army.EndlessSpells,\r\n        setValues: selectionActions.setEndlessSpells,\r\n        title: 'Endless Spells',\r\n        values: selections.endless_spells || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.EndlessSpells),\r\n      },*/\r\n      {\r\n        slice: 'incarnates' as const,\r\n        items: army.Incarnates,\r\n        setValues: selectionActions.setIncarnates,\r\n        title: 'Incarnates',\r\n        values: selections.incarnates || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Incarnates),\r\n      },\r\n      {\r\n        slice: 'scenery' as const,\r\n        items: army.Scenery,\r\n        setValues: selectionActions.setScenery,\r\n        title: 'Scenery',\r\n        values: selections.scenery || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Scenery),\r\n      },\r\n      {\r\n        slice: 'grand_strategies',\r\n        items: army.GrandStrategies,\r\n        setValues: selectionActions.setGrandStrategies,\r\n        title: 'Grand Strategies',\r\n        values: selections.grand_strategies || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.GrandStrategies),\r\n      },\r\n      {\r\n        slice: 'triumphs' as const,\r\n        items: army.Triumphs,\r\n        setValues: selectionActions.setTriumphs,\r\n        title: 'Triumphs',\r\n        values: selections.triumphs || [],\r\n        type: 'multi',\r\n        sideEffects: getSideEffects(army.Triumphs),\r\n      },\r\n      // Origin realms appear to have been removed in AoS 3.0\r\n      // {\r\n      //   items: SUPPORTED_ORIGIN_REALMS,\r\n      //   setValue: realmscapeActions.setOriginRealm,\r\n      //   title: `Realm of Origin`,\r\n      //   mobileTitle: `Origin Realm`,\r\n      //   value: origin_realm || null,\r\n      //   type: 'single',\r\n      // },\r\n      {\r\n        items: SUPPORTED_REALMSCAPES,\r\n        setValue: realmscapeActions.setRealmscape,\r\n        title: `General's Handbook Rules`,\r\n        mobileTitle: `Battle Realm`,\r\n        value: realmscape || null,\r\n        type: 'single',\r\n      },\r\n      // In AoS 3.0, we just include ALL of the realmscape features for a given realm\r\n      // Which deprecates the need for this dropdown\r\n      // {\r\n      //   items: realmFeatureItems,\r\n      //   setValue: realmscapeActions.setRealmscapeFeature,\r\n      //   title: `Realm Feature`,\r\n      //   value: realmscape_feature || null,\r\n      //   type: 'single',\r\n      // },\r\n    ]\r\n  }, [army, realmscape, selections])\r\n\r\n  return value\r\n}\r\n\r\nexport default useGetArmyBuilderCards\r\n","import { CardMultiSelect, CardSingleSelect } from 'components/info/card'\r\nimport { armyActions, selectors } from 'ducks'\r\nimport { Fragment, useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RealmscapesEnum } from 'types/realmscapes'\r\nimport useGetArmy from 'utils/hooks/useGetArmy'\r\nimport useGetArmyBuilderCards from 'utils/hooks/useGetArmyBuilderCards'\r\nimport useWindowSize from 'utils/hooks/useWindowSize'\r\nimport { withSelectMultiWithSideEffects, withSelectOne } from 'utils/withSelect'\r\n\r\nconst ArmyBuilder = () => {\r\n  const dispatch = useDispatch()\r\n  const { factionName, subFactionName } = useSelector(selectors.selectFactionNameSlice)\r\n  const { isMobile } = useWindowSize()\r\n\r\n  const army = useGetArmy(factionName, subFactionName)\r\n\r\n  useEffect(() => {\r\n    dispatch(armyActions.updateArmy(army))\r\n  }, [army, dispatch])\r\n\r\n  const rowClass = useMemo(() => `row d-print-none pb-1 ${isMobile ? `mx-1` : `pt-2 w-75`}`, [isMobile])\r\n  const cards = useGetArmyBuilderCards(army)\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <div className={rowClass}>\r\n        {cards.map(card => {\r\n          return (\r\n            <Fragment key={card.title}>\r\n              {card.type === 'multi' && card.setValues && (\r\n                <CardMultiSelect\r\n                  enableLog={true}\r\n                  items={card.items}\r\n                  key={card.title}\r\n                  label={factionName}\r\n                  mobileTitle={card.mobileTitle || null}\r\n                  setValues={withSelectMultiWithSideEffects(card.setValues, card.sideEffects, factionName)}\r\n                  title={card.title}\r\n                  values={card.values}\r\n                  selectionCount={0}\r\n                />\r\n              )}\r\n              {card.type === 'single' && card.setValue && (\r\n                <CardSingleSelect\r\n                  enableLog={true}\r\n                  items={card.items}\r\n                  key={card.title}\r\n                  label={factionName}\r\n                  mobileTitle={card.mobileTitle || null}\r\n                  setValue={withSelectOne(value => dispatch(card.setValue(value as RealmscapesEnum | null)))}\r\n                  title={card.title}\r\n                  value={card.value}\r\n                  selectionCount={0}\r\n                />\r\n              )}\r\n            </Fragment>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ArmyBuilder\r\n"],"sourceRoot":""}