{"version":3,"sources":["utils/azyr/azyrPdf.ts","utils/getArmy/getAllyArmyUnits.ts","utils/import/isPoorlySpacedMatch.ts","utils/import/validators.ts","utils/import/replaceOf.ts","utils/import/warnings.ts","utils/import/checkImportSelection.ts","utils/import/allyData.ts","utils/import/checkErrors.ts","utils/import/index.ts","utils/import/selectionLookup.ts","utils/import/ambiguousSelections.ts","utils/import/removeSideEffectsFromImport.ts","utils/import/addSideEffectsToImport.ts","utils/azyr/getAzyrArmy.ts","utils/battlescribe/battlescribeUtils.ts","utils/battlescribe/checks.ts","utils/battlescribe/parseHTML.ts","utils/battlescribe/getters.ts","utils/battlescribe/getBattlescribeArmy.ts","utils/warscroll/warscrollUtils.ts","utils/warscroll/getWarscrollArmy.ts","components/input/importPdf/parseFile.ts","utils/pdf/pdfUtils.ts","components/input/importPdf/drop_zone.tsx","utils/warhammer_app/warhammerAppUtils.ts","utils/warhammer_app/getWarhammerAppArmy.ts","components/input/importPdf/textarea.tsx","components/input/importPdf/drop_container.tsx"],"names":["sep","commaAlt","HEADER","checkIfAzyr","pdfPages","test","RegExp","join","checkIfBattlescribe","checkIfWarscroll","some","x","includes","WARSCROLL_BUILDER","handlePages","text","items","replace","typoRegexp","match","commonTypos","generalReplacer","split","title","handleTitle","shift","processedItems","uniq","map","handleItem","flat","concat","firstPass","unitRegexp","endlessRegexp","prayerRegexp","spellRegexp","sceneryRegExp","markRegexp","auraRegexp","traitReplacer","secondPass","splitItem","upper","secondTitlePass","circleRegexp","allegianceRegexp","mercenaryReplacer","factionReplacer","realmscapeReplacer","trim","filter","getTextHeights","heights","textHeights","sortBy","reverse","headerHeight","itemHeight","length","p1","p2","suffix","toUpperCase","p3","p4","FUETH√ÅN","Object","keys","SUPPORTED_FACTIONS","titleCase","isPoorlySpacedMatch","value","potentialMatch","smushed","spaceIndices","i","smushedIdx","assemblyStore","push","reassembledVal","Validators","Names","matchNoOf","val","valShortened","faction","find","replaceOf","matchNoParens","valNoParens","matchNoPunc","valNoPunc","stripPunctuation","matchNoSemicolons","valNoSemi","last","matchPoorSpacing","matchUpper","getWarnings","errors","e","severity","hasFatalError","hasErrorOrWarning","hasWarning","checkImportSelection","NameMap","logError","arguments","undefined","checkPoorSpacing","typoMap","validators","valUpper","match2","match3","match4","match5","match6","getAllyData","allyUnits","factionName","mergedAllyItems","allyFactionNames","allySelections","allyArmyItems","ArmyList","getFactionList","GrandAlliance","allianceName","CHAOS","CHAOS_GRAND_ALLIANCE","DEATH","DEATH_GRAND_ALLIANCE","DESTRUCTION","DESTRUCTION_GRAND_ALLIANCE","ORDER","ORDER_GRAND_ALLIANCE","without","MERCENARY_COMPANIES","MEGA_GARGANT_MERCENARIES","reduce","a","battalions","AggregateArmy","Battalions","units","Units","_ref","name","_ref2","getAllyArmyItems","allyData","allyName","unitsMap","mapListToDict","battalionsMap","battalionCheck","errorFreeAllyBattalions","unitCheck","errorFreeAllyUnits","collisions","forEach","unit","factionSelections","importErrorChecker","army","parser","opts","parserOptions","subFactionName","selections","unknownSelections","isValidFactionName","deprecation","DeprecatedSelections","logDeprecatedImport","logFailedImport","errorTxt","fileReadError","error","reason","createFatalError","ignoredUnknownSelections","foundSelections","Army","getArmy","lookup","importSelectionLookup","type","lowerToUpperLookup","checkVal","errorFree","found","orig","importUnitOptionMap","errorFreeSelections","SELECTION_TYPES","key","couldNotFind","difference","isDev","console","log","checkErrorsForAllegianceAbilities","flavors","warnings","getAllWarnings","foundError","entry","Flavors","al","effects","err","remove","checkErrorsForDeprecations","addAmbiguousSelectionErrors","ambiguousNamesMap","flatAllySelections","values","selection","removeFoundErrors","uniqBy","selectionsWithoutSideEffects","removeSideEffectsFromImport","slice","_slice","previous","SideEffects","isSideEffect","s","logIgnoredImport","selectionsWithSideEffects","addSideEffectsToImport","subFactionSideEffects","getSideEffects","SubFaction","entries","obj","warn","selectionSideEffects","k","v","effectsObj","effectSlice","_effectsObj$name","_effectsObj$name$effe","foundAllies","filteredErrors","f","startsWith","allyErrors","getAllyWarnings","selectorLookup","ALLEGIANCE","ARTEFACT","BATTALION","PRAYER","SCENERY","SPELL","UNIT","getInitialAzyrArmy","pages","realmscape","initialSelections","accum","getFactionName","flavor","footnotes","handleKOTraits","command_traits","txt","SLAANESH","endsWith","getFactionFromList","subFactionKeyMap","_prefix","origin_realm","realmscape_feature","importFactionNameMap","factionToFlavorMap","traits","getKOTraits","possiblePrefix","footnotesUpper","regEx","trait","note","result","pre","prefix","KharadronOverlordsFaction","CommandTraits","flavorTraits","cleanText","ignoredValues","fixKeys","Artefact","Prayer","Spell","Weapon","isParentNode","node","isChildNode","isRootSelection","nodeName","attrs","traverseDoc","docObj","results","allegianceInfo","factionInfo","grandAlliance","rootSelections","traverse","childNodes","isBattleRealmObj","parseBattleRealmObj","isOriginRealmObj","parseOriginRealmObj","isFactionObj","parseFaction","_obj$childNodes","_obj$childNodes$","_obj$childNodes$$chil","_obj$childNodes$$chil2","_obj$childNodes$$chil3","_obj$childNodes$$chil4","_obj$childNodes$$chil5","_obj$childNodes$$chil6","isAllegianceObj","parseAllegiance","parseRootSelection","h4Node","Error","isUncategorizedScenery","knownScenery","tableEntries","_x$childNodes","_x$childNodes$","potentialGrandStrategy","_x$childNodes2","_x$childNodes2$","tableName","names","getNamesFromTableTags","table","tds","stripParentNode","parentNode","namespaceURI","tagName","trimmedVal","factionNode","factionValue","rest","factionLookup","flavorInfo","strippedObj","partialSearchDoc","searchString","getFlavorMetadata","isSelectionNode","nameObj","flavorCategoryLookup","flavorSelectionLookup","factionH4Lookup","selectionIdx","findIndex","potentialFactionName","b","emptyResponse","valNode","mainNode","spanNode","possibleFlavors","_ulNode$childNodes","_ulNode$childNodes$","_ulNode$childNodes$$c","_ulNode$childNodes$$c2","_ulNode$childNodes$$c3","_ulNode$childNodes$$c4","_liNode","_liNode$childNodes","_liNode$childNodes$","_liNode$childNodes$$c","liNode","ulNode","pChildren","className","cNode","liEntries","tableTraits","mergedTraits","fixedKeys","stripAllegiancePrefix","LEGIONS_OF_NAGASH","LegionsOfNagashFaction","Soulblight","_obj$childNodes$2","_obj$childNodes$2$chi","_obj$childNodes$2$chi2","_obj$childNodes$2$chi3","_obj$childNodes$2$chi4","_obj$childNodes$2$chi5","_obj$childNodes$2$chi6","_obj$childNodes$2$chi7","_obj$childNodes$2$chi8","_obj$childNodes$2$chi9","_ulNode$childNodes2","_ulNode$childNodes2$","_ulNode$childNodes2$$","_ulNode$childNodes2$$2","_ulNode$childNodes2$$3","_ulNode$childNodes2$$4","_ulNode$childNodes2$$5","_ulNode$childNodes2$$6","_ulNode$childNodes2$$7","_ulNode$childNodes2$$8","_ulNode$childNodes2$$9","_ulNode$childNodes2$$10","_fixedKeys$flavors","way","constellation","SERAPHON","_liNode2","_liNode2$childNodes","_liNode2$childNodes$","_liNode2$childNodes$$","_liNode2$childNodes$$2","_liNode2$childNodes$$3","_liNode2$childNodes$$4","_getFactionFromList","_getFactionFromList$f","luminethAllegiance","LUMINETH_REALMLORDS","flavorKeys","str","ignoredNames","multiNameMap","prefixLookup","Artifacts","Battalion","Commands","Enginecoven","Judgement","Prayers","Scenery","Spells","Traits","Triumphs","Unit","Manifestations","exactMatches","isBattalion","r","_r$entries$Unit","_r$entries","_r$entries$Battalion","getInitialBattlescribeArmy","html_string","document","parse5","parse","strippedDoc","getFactionAndFlavors","store","info","_importFactionNameMap2","_info$flavors","_importFactionNameMap","y","mappedFaction","possibleNameCollisions","_importFactionNameMap3","fixedFlavors","_Faction","_subFactionName","sortParsedRoots","roots","Collection","has_matched","process_entries","vals","cleanedName","singular","cleanWarscrollText","pdfText","flavorTypes","FlavorType","coreBattalionNames","CoreBattalions","unitIndicatorsPdf","getInitialWarscrollArmyPdf","cleanedText","genericScenery","GenericScenery","selector","manualLookup","t","skyport","triumphs","grand_strategy","grand_strategies","spells","prayers","getTribe","artifact","artifacts","getCity","alliedUnit","accumMock","pop","secondTrait","spell","getTraitWithSpell","getTrait","mount_traits","search","prayer","battlemage_realm","attr","KHARADRON_OVERLORDS","command_trait","stop_processing","STORMCAST_ETERNALS","sceFlavor","StormcastFaction","slaaneshSubFaction","subFactionKeys","scenery","coreBattalion","newTxt","removePrefix","regexp","tribe","city","traitToSpellMapper","cleaned","checkFileInformation","async","pdfjsLib","GlobalWorkerOptions","workerSrc","version","pdf","getDocument","typedarray","promise","numPages","Promise","all","page","getPage","pageNumber","getTextContent","normalizeWhitespace","height","isBattlescribe","isAzyr","AZYR","BATTLESCRIBE","UNKNOWN","getPdfPages","typedArray","handleParseFile","handlers","handleError","isOnline","setParser","startProcessing","stopProcessing","acceptedFiles","file","reader","FileReader","onabort","onerror","onload","Uint8Array","HTML_FILE","handleBattlescribeHTML","logEvent","handleUnknownPDF","fileTxt","buf","TextDecoder","decode","handleWarscrollBuilderPDF","handleAzyrPDF","PDF_FILE","readAsArrayBuffer","fileType","readAsText","parseWarscroll","fileText","parsedFile","matchAll","parsedArmy","getWarscrollArmyFromPdf","payload","resolve","PreferenceApi","createErrorFile","handleDrop","handleDone","toString","getAzyrArmyFromPdf","joinedPages","handleAzyrPages","getBattlescribeArmy","ImportDropzone","isMobile","useWindowSize","useAppStatus","setLoadedArmy","useSavedArmies","theme","useTheme","isDone","setIsDone","useState","isError","setIsError","setErrorText","isProcessing","setIsProcessing","onDrop","useCallback","setTimeout","resetAnalyticsStore","getRootProps","getInputProps","useDropzone","accept","multiple","_jsxs","dropzone","children","_jsx","centerContentClass","Spinner","FaRegCheckCircle","MdErrorOutline","CREATED_BY_WARHAMMER_APP","warhammerAppPlaceholders","ALLY_SUFFIX","ARMY_NAME_PREFIX","ARMY_NOTES_PREFIX","ARTIFACTS_PREFIX","BATTALIONS","COMMAND_TRAITS_PREFIX","END_OF_ENTRY","END_OF_LIST","ENDLESS_SPELLS","ENHANCEMENTS","FACTION_NAME_PREFIX","FLAVOR_PREFIX","GRAND_STRATEGY_PREFIX","INVALID_LIST","MOUNT_TRAITS_PREFIX","PRAYERS_PREFIX","SPELLS_PREFIX","SUBFACTION_PREFIX","TRIUMPHS_PREFIX","UNITS","VALID_LIST","MANIFESTATIONS","getWarhammerAppArmy","pass1","pastBeginningSection","pass3","validPrefixes","cleanWarhammerAppText","getInitialWarhammerAppArmy","WARHAMMER_APP","battalionNames","additionalBattalions","SLAVES_TO_DARKNESS","manifestations","battalion","ImportTextarea","isDark","setText","isImporting","setIsImporting","isFromAoSListCleaner","canImport","_Fragment","id","placeholder","onChange","preventDefault","target","GenericButton","onClick","handleImport","TXT_FILE","role","ImportContainer","setErrors","isSubscribed","useSubscription","saveArmyToS3","addArmyToStore","InfoAlert","ErrorAlert","props","isOn","setIsOn","alertType","toLowerCase","LinkNewTab","href","GITHUB_URL","logClick","label","Link","to","ROUTES","SUBSCRIBE"],"mappings":"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","file":"static/js/18.bbb0a665.chunk.js","sourcesContent":["import { sortBy, uniq } from 'lodash'\r\nimport { SUPPORTED_FACTIONS } from 'meta/factions'\r\nimport pdfjsLib from 'pdfjs-dist'\r\nimport { AZYR, BATTLESCRIBE, TImportParsers, UNKNOWN, WARSCROLL_BUILDER } from 'types/import'\r\nimport { isDev } from 'utils/env'\r\nimport { titleCase } from 'utils/textUtils'\r\n\r\nconst sep = ', '\r\nconst commaAlt = `&&`\r\nconst HEADER = 'HEADER'\r\n\r\ntype TGetPdfPages = (typedarray: string) => Promise<{ pdfPages: string[]; parser: TImportParsers }>\r\n\r\nexport const getPdfPages: TGetPdfPages = async typedarray => {\r\n  try {\r\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.js`\r\n\r\n    //Step 5:PDFJS should be able to read this\r\n    const pdf = await pdfjsLib.getDocument(typedarray).promise\r\n\r\n    var numPages: number[] = []\r\n    for (let i = 0; i < pdf.numPages; i++) {\r\n      numPages.push(i)\r\n    }\r\n\r\n    const pages = await Promise.all(\r\n      numPages.map(async pageNumber => {\r\n        const page = await pdf.getPage(pageNumber + 1)\r\n        //@ts-ignore\r\n        const textContent = await page.getTextContent({ normalizeWhitespace: true })\r\n\r\n        return textContent.items\r\n      })\r\n    )\r\n\r\n    let heights: number[] = []\r\n    const pdfText = pages.flat()\r\n\r\n    pdfText.forEach(x => heights.push(x.height))\r\n    const { headerHeight, itemHeight } = getTextHeights(heights)\r\n\r\n    const result = pdfText\r\n      .map(x => {\r\n        // First time this appears, we are starting units\r\n        // fontName: \"g_d0_f1\"\r\n        // height: 17.99999925\r\n        // str: \"Leader\"\r\n        if (x.height >= headerHeight) return HEADER\r\n\r\n        if (x.height >= itemHeight) return `ITEM: ${x.str.trim()}`\r\n\r\n        return x.str\r\n      })\r\n      .join(' ')\r\n\r\n    const pdfPages = [result]\r\n    const isBattlescribe = checkIfBattlescribe(pdfPages)\r\n    const isAzyr = isBattlescribe ? false : checkIfAzyr(pdfPages)\r\n    const isWarscroll = isAzyr || isBattlescribe ? false : checkIfWarscroll(pdfPages)\r\n    const parser: TImportParsers = isWarscroll\r\n      ? WARSCROLL_BUILDER\r\n      : isAzyr\r\n      ? AZYR\r\n      : isBattlescribe\r\n      ? BATTLESCRIBE\r\n      : UNKNOWN\r\n\r\n    if (isDev) console.log('PDF Import string, copy me to JSON to debug: ', pdfPages)\r\n\r\n    return { pdfPages, parser }\r\n  } catch (err) {\r\n    console.error(err)\r\n    return { pdfPages: [], parser: UNKNOWN }\r\n  }\r\n}\r\n\r\nconst checkIfAzyr = (pdfPages: string[]): boolean => {\r\n  const regex = / by {1,3}Azyr {1,3}Roster/gi\r\n  const azyrTest1 = regex.test(pdfPages[0])\r\n  if (azyrTest1) return true\r\n  const matches = ['play type', 'game type', 'army deemed']\r\n  return new RegExp(matches.join('|'), 'gi').test(pdfPages[0])\r\n}\r\n\r\nconst checkIfBattlescribe = (pdfPages: string[]): boolean => {\r\n  const regex = /Created.{1,5}with.{1,5}BattleScribe/gi\r\n  return regex.test(pdfPages[0])\r\n}\r\n\r\nconst checkIfWarscroll = (pdfPages: string[]): boolean => {\r\n  return pdfPages.some(x => x.includes(WARSCROLL_BUILDER) || x.includes('Allegiance:'))\r\n}\r\n\r\nexport const handleAzyrPages = (pages: string[]): string[] => {\r\n  const cleanedPages = pages.map(handlePages)\r\n  const joinedPages = cleanedPages[0]\r\n\r\n  if (isDev) console.table(joinedPages)\r\n\r\n  return joinedPages\r\n}\r\n\r\nconst handlePages = (text: string): string[] => {\r\n  const preppedText = text\r\n    .replace(/([A-Z]) ([a-z])/g, `$1$2`)\r\n    .replace(/Role: {1,}(Leader|Battleline|Other)( {1,})?, {1,}Behemoth /g, 'Role: Leader  ')\r\n    .replace(/Role: {1,}(Behemoth)( {1,})?, {1,}Artillery /g, 'Role: Leader  ')\r\n    .replace(/( )?[‚Äò‚Äô]/g, `'`) // Replace special quotes\r\n    .replace(/[‚Äú‚Äù]/g, `\"`) // Replace special quotes\r\n    .replace(/[‚Äë‚Äì‚Äî]/g, `-`) // Replace special dashes\r\n    .replace(/([a-z])- ([a-z])/g, `$1-$2`) // Flesh- eater Courts -> Flesh-eater Courts\r\n    .replace(/([\\w]) {1,3}'s /g, `$1's `) // Ford 's -> Ford's\r\n    .replace(typoRegexp, match => commonTypos[match]) // Handle any known typos\r\n    .replace(/Quantity: {2}[0-9]{1,2}/gi, ' ') // Remove \"Quantity: 1\"\r\n    .replace(/[0-9]{1,4}pts/g, ' ') // Remove '123pts'\r\n    .replace(/&/g, 'AMPERSAND') // Save any existing ampersands\r\n    .replace(/General's Adjutant/g, ' ') // Get rid of General markings\r\n    .replace(/([\\w]+)? (General)/g, generalReplacer) // Get rid of General markings\r\n    .replace(/,/g, commaAlt) // Save any existing commas\r\n    .replace(/Sky Cannon: Shell/g, 'Sky Cannon')\r\n\r\n  const items = preppedText.split('ITEM: ')\r\n  const title = handleTitle(items.shift() as string)\r\n  const processedItems = uniq(items.map(handleItem).flat())\r\n\r\n  return title.concat(processedItems).map(x => x.replace(/&&/g, ',').replace(/AMPERSAND/g, '&'))\r\n}\r\n\r\nconst handleItem = (text: string): string[] => {\r\n  const firstPass = text\r\n    .replace(/HEADER/g, ' ')\r\n    .replace(/.+See the .+? of this unit/gi, '')\r\n    .replace(/.+This unit is also a Leader.+ the Leader section./gi, '')\r\n    .replace(/.+This unit is also a Behemoth.+ the Behemoth section./gi, '')\r\n    .replace(/Army deemed .+valid/gi, ' ')\r\n    .replace(/by Azyr Roster Builder/gi, ' ')\r\n    .replace(/[0-9]{1,4}pts[/][0-9]{1,4}pts Allies/gi, ' ')\r\n    .replace(/[0-9]{1,4}pts/g, ' ')\r\n    .replace(/\\|/g, sep)\r\n    .replace(/ {2,4}/g, ' ')\r\n    .replace(unitRegexp, 'Role: UNIT')\r\n    .replace(endlessRegexp, 'Role: ENDLESS SPELL')\r\n    .replace(/Role: {1,4}Battalion/g, 'Role: BATTALION')\r\n    .replace(prayerRegexp, 'Prayer:')\r\n    .replace(spellRegexp, 'Spell:')\r\n    .replace(sceneryRegExp, ', SCENERY: $1, ')\r\n    .replace(/Battle Trait/g, 'Command Trait')\r\n    .replace(markRegexp, ' ')\r\n    .replace(auraRegexp, ' ')\r\n    // This one in case of a '(s)' on the end of a trait/weapon\r\n    .replace(\r\n      /(Artefact|Prayer|Spell|Weapon|Command Trait|Mount Trait|Upgrade): ([\\w-!' ]+)(\\(.+?\\))? (Artefact|Prayer|Spell|Weapon|Command Trait|Mount Trait|Upgrade| {1,3})/g,\r\n      traitReplacer\r\n    )\r\n\r\n  const secondPass = splitItem(firstPass)\r\n    .join(sep)\r\n    // You really do have to run this twice, really :(\r\n    .replace(\r\n      /(Artefact|Prayer|Spell|Weapon|Command Trait|Mount Trait|Upgrade): ([\\w-!' ]+) (Artefact|Prayer|Spell|Weapon|Command Trait|Mount Trait|Upgrade| {1,3})/g,\r\n      `${sep}$1: $2${sep}$3`\r\n    )\r\n    // These next two lines handle Nagash, Supreme Lord of the Undead\r\n    .replace(/(^|Role: UNIT +| {2})([\\w-' ]+(&&| {2})[\\w-!' ]+) Role: +(UNIT)/g, `$1 ${sep} UNIT: $2  ${sep}`)\r\n    .replace(\r\n      /(,| {2})([\\w-' ]+?)&& ([\\w-!' ]+?) Role:[ ]+(UNIT|BATTALION|ENDLESS SPELL)/g,\r\n      `$4: $2${commaAlt} $3${sep}`\r\n    )\r\n    // Now handle normal units\r\n    .replace(/(,| {2})([\\w-!' ]+) Role:[ ]+(UNIT|BATTALION|ENDLESS SPELL)/g, `${sep}$3: $2${sep}`)\r\n    .replace(/ {2,4}/g, ' ')\r\n    .replace(/(,| {2})?([\\w-!' ]+) Role:[ ]+(UNIT|BATTALION|ENDLESS SPELL)/g, `${sep}$3: $2${sep}`)\r\n    .replace(/(Artefact|Command Trait|Mount Trait|Prayer|Spell|Upgrade|Weapon):/g, upper)\r\n    .replace(/(UNIT:|,) ([\\w-&!' ]+) Ally/g, 'ALLY: $2') // Tag ally units\r\n    .replace(/\\/ Allies/g, '')\r\n    .split(',')\r\n    .join(sep)\r\n\r\n  return splitItem(secondPass)\r\n}\r\n\r\nconst handleTitle = (text: string): string[] => {\r\n  const firstTitlePass = text\r\n    .replace(/HEADER( HEADER)+/g, HEADER)\r\n    .replace(circleRegexp, ' ')\r\n    .replace(allegianceRegexp, 'ALLEGIANCE:')\r\n    .replace(/Realm of Battle:/g, 'General\\' Handbook:')\r\n    .replace(/ITEM: /g, sep) // Replace ITEM placeholder with commas\r\n    .replace(/([\\w]) &&/g, `$1${commaAlt}`) // Remove leading whitespace in front of existing commas\r\n    .replace(/Mercenary Company: {1,3}([\\w-' ]+)(HEADER|Extra Command|(?:$))/g, mercenaryReplacer)\r\n    .replace(/Mercenary Company:/g, 'MERCENARY COMPANY:') // Needed for Sons of Behemat for some reason\r\n    .replace(/Extr.+ Command .+chased \\(.+\\)/g, '') // Get rid of command point info (\"Extra Command Point Purchased\")\r\n    .replace(/(\\w) +Kharadron Code: /g, `$1${sep}Kharadron Code: `)\r\n\r\n  const secondTitlePass = firstTitlePass\r\n    .replace(\r\n      /.+?Allegiance:([\\w-!' ]+)(HEADER|ALLEGIANCE:|REALMSCAPE:|MERCENARY COMPANY:|,|(?:$))/g,\r\n      factionReplacer\r\n    )\r\n    .replace(\r\n      /General\\' Handbook:.+(AQSHY|CHAMON|GHUR|GHYRAN|HYSH|SHYISH|STYGXX|ULGU)&& [\\w- ]+?(HEADER|,|MERCENARY|(?:$))/g,\r\n      realmscapeReplacer\r\n    )\r\n    .replace(/Army deemed .+valid/gi, ' ')\r\n    .replace(/by Azyr Roster Builder/g, ' ')\r\n    .replace(/[0-9]{1,4}pts[/][0-9]{1,4}pts Allies/gi, ' ')\r\n    .replace(/[0-9]{1,4}pts/g, ' ')\r\n    .replace(/\\|/g, sep)\r\n    .replace(/((Kharadron Code|ALLEGIANCE): [\\w-&;' ]+) HEADER/g, `$1${sep}`) // KO stuff\r\n    .replace(/HEADER/g, ' ')\r\n\r\n  return splitItem(secondTitlePass)\r\n}\r\n\r\nconst splitItem = (text: string): string[] => {\r\n  return text\r\n    .split(',')\r\n    .map(x => x.replace(/ {2,}/g, ' ').trim())\r\n    .filter(x => !!x)\r\n}\r\n\r\nconst getTextHeights = (heights: number[]) => {\r\n  const textHeights = sortBy(uniq(heights)).reverse()\r\n\r\n  let headerHeight = 99\r\n  let itemHeight = 99\r\n\r\n  // A faction/realm-only pdf only has 3, so we don't bother setting this\r\n  if (textHeights.length > 3) {\r\n    // Meeting Engagement has 6 fontSizes, others have 5\r\n    // textHeights[0] === Army Name\r\n    // textHeights[1] === \"Total: \"\r\n    headerHeight = textHeights[textHeights.length - 3]\r\n    itemHeight = textHeights[textHeights.length - 2]\r\n    // last(textHeights) === Traits and options\r\n  }\r\n  return { headerHeight, itemHeight }\r\n}\r\n\r\nconst factionReplacer = (match: string, p1: string, p2: string) => `FACTION: ${p1.trim()}${sep}${p2}`\r\n\r\nconst generalReplacer = (match: string, p1: string, p2: string) => {\r\n  const validPrefixes = ['Aggressive', 'Freeguild']\r\n  if (p1 && validPrefixes.includes(p1)) return match // Leave General\r\n  return `${p1 || ''}  ` // Remove General\r\n}\r\n\r\nconst mercenaryReplacer = (match: string, p1: string, p2: string) => {\r\n  const suffix = p2 === 'Extra Command' ? p2 : ``\r\n  return `${sep}MERCENARY COMPANY: ${p1.trim()}${sep}${suffix}`\r\n}\r\n\r\nconst realmscapeReplacer = (match: string, p1: string, p2: string) => {\r\n  const suffix = p2.toUpperCase() === 'MERCENARY' ? p2 : ``\r\n  return `${sep}REALMSCAPE: ${p1.trim()}${sep}${suffix}`\r\n}\r\n\r\nconst traitReplacer = (match: string, p1: string, p2: string, p3: string, p4: string) => {\r\n  return `${sep}${p1}: ${p2}${p3 || ''}${sep}${p4}`\r\n}\r\n\r\nconst upper = (match: string) => match.toUpperCase()\r\n\r\nconst prayerRegexp = new RegExp(`Prayer:`, 'g')\r\nconst spellRegexp = new RegExp(`Spell:`, 'g')\r\n\r\nconst unitTypes = ['Leader', 'Battleline', 'Artillery', 'Behemoth', 'Other']\r\nconst unitRegexp = new RegExp(`Role: {1,4}(${unitTypes.join('|')})`, 'g')\r\n\r\nconst endlessTypes = ['Endless Spell', 'Magmic Invocation', 'Judgement of Khorne']\r\nconst endlessRegexp = new RegExp(`Role: {1,4}(${endlessTypes.join('|')})`, 'g')\r\n\r\nconst allegianceTypes = [\r\n  'Constellation',\r\n  'Coven',\r\n  'Enclave',\r\n  'Glade',\r\n  'Grand Court',\r\n  'Great Nations',\r\n  'Greatfray',\r\n  'Host',\r\n  'Legion',\r\n  'Lineage',\r\n  'Lodge',\r\n  'Mawtribe',\r\n  'Sky-port',\r\n  'Skyport',\r\n  'Slaughterhost',\r\n  'Stormhost',\r\n  'Stronghold',\r\n  'Temple',\r\n  'Warclan',\r\n  'Warriors',\r\n  'Way of the Seraphon',\r\n] as const\r\n\r\nconst allegianceRegexp = new RegExp(`(${allegianceTypes.join('|')}):`, 'g')\r\n\r\nconst commonTypos = {\r\n  'Aggr essiv e': 'Aggressive',\r\n  'Allher d': 'Allherd',\r\n  'Alwa ys T ak e What Y ou Ar e Owed': 'Always Take What You Are Owed',\r\n  'Amar anthine': 'Amaranthine',\r\n  'AQSH Y': 'AQSHY',\r\n  'Ar tiller y': 'Artillery',\r\n  'Arm y deem ed  invalid  by': 'Army deemed invalid by',\r\n  'Balefir e': 'Balefire',\r\n  'Bar ak-': 'Barak-',\r\n  'Bat tle': 'Battle',\r\n  'Bear er': 'Bearer',\r\n  'Behem oth': 'Behemoth',\r\n  'Berserk er Lor d': 'Berserker Lord',\r\n  'Berserk Er Lor D': 'Berserker Lord',\r\n  'Black ened': 'Blackened',\r\n  'Blood-for ged': 'Blood-forged',\r\n  'Bloodlor ds': 'Bloodlords',\r\n  'Bloodr eaper': 'Bloodreaper',\r\n  'Boltst orm': 'Boltstorm',\r\n  'Br eath of Mor grim': 'Breath of Morgrim',\r\n  'CH AMON': 'CHAMON',\r\n  'Cir cle': 'Circle',\r\n  'Com m and': 'Command',\r\n  'Cour t': 'Court',\r\n  'Court s': 'Courts',\r\n  'Decr epify': 'Decrepify',\r\n  'Def ender': 'Defender',\r\n  'Desecr ator': 'Desecrator',\r\n  'DHOM-H AIN': 'DHOM-HAIN',\r\n  'Dominat or': 'Dominator',\r\n  'Dr aining': 'Draining',\r\n  'Dr ead': 'Dread',\r\n  'Emissar y of the Deep Places': 'Emissary of the Deep Places',\r\n  'Encla ve': 'Enclave',\r\n  'Eternal Conflagr ation': 'Eternal Conflagration',\r\n  'Ether al Blessings': 'Etheral Blessings',\r\n  'Ether eal': 'Ethereal',\r\n  'Gener al': 'General',\r\n  'Ghurish Mawshar d': 'Ghurish Mawshard',\r\n  'Godseek ers': 'Godseekers',\r\n  'Gr eatblade': 'Greatblade',\r\n  'Gristlegor e': 'Gristlegore',\r\n  'Honour ed Retinue': '',\r\n  'Honoured Retinue': '',\r\n  'Hosts Duplicit ous': 'Hosts Duplicitous',\r\n  'Iggrind-Kaz Surge-injection Endrin Mk ‚Äã  IV': 'Iggrind-Kaz Surge-injection Endrin Mk. IV',\r\n  'Incr edible': 'Incredible',\r\n  'Inv ocation': 'Invocation',\r\n  'IONRA CH': 'Ionrach',\r\n  'Khar adr on Ov erlor ds': 'Kharadron Overlords',\r\n  'Khar adron': 'Kharadron',\r\n  'L ORDS': 'LORDS',\r\n  'Lizar d': 'Lizard',\r\n  'Mak er': 'Maker',\r\n  'Master y': 'Mastery',\r\n  'Mercenar y Company': 'Mercenary Company',\r\n  'mor e': 'more',\r\n  'Nur gle': 'Nurgle',\r\n  'Or der': 'Order',\r\n  'Ossiar ch Boner eapers': 'Ossiarch Bonereapers',\r\n  'Ov erlords': 'Overlords',\r\n  'Pist ol': 'Pistol',\r\n  'Pr ogr ess': 'Progress',\r\n  'Pur chased': 'Purchased',\r\n  'Realm-lor ds': 'Realm-lords',\r\n  'Sacr ament': 'Sacrament',\r\n  'Sepulchr al Plate': 'Sepulchral Plate',\r\n  'Shar d': 'Shard',\r\n  'Sk ewer': 'Skewer',\r\n  'Skr yre': 'Skryre',\r\n  'Sky Port': 'Skyport',\r\n  'Sky-por t': 'Sky-port',\r\n  'Sla yer': 'Slayer',\r\n  'Souldr aught': 'Souldraught',\r\n  'Spectral 9 ether': 'Spectral Tether',\r\n  'Standar d': 'Standard',\r\n  'Starstrik e': 'Starstrike',\r\n  'T ype': 'Type',\r\n  'These Ar e Just Guidelines': 'These Are Just Guidelines',\r\n  'Thr one': 'Throne',\r\n  'Varanguar d': 'Varanguard',\r\n  'Warbeat:': 'Prayer:',\r\n  'Warpfir e': 'Warpfire',\r\n  'Way of the Ser aphon': 'Way of the Seraphon',\r\n  'Wick ed': 'Wicked',\r\n  'Wor d': 'Word',\r\n  \"A'rgath, the King of Blades\": 'Argath the King of Blades',\r\n  \"Coalbear d's Collapsible Compar tments\": \"Coalbeard's Collapsible Compartments\",\r\n  \"Don 't Ar gue With The Wind\": \"Don't Ar gue With The Wind\",\r\n  \"Ther e's Alwa ys a Br eez e If Y ou Look F or It\": \"There's Always a Breeze If You Look For It\",\r\n  \"Wher e Ther e's W ar, Ther e's Gold\": \"Where There's War, There's Gold\",\r\n  \"Zonbarcorp'Debtsettler' Spar Torpedo\": \"Zonbarcorp 'Debtsettler' Spar Torpedo\",\r\n  FUETH√ÅN: 'FUETHAN',\r\n}\r\n\r\nconst typoRegexp = new RegExp(Object.keys(commonTypos).join('|'), 'g')\r\nconst markRegexp = new RegExp(\r\n  `Mark( of Chaos)?: {1,3}(${SUPPORTED_FACTIONS.map(titleCase).concat('Undivided').join('|')})`,\r\n  'gi'\r\n)\r\nconst auraRegexp = new RegExp(\r\n  `Aura of Chaos: {1,3}Aura of (Nurgle|Slaanesh|Khorne|Tzeentch|Chaos Undivided)`,\r\n  'gi'\r\n)\r\nconst circleRegexp = new RegExp(\r\n  `Circle of the Varanguard: {1,3}(First|Second|Third|Fourth|Fifth|Sixth|Seventh|Eighth) Circle`,\r\n  'gi'\r\n)\r\n\r\nconst scenery = ['Penumbral Engine']\r\nconst sceneryRegExp = new RegExp(`(${scenery.join('|')})`, 'g')\r\n","import { uniq, without } from 'lodash'\r\nimport { CHAOS, DEATH, DESTRUCTION, ORDER } from 'meta/alliances'\r\nimport {\r\n  CHAOS_GRAND_ALLIANCE,\r\n  DEATH_GRAND_ALLIANCE,\r\n  DESTRUCTION_GRAND_ALLIANCE,\r\n  MEGA_GARGANT_MERCENARIES,\r\n  MERCENARY_COMPANIES,\r\n  ORDER_GRAND_ALLIANCE,\r\n  TSupportedFaction,\r\n} from 'meta/factions'\r\nimport { getFactionList } from 'meta/faction_list'\r\n\r\ntype TAllyArmies = Record<TSupportedFaction, { units: string[]; battalions: string[] }>\r\ntype TGetAllyArmyItems = (factionName: string) => TAllyArmies\r\n\r\nexport const getAllyArmyItems: TGetAllyArmyItems = factionName => {\r\n  const ArmyList = getFactionList()\r\n  const { GrandAlliance } = ArmyList[factionName]\r\n\r\n  const allianceName = {\r\n    [CHAOS]: CHAOS_GRAND_ALLIANCE,\r\n    [DEATH]: DEATH_GRAND_ALLIANCE,\r\n    [DESTRUCTION]: DESTRUCTION_GRAND_ALLIANCE,\r\n    [ORDER]: ORDER_GRAND_ALLIANCE,\r\n  }[GrandAlliance]\r\n\r\n  const allyFactionNames = uniq(\r\n    without(\r\n      Object.keys(ArmyList)\r\n        .filter(x => ArmyList[x].GrandAlliance === GrandAlliance)\r\n        .concat(MERCENARY_COMPANIES, MEGA_GARGANT_MERCENARIES),\r\n      ...[\r\n        factionName,\r\n        CHAOS_GRAND_ALLIANCE,\r\n        DEATH_GRAND_ALLIANCE,\r\n        DESTRUCTION_GRAND_ALLIANCE,\r\n        ORDER_GRAND_ALLIANCE,\r\n      ]\r\n    ).concat(allianceName)\r\n  ) as TSupportedFaction[]\r\n\r\n  const allyArmies = allyFactionNames.reduce((a, faction) => {\r\n    const battalions = ArmyList[faction].AggregateArmy.Battalions || []\r\n    const units = ArmyList[faction].AggregateArmy.Units || []\r\n    a[faction] = {\r\n      battalions: battalions.map(({ name }) => name),\r\n      units: units.map(({ name }) => name),\r\n    }\r\n    return a\r\n  }, {} as TAllyArmies)\r\n\r\n  return allyArmies\r\n}\r\n","/**\r\n * Sometimes the text formatting from PDF.js leads to extra spaces in a word\r\n * What we want to do is smush the word together (removing all spaces)\r\n * And then expand the word, adding spaces where our potential match has them\r\n * And check if we've got a partial match\r\n * @param value\r\n * @param potentialMatch\r\n */\r\nexport const isPoorlySpacedMatch = (value: string, potentialMatch: string): boolean => {\r\n  const smushed = value.replace(/ +/g, '')\r\n  const spaceIndices = potentialMatch\r\n    .split('')\r\n    .map((x, i) => (x === ' ' ? i : -1))\r\n    .filter(x => x > -1)\r\n\r\n  let smushedIdx = 0\r\n  let assemblyStore: string[] = []\r\n  for (let i = 0; i <= smushed.length; i++) {\r\n    if (spaceIndices.includes(i)) {\r\n      assemblyStore.push(' ')\r\n    } else {\r\n      assemblyStore.push(smushed[smushedIdx])\r\n      smushedIdx++\r\n    }\r\n  }\r\n  const reassembledVal = assemblyStore.join('')\r\n\r\n  return potentialMatch.toUpperCase().includes(reassembledVal.toUpperCase())\r\n}\r\n","import { last } from 'lodash'\r\nimport { isPoorlySpacedMatch } from 'utils/import/isPoorlySpacedMatch'\r\nimport { replaceOf } from 'utils/import/replaceOf'\r\nimport { stripPunctuation } from 'utils/textUtils'\r\n\r\nexport const Validators = (Names: string[]) => {\r\n  /**\r\n   * Accepts an UPPERCASED value\r\n   * @param val\r\n   */\r\n  const matchUpper = (val: string) => Names.find(x => x.toUpperCase().includes(val))\r\n\r\n  /**\r\n   * Accepts an UPPERCASED value\r\n   * Removes trailing '... of Slaanesh'\r\n   * @param val\r\n   */\r\n  const matchNoOf = (val: string) => {\r\n    const valShortened = replaceOf(val)\r\n    return Names.find(x => x.toUpperCase().includes(valShortened))\r\n  }\r\n\r\n  /**\r\n   * Accepts an UPPERCASED value\r\n   * Removes punctuation\r\n   * @param val\r\n   */\r\n  const matchNoPunc = (val: string) => {\r\n    const valNoPunc = stripPunctuation(val)\r\n    return Names.find(x => stripPunctuation(x.toUpperCase()).includes(valNoPunc))\r\n  }\r\n\r\n  /**\r\n   * Accepts an UPPERCASED value\r\n   * Removes parentheses\r\n   * @param val\r\n   */\r\n  const matchNoParens = (val: string) => {\r\n    const valNoParens = val.replace(/\\(.+\\)/g, '').trim()\r\n    return Names.find(x =>\r\n      x\r\n        .toUpperCase()\r\n        .replace(/\\(.+\\)/g, '')\r\n        .includes(valNoParens)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Accepts an UPPERCASED value\r\n   * Removes semicolons ':'\r\n   * @param val\r\n   */\r\n  const matchNoSemicolons = (val: string) => {\r\n    const valNoSemi = last(val.split(':')) as string\r\n    return Names.find(x => x.toUpperCase().includes(valNoSemi))\r\n  }\r\n\r\n  /**\r\n   * Accepts any value (does not need to be uppercased)\r\n   * Checks for poor spacing\r\n   * @param val\r\n   */\r\n  const matchPoorSpacing = (val: string) => Names.find(x => isPoorlySpacedMatch(val, x))\r\n\r\n  return {\r\n    matchNoOf,\r\n    matchNoParens,\r\n    matchNoPunc,\r\n    matchNoSemicolons,\r\n    matchPoorSpacing,\r\n    matchUpper,\r\n  }\r\n}\r\n","import { SUPPORTED_FACTIONS } from 'meta/factions'\r\nimport { titleCase } from 'utils/textUtils'\r\n\r\n/**\r\n * Accepts an UPPERCASED value and looks for a faction in the name\r\n * e.g. Demon Prince of Slaanesh -> Demon Prince\r\n * @param val\r\n */\r\nexport const replaceOf = (val: string) => {\r\n  const factions = SUPPORTED_FACTIONS.map(titleCase).map(x => x.toUpperCase())\r\n  const faction = factions.find(x => val.includes(` OF ${x}`))\r\n  if (faction) val = val.replace(` OF ${faction}`, ``)\r\n  return val\r\n}\r\n","import { TImportError } from 'types/import'\r\n\r\nexport const createAllyWarning = (text: string): { text: string; severity: 'ally-warn' } => ({\r\n  text,\r\n  severity: 'ally-warn',\r\n})\r\n\r\nexport const createAmbiguityWarning = (text: string): { text: string; severity: 'ambiguity-warn' } => ({\r\n  text,\r\n  severity: 'ambiguity-warn',\r\n})\r\n\r\nexport const createDeprecationWarning = (\r\n  text: string,\r\n  reason: string\r\n): { text: string; severity: 'deprecation-warn'; reason: string } => ({\r\n  text,\r\n  severity: 'deprecation-warn',\r\n  reason,\r\n})\r\n\r\nexport const createFatalError = (text: string): { text: string; severity: 'error' } => ({\r\n  text,\r\n  severity: 'error',\r\n})\r\n\r\nexport const createWarning = (text: string): { text: string; severity: 'warn' } => ({\r\n  text,\r\n  severity: 'warn',\r\n})\r\n\r\nexport const getAllWarnings = (errors: TImportError[]) =>\r\n  errors.filter(\r\n    e =>\r\n      e.severity === 'ally-warn' ||\r\n      e.severity === 'ambiguity-warn' ||\r\n      e.severity === 'deprecation-warn' ||\r\n      e.severity === 'warn'\r\n  )\r\n\r\nexport const getAllyWarnings = (errors: TImportError[]) => errors.filter(e => e.severity === 'ally-warn')\r\n\r\nexport const getWarnings = (errors: TImportError[]) => errors.filter(e => e.severity === 'warn')\r\n\r\nconst hasWarning = (errors: TImportError[]) => errors.some(e => e.severity === 'warn')\r\n\r\nexport const hasFatalError = (errors: TImportError[]) => errors.some(e => e.severity === 'error')\r\n\r\n/**\r\n * Ignores ally warnings and ambiguity warnings\r\n * @param errors\r\n */\r\nexport const hasErrorOrWarning = (errors: TImportError[]) => {\r\n  return hasFatalError(errors) || hasWarning(errors)\r\n}\r\n","import { TImportError } from 'types/import'\r\nimport { Validators } from 'utils/import/validators'\r\nimport { createWarning } from 'utils/import/warnings'\r\n\r\nexport const checkImportSelection = (\r\n  Names: string[],\r\n  NameMap: Record<string, string>,\r\n  errors: TImportError[],\r\n  logError: boolean = true,\r\n  checkPoorSpacing: boolean,\r\n  typoMap: Record<string, string>\r\n) => {\r\n  const validators = Validators(Names)\r\n\r\n  return (val: string) => {\r\n    // Check for typos\r\n    if (typoMap[val]) val = typoMap[val]\r\n\r\n    if (NameMap[val]) return val\r\n\r\n    // Going to check against uppercased values\r\n    const valUpper = val.toUpperCase()\r\n\r\n    // Simple check if maybe some capitalization is off\r\n    const match = validators.matchUpper(valUpper)\r\n    if (match) return match\r\n\r\n    // Maybe we have a trailing '... of Slaanesh'?\r\n    const match2 = validators.matchNoOf(valUpper)\r\n    if (match2) return match2\r\n\r\n    // Maybe punctuation is in our way?\r\n    const match3 = validators.matchNoPunc(valUpper)\r\n    if (match3) return match3\r\n\r\n    // Sometimes parentheses get in our way\r\n    const match4 = validators.matchNoParens(valUpper)\r\n    if (match4) return match4\r\n\r\n    // Maybe semicolons?\r\n    const match5 = validators.matchNoSemicolons(valUpper)\r\n    if (match5) return match5\r\n\r\n    // Last chance - check for bad spacing (if enabled)\r\n    if (checkPoorSpacing) {\r\n      const match6 = validators.matchPoorSpacing(valUpper)\r\n      if (match6) return match6\r\n    }\r\n\r\n    if (logError) {\r\n      errors.push(createWarning(val))\r\n    }\r\n    return ''\r\n  }\r\n}\r\n","import { uniq, without } from 'lodash'\r\nimport { TSupportedFaction } from 'meta/factions'\r\nimport { TImportError } from 'types/import'\r\nimport { IAllySelections } from 'types/selections'\r\nimport { TAllySelectionStore } from 'types/store'\r\nimport { getAllyArmyItems } from 'utils/getArmy/getAllyArmyUnits'\r\nimport { checkImportSelection } from 'utils/import/checkImportSelection'\r\nimport { createAllyWarning, getWarnings } from 'utils/import/warnings'\r\nimport { mapListToDict } from 'utils/mapListToDict'\r\nimport { titleCase } from 'utils/textUtils'\r\n\r\ntype TGetAllyData = (\r\n  allyUnits: string[],\r\n  factionName: TSupportedFaction,\r\n  errors: TImportError[],\r\n  checkPoorSpacing: boolean,\r\n  typoMap: Record<string, string>\r\n) => { allyFactionNames: TSupportedFaction[]; allySelections: TAllySelectionStore }\r\n\r\nexport const getAllyData: TGetAllyData = (allyUnits, factionName, errors, checkPoorSpacing, typoMap) => {\r\n  const mergedAllyItems = uniq(\r\n    getWarnings(errors)\r\n      .map(x => x.text)\r\n      .concat(allyUnits)\r\n  )\r\n\r\n  if (mergedAllyItems.length === 0) {\r\n    return {\r\n      allyFactionNames: [],\r\n      allySelections: {},\r\n    }\r\n  }\r\n\r\n  const allyArmyItems = getAllyArmyItems(factionName)\r\n\r\n  const allyData = Object.keys(allyArmyItems).reduce(\r\n    (a, allyName) => {\r\n      const { units, battalions } = allyArmyItems[allyName] as { units: string[]; battalions: string[] }\r\n\r\n      const unitsMap = mapListToDict(units)\r\n      const battalionsMap = mapListToDict(battalions)\r\n\r\n      const battalionCheck = checkImportSelection(\r\n        battalions,\r\n        battalionsMap,\r\n        errors,\r\n        false,\r\n        checkPoorSpacing,\r\n        typoMap\r\n      )\r\n      const errorFreeAllyBattalions = mergedAllyItems.map(battalionCheck).filter(x => !!x)\r\n\r\n      const unitCheck = checkImportSelection(units, unitsMap, errors, false, checkPoorSpacing, typoMap)\r\n      const errorFreeAllyUnits = mergedAllyItems.map(unitCheck).filter(x => !!x)\r\n\r\n      if (errorFreeAllyUnits.length + errorFreeAllyBattalions.length > 0) {\r\n        a.allySelections[allyName] = {\r\n          battalions: errorFreeAllyBattalions,\r\n          units: errorFreeAllyUnits,\r\n        }\r\n\r\n        a.allyFactionNames = uniq(a.allyFactionNames.concat(allyName as TSupportedFaction))\r\n      }\r\n\r\n      return a\r\n    },\r\n    { allySelections: {} as TAllySelectionStore, allyFactionNames: [] as TSupportedFaction[] }\r\n  )\r\n\r\n  // Check for unit name collisions and mark them as errors\r\n  const collisions = Object.keys(allyData.allySelections).reduce((a, allyName) => {\r\n    const units: string[] = uniq(allyData.allySelections[allyName].units)\r\n    units.forEach(unit => {\r\n      if (a[unit]) {\r\n        a[unit] = a[unit].concat(allyName as TSupportedFaction)\r\n      } else {\r\n        a[unit] = [allyName as TSupportedFaction]\r\n      }\r\n    })\r\n    return a\r\n  }, {} as { [key: string]: TSupportedFaction[] })\r\n\r\n  Object.keys(collisions).forEach(unit => {\r\n    if (collisions[unit].length > 1) {\r\n      errors.push(\r\n        createAllyWarning(\r\n          `Allied ${unit} can belong to ${collisions[unit]\r\n            .map(titleCase)\r\n            .join(' or ')}. Please add this unit manually.`\r\n        )\r\n      )\r\n\r\n      // Remove the unit from allySelections\r\n      // And if that empties the array,\r\n      // Remove the entry + remove it from allyFactionNames\r\n      collisions[unit].forEach(faction => {\r\n        const factionSelections = allyData.allySelections[faction] as IAllySelections\r\n        factionSelections.units = without(factionSelections.units as string[], unit)\r\n        if (factionSelections.units.length === 0) {\r\n          delete allyData.allySelections[faction]\r\n          allyData.allyFactionNames = without(allyData.allyFactionNames, faction)\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  return allyData\r\n}\r\n","import { remove } from 'lodash'\r\nimport { IArmy } from 'types/army'\r\nimport { TImportError } from 'types/import'\r\nimport { DeprecatedSelections } from 'utils/import/options'\r\nimport { getAllWarnings } from 'utils/import/warnings'\r\n\r\n/**\r\n * Mutates the errors array if it finds a suitable match in the allegiance abilities\r\n * @param Army\r\n * @param flavors\r\n * @param errors\r\n */\r\nexport const checkErrorsForAllegianceAbilities = (Army: IArmy, flavors: string[], errors: TImportError[]) => {\r\n  if (errors.length === 0 || flavors.length === 0) return\r\n\r\n  const warnings = getAllWarnings(errors).map(({ text }) => text)\r\n  let foundError = false\r\n\r\n  flavors.forEach(a => {\r\n    if (foundError) return\r\n    const entry = Army.Flavors.find(al => al.name === a)\r\n    if (!entry) return\r\n\r\n    entry.effects.forEach(e => {\r\n      if (foundError) return\r\n      const match = warnings.find(err => err.toUpperCase() === e.name.toUpperCase())\r\n      if (match) {\r\n        foundError = true\r\n        remove(errors, x => x.text === match)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Mutates the errors array to provide appropriate messages for deprecated selections\r\n * @param errors\r\n */\r\nexport const checkErrorsForDeprecations = (errors: TImportError[]) => {\r\n  errors.forEach(error => {\r\n    const deprecation = DeprecatedSelections[error.text]\r\n    if (deprecation !== undefined) {\r\n      error.severity = 'deprecation-warn'\r\n      error.reason = deprecation\r\n    }\r\n  })\r\n}\r\n","import { difference, uniqBy } from 'lodash'\r\nimport { TSupportedFaction } from 'meta/factions'\r\nimport { IArmy } from 'types/army'\r\nimport { SELECTION_TYPES } from 'types/data'\r\nimport { IImportedArmy, TImportError, TImportParsers } from 'types/import'\r\nimport { IAllySelections, TSelectionTypes } from 'types/selections'\r\nimport { TAllySelectionStore } from 'types/store'\r\nimport { logDeprecatedImport, logFailedImport } from 'utils/analytics'\r\nimport { isValidFactionName } from 'utils/armyUtils'\r\nimport { isDev } from 'utils/env'\r\nimport { getArmy } from 'utils/getArmy/getArmy'\r\nimport { addSideEffectsToImport } from 'utils/import/addSideEffectsToImport'\r\nimport { getAllyData } from 'utils/import/allyData'\r\nimport { addAmbiguousSelectionErrors } from 'utils/import/ambiguousSelections'\r\nimport { checkErrorsForAllegianceAbilities, checkErrorsForDeprecations } from 'utils/import/checkErrors'\r\nimport { DeprecatedSelections, ignoredUnknownSelections, parserOptions } from 'utils/import/options'\r\nimport { removeSideEffectsFromImport } from 'utils/import/removeSideEffectsFromImport'\r\nimport { importSelectionLookup } from 'utils/import/selectionLookup'\r\nimport {\r\n  createDeprecationWarning,\r\n  createFatalError,\r\n  getAllyWarnings,\r\n  getWarnings,\r\n  hasFatalError,\r\n} from 'utils/import/warnings'\r\n\r\nexport const importErrorChecker = (army: IImportedArmy, parser: TImportParsers): IImportedArmy => {\r\n  const opts = parserOptions[parser]\r\n\r\n  let { errors, factionName, subFactionName, selections, unknownSelections, allyUnits } = army\r\n\r\n  // If we've already gotten an error, go ahead and bail out\r\n  if (hasFatalError(errors)) return army\r\n\r\n  // If we're missing a faction name, we won't be able to do much with this\r\n  if (!isValidFactionName(factionName)) {\r\n    const deprecation = DeprecatedSelections[factionName]\r\n    const logFn = !!deprecation ? logDeprecatedImport : logFailedImport\r\n    logFn(`faction:${factionName || 'Unknown'}`, parser)\r\n    const errorTxt = !!factionName ? `${factionName} are not supported.` : opts.fileReadError\r\n    const error = !!deprecation\r\n      ? createDeprecationWarning(factionName, deprecation)\r\n      : createFatalError(errorTxt)\r\n    return {\r\n      ...army,\r\n      errors: [error],\r\n    }\r\n  }\r\n\r\n  unknownSelections = unknownSelections.filter(x => !ignoredUnknownSelections.includes(x))\r\n\r\n  const foundSelections: string[] = []\r\n\r\n  const Army = getArmy(factionName, subFactionName) as IArmy\r\n\r\n  const lookup = importSelectionLookup(\r\n    Army,\r\n    selections,\r\n    errors,\r\n    unknownSelections,\r\n    foundSelections,\r\n    opts.checkPoorSpacing,\r\n    opts.typoMap\r\n  )\r\n\r\n  const errorFreeSelections = SELECTION_TYPES.reduce((a, key) => {\r\n    a[key] = lookup(key)\r\n    return a\r\n  }, {} as Record<TSelectionTypes, string[]>)\r\n\r\n  const couldNotFind = difference(unknownSelections, foundSelections)\r\n  if (couldNotFind.length > 0 && isDev) console.log('Could not find: ', couldNotFind)\r\n\r\n  const allyData = getAllyData(allyUnits, factionName, errors, opts.checkPoorSpacing, opts.typoMap)\r\n\r\n  // Check for allegiance abilities and remove them from errors if we find them\r\n  checkErrorsForAllegianceAbilities(Army, errorFreeSelections.flavors, errors)\r\n\r\n  // Check for deprecated selections and replace the warning if we find them\r\n  checkErrorsForDeprecations(errors)\r\n\r\n  // Check if any of the selections have names that map one-to-many from source to us\r\n  addAmbiguousSelectionErrors(errors, errorFreeSelections, allyData, opts.ambiguousNamesMap)\r\n\r\n  // Remove errors where we have found the missing item\r\n  errors = removeFoundErrors(errors, errorFreeSelections, allyData)\r\n\r\n  // Remove any duplicate errors\r\n  errors = uniqBy(errors, 'text')\r\n\r\n  // Fire off any warnings to Google Analytics\r\n  getWarnings(errors).forEach(e => logFailedImport(e.text, parser))\r\n\r\n  const mergedSelections = {\r\n    ...selections,\r\n    ...errorFreeSelections,\r\n  }\r\n\r\n  // Remove explicitly-included selections that are actually side-effects, then add relevant side-effects\r\n  const selectionsWithoutSideEffects = removeSideEffectsFromImport(mergedSelections, Army, parser)\r\n  const selectionsWithSideEffects = addSideEffectsToImport(selectionsWithoutSideEffects, Army)\r\n\r\n  return {\r\n    ...army,\r\n    errors,\r\n    unknownSelections: couldNotFind,\r\n    selections: selectionsWithSideEffects,\r\n    ...allyData,\r\n  }\r\n}\r\n\r\ntype TRemoveFoundErrors = (\r\n  errors: TImportError[],\r\n  selections: Record<string, string[]>,\r\n  allyData: { allyFactionNames: TSupportedFaction[]; allySelections: TAllySelectionStore }\r\n) => TImportError[]\r\n\r\nconst removeFoundErrors: TRemoveFoundErrors = (errors, selections, allyData) => {\r\n  const foundAllies = (Object.values(allyData.allySelections) as IAllySelections[])\r\n    .map(x => [...x.units, ...x.battalions])\r\n    .flat()\r\n\r\n  const found = Object.values(selections).concat(foundAllies).flat()\r\n\r\n  const filteredErrors = errors\r\n    .filter(e => !found.some(f => f === e.text))\r\n    .filter(e => !found.some(f => f.startsWith(e.text)))\r\n\r\n  const allyErrors = getAllyWarnings(errors)\r\n\r\n  // Filter out duplicative ally/normal warnings\r\n  return filteredErrors.reduce((a, error) => {\r\n    if (error.severity === 'warn' && allyErrors.some(a => a.text.startsWith(`Allied ${error.text} `))) {\r\n      return a\r\n    }\r\n    a.push(error)\r\n    return a\r\n  }, [] as TImportError[])\r\n}\r\n","import { uniq } from 'lodash'\r\nimport { IArmy } from 'types/army'\r\nimport { lowerToUpperLookup } from 'types/data'\r\nimport { TImportError } from 'types/import'\r\nimport { TSelections, TSelectionTypes } from 'types/selections'\r\nimport { checkImportSelection } from 'utils/import/checkImportSelection'\r\nimport { importUnitOptionMap } from 'utils/import/options'\r\nimport { Validators } from 'utils/import/validators'\r\nimport { mapListToDict } from 'utils/mapListToDict'\r\n\r\nexport const importSelectionLookup =\r\n  (\r\n    Army: IArmy,\r\n    selections: TSelections,\r\n    errors: TImportError[],\r\n    unknownSelections: string[],\r\n    foundSelections: string[],\r\n    checkPoorSpacing: boolean,\r\n    typoMap: Record<string, string>\r\n  ) =>\r\n  (type: TSelectionTypes): string[] => {\r\n    const Names: string[] = Army[lowerToUpperLookup[type]].map(({ name }) => name)\r\n    const NameMap = mapListToDict(Names)\r\n    const validators = Validators(Names)\r\n    const checkVal = checkImportSelection(Names, NameMap, errors, true, checkPoorSpacing, typoMap)\r\n\r\n    const errorFree = selections[type].map(checkVal).filter(x => !!x)\r\n\r\n    const found = unknownSelections\r\n      .map(val => {\r\n        const orig = `${val}`\r\n\r\n        // Check for typos\r\n        if (typoMap[val]) val = typoMap[val]\r\n\r\n        // Ideally, we return here because the name exactly matches what we have stored\r\n        if (NameMap[val]) {\r\n          foundSelections.push(orig)\r\n          return val\r\n        }\r\n\r\n        // See if we have a matching conversion for a certain weapon -> unit\r\n        // e.g. 'Ritual Knife' -> 'Keeper of Secrets w/ Ritual Knife'\r\n        if (type === 'units' && importUnitOptionMap[orig]) {\r\n          foundSelections.push(orig)\r\n          return importUnitOptionMap[orig]\r\n        }\r\n\r\n        // We will check everything against uppercased values\r\n        const valUpper = val.toUpperCase()\r\n\r\n        // Simple check, it would be great if we found it here\r\n        const match = validators.matchUpper(valUpper)\r\n        if (match) {\r\n          foundSelections.push(orig)\r\n          return match\r\n        }\r\n\r\n        // Sometimes parentheses get in our way\r\n        const match2 = validators.matchNoParens(valUpper)\r\n        if (match2) {\r\n          foundSelections.push(orig)\r\n          return match2\r\n        }\r\n\r\n        if (checkPoorSpacing) {\r\n          // Last chance - check for bad spacing\r\n          const match3 = validators.matchPoorSpacing(valUpper)\r\n          if (match3) {\r\n            foundSelections.push(orig)\r\n            return match3\r\n          }\r\n        }\r\n\r\n        return ''\r\n      })\r\n      .filter(x => !!x)\r\n\r\n    return uniq(errorFree.concat(found))\r\n  }\r\n","import { TSupportedFaction } from 'meta/factions'\r\nimport { TImportError } from 'types/import'\r\nimport { TAllySelectionStore } from 'types/store'\r\nimport { createAmbiguityWarning } from 'utils/import/warnings'\r\n\r\n/**\r\n * Adds an error for each selection we've identified could be wrong based on ambiguous naming in the source\r\n * @param errors\r\n * @param selections\r\n * @param allyData\r\n * @param ambiguousNamesMap\r\n */\r\nexport const addAmbiguousSelectionErrors = (\r\n  errors: TImportError[],\r\n  selections: Record<string, string[]>,\r\n  allyData: { allyFactionNames: TSupportedFaction[]; allySelections: TAllySelectionStore },\r\n  ambiguousNamesMap: Record<string, string>\r\n) => {\r\n  const flatAllySelections = Object.values(allyData.allySelections)\r\n    .map(x => (x ? x.units : []))\r\n    .flat()\r\n\r\n  const flatSelections = Object.values(selections).concat(flatAllySelections).flat()\r\n  flatSelections.forEach(selection => {\r\n    const match = ambiguousNamesMap[selection]\r\n    if (match) {\r\n      errors.push(\r\n        createAmbiguityWarning(\r\n          `Azyr lists more than one unit as '${match}'. Please check that we have imported the correct one.`\r\n        )\r\n      )\r\n    }\r\n  })\r\n}\r\n","import { difference } from 'lodash'\r\nimport { IArmy } from 'types/army'\r\nimport { lowerToUpperLookup } from 'types/data'\r\nimport { TImportParsers } from 'types/import'\r\nimport { TSelections, TSelectionTypes } from 'types/selections'\r\nimport { logIgnoredImport } from 'utils/analytics'\r\n\r\n/**\r\n * Remove side effects (such as spells, artifacts, etc) from our imported selections\r\n * @param selections\r\n * @param Army\r\n * @param parser\r\n */\r\nexport const removeSideEffectsFromImport = (\r\n  selections: TSelections,\r\n  Army: IArmy,\r\n  parser: TImportParsers\r\n): TSelections => {\r\n  Object.keys(selections).forEach(slice => {\r\n    let _slice = slice as TSelectionTypes\r\n    // Store the previous state of our selections\r\n    const previous: string[] = [...selections[_slice]]\r\n\r\n    // Get an array of effect names that are side effects from the Army\r\n    const SideEffects = Army[lowerToUpperLookup[_slice]].filter(x => x.isSideEffect).map(x => x.name)\r\n\r\n    // Update our _slice of selections to NOT include any side effects\r\n    selections[_slice] = difference(previous, SideEffects)\r\n\r\n    // And then get a list of ignored side effects and send them to GA\r\n    const removed = difference(previous, selections[_slice])\r\n    removed.forEach(s => logIgnoredImport(s, parser))\r\n  })\r\n\r\n  return selections\r\n}\r\n","import { uniq } from 'lodash'\r\nimport { IArmy } from 'types/army'\r\nimport { lowerToUpperLookup } from 'types/data'\r\nimport { TSelections, TSelectionTypes } from 'types/selections'\r\nimport { isDev } from 'utils/env'\r\nimport { getSideEffects } from 'utils/getSideEffects'\r\nimport { ISideEffectsPayload } from 'utils/withSelect'\r\n\r\n/**\r\n * Add side effects (such as spells, artifacts, etc) to our imported selections\r\n * @param selections\r\n * @param Army\r\n */\r\nexport const addSideEffectsToImport = (selections: TSelections, Army: IArmy): TSelections => {\r\n  // Handle subfaction side effects\r\n  const subFactionSideEffects = getSideEffects([Army.SubFaction])\r\n\r\n  Object.entries(subFactionSideEffects[Army.SubFaction.name]).forEach(([slice, obj]) => {\r\n    if (!selections[slice]) {\r\n      if (isDev) {\r\n        console.warn(\r\n          `Invalid side effect key: '${slice}'. It probably is a typo in this subfaction's files: \"${Army.SubFaction.name}\"`\r\n        )\r\n        debugger // If you've arrived here (as a dev), you need to fix the above error - no excuses.\r\n      }\r\n      return // Ignore bad values\r\n    }\r\n    if (!obj?.values) return\r\n    selections[slice] = uniq(selections[slice].concat(obj.values))\r\n  })\r\n\r\n  // Handle selection side effects\r\n  const selectionSideEffects = Object.entries(lowerToUpperLookup).reduce((a, [k, v]) => {\r\n    a[k] = getSideEffects(Army[v])\r\n    return a\r\n  }, {} as Record<TSelectionTypes, ISideEffectsPayload>)\r\n\r\n  Object.keys(selectionSideEffects).forEach(slice => {\r\n    const effectsObj = selectionSideEffects[slice as TSelectionTypes]\r\n\r\n    selections[slice].forEach((name: string) => {\r\n      if (!effectsObj[name]) return\r\n\r\n      Object.keys(effectsObj[name]).forEach(effectSlice => {\r\n        const values: string[] = effectsObj[name]?.[effectSlice]?.values || []\r\n\r\n        if (!selections[effectSlice]) {\r\n          if (isDev) {\r\n            console.warn(\r\n              `Invalid side effect key: '${effectSlice}'. It probably is a typo in this subfaction's files: \"${Army.SubFaction.name}\"`\r\n            )\r\n            debugger // If you've arrived here (as a dev), you need to fix the above error - no excuses.\r\n          }\r\n          return // Ignore bad values\r\n        }\r\n\r\n        selections[effectSlice] = uniq(selections[effectSlice].concat(values))\r\n      })\r\n    })\r\n  })\r\n\r\n  return selections\r\n}\r\n","import { KharadronOverlordsFaction } from 'factions/kharadron_overlords'\r\nimport { uniq } from 'lodash'\r\nimport { SLAANESH, TSupportedFaction } from 'meta/factions'\r\nimport { getFactionFromList } from 'meta/faction_list'\r\nimport { AZYR, IImportedArmy } from 'types/import'\r\nimport { RealmscapesEnum } from 'types/realmscapes'\r\nimport { TSelections, TSelectionTypes } from 'types/selections'\r\nimport { isValidFactionName } from 'utils/armyUtils'\r\nimport { importErrorChecker } from 'utils/import'\r\nimport { isPoorlySpacedMatch } from 'utils/import/isPoorlySpacedMatch'\r\nimport { factionToFlavorMap, importFactionNameMap } from 'utils/import/options'\r\nimport { titleCase } from 'utils/textUtils'\r\nimport { lowerToUpperLookup } from 'types/data'\r\n\r\nexport const getAzyrArmyFromPdf = (pdfText: string[]): IImportedArmy => {\r\n  const army = getInitialAzyrArmy(pdfText)\r\n  const errorChecked = importErrorChecker(army, AZYR)\r\n  return errorChecked\r\n}\r\n\r\nconst selectorLookup: Record<string, TSelectionTypes> = {\r\n  'COMMAND TRAIT': 'command_traits',\r\n  'ENDLESS SPELL': 'endless_spells',\r\n  'MOUNT TRAIT': 'mount_traits',\r\n  ALLEGIANCE: 'flavors',\r\n  ARTEFACT: 'artifacts',\r\n  BATTALION: 'battalions',\r\n  PRAYER: 'prayers',\r\n  SCENERY: 'scenery',\r\n  SPELL: 'spells',\r\n  UNIT: 'units',\r\n}\r\n\r\nconst getInitialAzyrArmy = (pages: string[]): IImportedArmy => {\r\n  let factionName = ''\r\n  let subFactionName = ''\r\n  let realmscape: RealmscapesEnum | null = null\r\n  let allyUnits: string[] = []\r\n  let unknownSelections: string[] = []\r\n\r\n  const initialSelections = Object.keys(lowerToUpperLookup).reduce((a, key) => {\r\n    a[key] = []\r\n    return a\r\n  }, {} as TSelections)\r\n\r\n  const selections = pages.reduce((accum, name) => {\r\n    if (name.startsWith('FACTION:')) {\r\n      const lookup = getFactionName(name)\r\n      if (lookup.factionName) factionName = lookup.factionName\r\n      if (lookup.subFactionName) subFactionName = lookup.subFactionName\r\n      if (lookup.flavor) accum.flavors = accum.flavors.concat(lookup.flavor)\r\n      return accum\r\n    }\r\n\r\n    if (name.startsWith('General\\' Handbook:')) {\r\n      realmscape = titleCase(name.replace('General\\' Handbook: ', '')) as RealmscapesEnum\r\n      return accum\r\n    }\r\n\r\n    if (name.startsWith('ALLY:') || name.startsWith('MERCENARY COMPANY:')) {\r\n      name = name.replace(/(MERCENARY COMPANY|ALLY): /g, '')\r\n      allyUnits.push(name)\r\n      return accum\r\n    }\r\n\r\n    if (name.startsWith('WEAPON:')) {\r\n      name = name.replace('WEAPON: ', '')\r\n      unknownSelections.push(name)\r\n      return accum\r\n    }\r\n\r\n    if (name.startsWith('UPGRADE:')) {\r\n      name = name.replace('UPGRADE: ', '')\r\n      unknownSelections.push(name)\r\n      return accum\r\n    }\r\n\r\n    // Special KO case for footnotes\r\n    if (name.startsWith('Kharadron Code:')) {\r\n      const footnotes = handleKOTraits(name)\r\n      accum.command_traits = accum.command_traits.concat(footnotes)\r\n      return accum\r\n    }\r\n\r\n    // Flavor/Subfaction checker\r\n    if (name.startsWith('ALLEGIANCE:') && isValidFactionName(factionName)) {\r\n      let txt = name.replace('ALLEGIANCE:', '').trim()\r\n\r\n      // Need to do something faction-specific to the value? Do it here.\r\n      // if (factionName === SOME_FACTION) txt = txt.replace('something', '')\r\n\r\n      // Add Host suffix when needed\r\n      if (factionName === SLAANESH && !txt.endsWith(' Host')) txt = `${txt} Host`\r\n\r\n      const _Faction = getFactionFromList(factionName)\r\n      if (_Faction.subFactionKeyMap[txt]) {\r\n        // If we can match this subfaction, do it!\r\n        subFactionName = txt\r\n        return accum\r\n      } else {\r\n        // Otherwise, add to flavors instead\r\n        accum.flavors.push(name.replace('ALLEGIANCE:', '').trim())\r\n      }\r\n    }\r\n\r\n    let found = false\r\n\r\n    // Check all other types\r\n    Object.entries(selectorLookup).forEach(([_prefix, _slice]) => {\r\n      if (found) return\r\n      if (name.startsWith(`${_prefix}:`)) {\r\n        name = name.replace(`${_prefix}: `, '')\r\n        accum[_slice] = accum[_slice].concat(name)\r\n        found = true\r\n        return accum\r\n      }\r\n    })\r\n\r\n    return accum\r\n  }, initialSelections)\r\n\r\n  return {\r\n    allyFactionNames: [],\r\n    allySelections: {},\r\n    allyUnits: uniq(allyUnits),\r\n    errors: [],\r\n    factionName: factionName as TSupportedFaction,\r\n    subFactionName,\r\n    origin_realm: null,\r\n    realmscape_feature: null,\r\n    realmscape,\r\n    selections,\r\n    unknownSelections,\r\n  }\r\n}\r\n\r\nconst getFactionName = (\r\n  val: string\r\n): { factionName: string | null; subFactionName: string | null; flavor: string | null } => {\r\n  const name = val.replace('FACTION: ', '').trim()\r\n  const lookup = importFactionNameMap[name]\r\n  const factionName = lookup?.factionName || null\r\n  const subFactionName = lookup?.subFactionName || null\r\n  if (!factionName) console.error('ALERT: Missing this faction: ' + name)\r\n  const flavor = factionName ? factionToFlavorMap[name] : null\r\n  return { factionName, subFactionName, flavor }\r\n}\r\n\r\nconst handleKOTraits = (name: string): string[] => {\r\n  const traits = getKOTraits()\r\n  const possiblePrefix = ['ARTYCLE', 'FOOTNOTE', 'AMENDMENT']\r\n  const footnotes = name\r\n    .replace('Kharadron Code: ', '')\r\n    .split(';')\r\n    .map(x => x.trim())\r\n\r\n  if (footnotes.length === 1) {\r\n    // Handle a dumb case where Azyr has just split the codes by commas, not colons\r\n    // Why are they inconsistent, and only for some codes? God only knows\r\n    const footnotesUpper = footnotes[0].toUpperCase()\r\n    const regEx = new RegExp(`(${possiblePrefix.join('|')}): `, 'gi')\r\n    const trimmedTraits = traits.map(x => x.replace(regEx, '').toUpperCase())\r\n    return trimmedTraits.reduce((a, trait, i) => {\r\n      if (footnotesUpper.includes(trait)) {\r\n        a.push(traits[i])\r\n      }\r\n      return a\r\n    }, [] as string[])\r\n  }\r\n\r\n  return footnotes.map(note => {\r\n    let result = ''\r\n    const valUpper = note.toUpperCase()\r\n    traits.forEach(trait => {\r\n      if (!!result) return\r\n      possiblePrefix.forEach(pre => {\r\n        if (!!result) return\r\n        if (isPoorlySpacedMatch(`${pre}: ${valUpper}`, trait.toUpperCase())) {\r\n          result = trait\r\n        }\r\n      })\r\n    })\r\n\r\n    return result || note\r\n  })\r\n}\r\n\r\nconst getKOTraits = (): string[] => {\r\n  const prefix = ['ARTYCLE', 'FOOTNOTE', 'AMENDMENT']\r\n\r\n  const command_traits = KharadronOverlordsFaction.AggregateArmy.CommandTraits.filter(x =>\r\n    prefix.some(pre => x.name.startsWith(pre))\r\n  ).map(x => x.name)\r\n\r\n  const flavorTraits = KharadronOverlordsFaction.AggregateArmy.Flavors.map(a => {\r\n    return a.effects.filter(e => prefix.some(pre => e.name.startsWith(pre))).map(e => e.name)\r\n  }).flat()\r\n  return uniq(command_traits.concat(flavorTraits))\r\n}\r\n","import { IArmy } from 'types/army'\r\n\r\nexport const cleanText = (txt: string) => {\r\n  return (\r\n    txt\r\n      .replace(/(.+)\\\\n {1,}(.+)/g, `$1 $2`)\r\n      .replace(/\\r|\\n|\\v|\\f|‚Üµ/g, ' ')\r\n      .replace(/ {2,}/g, ' ')\r\n      .replace(/\\*/g, '') // Remove asteriks\r\n      .replace(/[‚Äò‚Äô]/g, `'`) // Replace special apostrophes\r\n      .replace(/[‚Äú‚Äù]/g, `\"`) // Replace special quotes\r\n      .replace(/[‚Äë‚Äì‚Äî]/g, `-`) // Replace special dashes\r\n      .replace(/¬†/g, ` `) // Remove non ASCII-spaces\r\n      // eslint-disable-next-line no-control-regex\r\n      .replace(/[^\\x00-\\x7F]/g, '') // Remove all other non-ASCII characters\r\n      .trim()\r\n  )\r\n}\r\nexport const ignoredValues = [\r\n  'Allegiance: The Ossiarch Empire',\r\n  'Allegiance',\r\n  'Alliegiance', // lol\r\n  'Battle Tactics',\r\n  'Coalition',\r\n  'Damage Table',\r\n  'Extra Command Point',\r\n  'Game Type',\r\n  'Grand Strategy',\r\n  'Points Variation',\r\n  'Purchased Command Points',\r\n  'Realm of Battle',\r\n  'Realm of Origin',\r\n]\r\n\r\nexport const fixKeys = (obj: Record<string, string[]>) => {\r\n  const lookup: Record<string, Partial<keyof IArmy> | 'Weapons'> = {\r\n    'Command Abilities': 'CommandAbilities',\r\n    'Grand Strategy': 'GrandStrategies',\r\n    'The Kharadron Code': 'CommandTraits',\r\n    Artefact: 'Artifacts',\r\n    Prayer: 'Prayers',\r\n    Spell: 'Spells',\r\n    Weapon: 'Weapons',\r\n  }\r\n\r\n  return Object.keys(obj).reduce((a, key) => {\r\n    if (ignoredValues.includes(key)) return a\r\n\r\n    if (lookup[key]) {\r\n      a[lookup[key]] = obj[key]\r\n    } else {\r\n      a[key] = obj[key]\r\n    }\r\n    return a\r\n  }, {} as Record<string, string[]>)\r\n}\r\n","import { IChildNode, IParentNode } from 'utils/battlescribe/getBattlescribeArmy'\r\n\r\nexport const isParentNode = (node: any): node is IParentNode => !!node && 'childNodes' in node\r\nexport const isChildNode = (node: any): node is IChildNode => !!node && 'value' in node\r\n\r\nexport const isFactionObj = (obj: IParentNode | IChildNode): obj is IParentNode => {\r\n  if (isChildNode(obj)) return false\r\n  return obj.nodeName === 'li' && obj.attrs && obj.attrs[0] && obj.attrs[0].value === 'force'\r\n}\r\n\r\nexport const isRootSelection = (obj: IParentNode | IChildNode): obj is IParentNode => {\r\n  if (isChildNode(obj)) return false\r\n  return obj.nodeName === 'li' && obj.attrs && obj.attrs[0] && obj.attrs[0].value === 'rootselection'\r\n}\r\n\r\nexport const isBattleRealmObj = (obj: IParentNode | IChildNode): obj is IParentNode => {\r\n  if (isChildNode(obj)) return false\r\n  if (!isRootSelection(obj)) return false\r\n  if (!obj.childNodes.length) return false\r\n  const subObj = obj.childNodes.find(x => {\r\n    return (\r\n      isParentNode(x) &&\r\n      x.nodeName === 'h4' &&\r\n      isChildNode(x.childNodes[0]) &&\r\n      x.childNodes[0].value === 'Realm of Battle'\r\n    )\r\n  })\r\n  return !!subObj\r\n}\r\n\r\nexport const isOriginRealmObj = (obj: IParentNode | IChildNode): obj is IParentNode => {\r\n  if (isChildNode(obj)) return false\r\n  if (!isRootSelection(obj)) return false\r\n  if (!obj.childNodes.length) return false\r\n  const subObj = obj.childNodes.find(x => {\r\n    return (\r\n      isParentNode(x) &&\r\n      x.nodeName === 'h4' &&\r\n      isChildNode(x.childNodes[0]) &&\r\n      x.childNodes[0].value === 'Realm of Origin'\r\n    )\r\n  })\r\n  return !!subObj\r\n}\r\n\r\nexport const isAllegianceObj = (obj: IParentNode | IChildNode): obj is IParentNode => {\r\n  if (isChildNode(obj)) return false\r\n  if (!isRootSelection(obj)) return false\r\n  if (!obj.childNodes.length) return false\r\n\r\n  // Seraphon hotfix\r\n  if (\r\n    // @ts-expect-error\r\n    obj?.childNodes?.[2]?.childNodes?.[0]?.childNodes?.[0]?.childNodes?.[0]?.value === 'Allegiance: Seraphon'\r\n  ) {\r\n    return true\r\n  }\r\n\r\n  const subObj = obj.childNodes.find(x => {\r\n    return (\r\n      isParentNode(x) &&\r\n      (x.nodeName === 'h4' || x.nodeName === 'li') &&\r\n      isChildNode(x.childNodes[0]) &&\r\n      (x.childNodes[0].value === 'Allegiance' ||\r\n        x.childNodes[0].value === 'Alliegiance' ||\r\n        x.childNodes[0].value.startsWith('Allegiance:'))\r\n    )\r\n  })\r\n  return !!subObj\r\n}\r\n","import parse5 from 'parse5'\r\nimport { RealmscapesEnum } from 'types/realmscapes'\r\nimport { cleanText, fixKeys } from 'utils/battlescribe/battlescribeUtils'\r\nimport {\r\n  isAllegianceObj,\r\n  isBattleRealmObj,\r\n  isChildNode,\r\n  isFactionObj,\r\n  isOriginRealmObj,\r\n  isParentNode,\r\n  isRootSelection,\r\n} from 'utils/battlescribe/checks'\r\nimport { IChildNode, IFactionInfo, IFlavorInfo, IParentNode } from 'utils/battlescribe/getBattlescribeArmy'\r\nimport {\r\n  parseAllegiance,\r\n  parseBattleRealmObj,\r\n  parseFaction,\r\n  parseOriginRealmObj,\r\n} from 'utils/battlescribe/getters'\r\n\r\ntype TTraverseDoc = (docObj: IParentNode | IChildNode) => {\r\n  allegianceInfo: IFlavorInfo[]\r\n  factionInfo: IFactionInfo\r\n  origin_realm: RealmscapesEnum | null\r\n  realmscape: RealmscapesEnum | null\r\n  rootSelections: IParentNode[]\r\n}\r\n\r\nexport const traverseDoc: TTraverseDoc = docObj => {\r\n  const results = {\r\n    allegianceInfo: [] as IFlavorInfo[],\r\n    factionInfo: { factionName: null, grandAlliance: null } as IFactionInfo,\r\n    origin_realm: null as RealmscapesEnum | null,\r\n    realmscape: null as RealmscapesEnum | null,\r\n    rootSelections: [] as IParentNode[],\r\n  }\r\n\r\n  const traverse = (obj: IParentNode | IChildNode) => {\r\n    if (!isParentNode(obj)) return\r\n\r\n    if (isRootSelection(obj)) {\r\n      results.rootSelections.push(obj)\r\n    }\r\n\r\n    if (!results.realmscape && isBattleRealmObj(obj)) {\r\n      results.realmscape = parseBattleRealmObj(obj)\r\n    }\r\n\r\n    if (!results.origin_realm && isOriginRealmObj(obj)) {\r\n      results.origin_realm = parseOriginRealmObj(obj)\r\n    }\r\n\r\n    if (!results.factionInfo.factionName && isFactionObj(obj)) {\r\n      results.factionInfo = parseFaction(obj)\r\n    }\r\n\r\n    if (isAllegianceObj(obj)) {\r\n      results.allegianceInfo.push(parseAllegiance(obj))\r\n    }\r\n\r\n    if (obj.childNodes.length > 0) {\r\n      obj.childNodes.forEach(traverse)\r\n    }\r\n  }\r\n\r\n  traverse(docObj)\r\n\r\n  return results\r\n}\r\n\r\nconst isUncategorizedScenery = (obj: IParentNode, name: string) => {\r\n  // Some Scenery is not even given the Scenery tag...\r\n  // So we have to keep a manual list here\r\n  const knownScenery = ['Skull Altar', 'Bad Moon Loonshrine', 'Great Mawpot', 'Bone-Tithe Nexus']\r\n\r\n  try {\r\n    if (name.startsWith(`Scenery: `)) return false // It's categorized properly already\r\n    if (knownScenery.includes(name)) return true\r\n    //@ts-ignore\r\n    if (obj.childNodes[1].childNodes[1].childNodes[0].value.includes('SCENERY')) {\r\n      return true\r\n    }\r\n    return false\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\ninterface IParsedRootSelection {\r\n  name: string\r\n  entries: {\r\n    [key: string]: string[]\r\n  }\r\n}\r\n\r\nexport const parseRootSelection = (obj: IParentNode): IParsedRootSelection => {\r\n  try {\r\n    const { childNodes = [] } = obj\r\n    const h4Node = childNodes.find(x => x.nodeName === 'h4')\r\n\r\n    if (!isParentNode(h4Node) || !h4Node.childNodes.length || !isChildNode(h4Node.childNodes[0])) {\r\n      throw new Error('Could not find the item name')\r\n    }\r\n\r\n    let name = h4Node.childNodes[0].value.replace(/(.+)\\[.+\\]/g, '$1').trim()\r\n\r\n    // Handle custom character names like Funggar Longfinger - Fungoid Cave-Shaman\r\n    if (name.includes(' - ')) {\r\n      name = name.split(' - ')[1]\r\n    }\r\n\r\n    // Add Scenery tag to uncategorised entries\r\n    if (isUncategorizedScenery(obj, name)) {\r\n      name = `Scenery: ${name}`\r\n    }\r\n\r\n    const tableEntries = childNodes.reduce((a, x) => {\r\n      // New in 2021 (AoS3)\r\n      if (name === 'Grand Strategy' && x.nodeName === 'p') {\r\n        // @ts-expect-error\r\n        const potentialGrandStrategy = x?.childNodes?.[1]?.value\r\n        if (potentialGrandStrategy) name = `Grand Strategy: ${potentialGrandStrategy}`\r\n      }\r\n\r\n      // New in 2021 (AoS3)\r\n      if (name === 'Triumphs' && x.nodeName === 'p') {\r\n        // @ts-expect-error\r\n        const potentialGrandStrategy = x?.childNodes?.[1]?.value\r\n        if (potentialGrandStrategy) name = `Triumphs: ${potentialGrandStrategy}`\r\n      }\r\n\r\n      // Catch-all for units and battalions and everything else\r\n      if (isParentNode(x) && x.nodeName === 'table') {\r\n        const { tableName, names } = getNamesFromTableTags(x)\r\n        if (tableName) a[tableName] = names\r\n      }\r\n      return a\r\n    }, {} as { [key: string]: string[] })\r\n\r\n    const entries = fixKeys(tableEntries)\r\n\r\n    return { name, entries }\r\n  } catch (err) {\r\n    console.log('There was an error parsing a root selection')\r\n    console.error(err)\r\n    return { name: '', entries: {} }\r\n  }\r\n}\r\n\r\nconst getNamesFromTableTags = (table: IParentNode): { tableName: string; names: string[] } => {\r\n  try {\r\n    // @ts-expect-error\r\n    const tableName: string = table.childNodes[0].childNodes[0].childNodes[0].childNodes[0].value\r\n    // @ts-expect-error\r\n    const tds = table.childNodes[0].childNodes.slice(1).map(x => x.childNodes[0]) as IParentNode[]\r\n    const names: string[] = tds.map(x => (x.childNodes[0] as IChildNode).value).flat()\r\n    return { tableName, names }\r\n  } catch (err) {\r\n    return { tableName: '', names: [] }\r\n  }\r\n}\r\n\r\n/**\r\n * Helps us get the JSON string (removes circular references)\r\n */\r\nexport const stripParentNode = (\r\n  docObj: IParentNode | IChildNode | parse5.Document\r\n): IParentNode | IChildNode => {\r\n  if (isChildNode(docObj) && docObj.value) {\r\n    docObj.value = cleanText(docObj.value)\r\n  }\r\n  //@ts-ignore\r\n  delete docObj.parentNode // Get rid of circular references\r\n  //@ts-ignore\r\n  delete docObj.namespaceURI // Unnecessary key\r\n  //@ts-ignore\r\n  delete docObj.tagName // Unnecessary key (duplicates nodeName)\r\n\r\n  if (!isParentNode(docObj)) return docObj as IChildNode\r\n\r\n  if (docObj.childNodes.length > 0) {\r\n    docObj.childNodes = docObj.childNodes\r\n      .map(stripParentNode)\r\n      .map(x => {\r\n        if (isChildNode(x)) {\r\n          x.value = cleanText(x.value)\r\n        }\r\n        return x\r\n      })\r\n      .filter(x => {\r\n        if (isChildNode(x)) {\r\n          const trimmedVal = cleanText(x.value)\r\n          if (trimmedVal === '') return false\r\n          if (trimmedVal === '\\n') return false\r\n          if (trimmedVal === '\\n\\n') return false\r\n        }\r\n        return true\r\n      })\r\n  }\r\n\r\n  return docObj\r\n}\r\n\r\nexport const partialSearchDoc = (docObj: IParentNode, searchString: string) => {\r\n  let result: string = ''\r\n\r\n  const traverse = (obj: IParentNode | IChildNode) => {\r\n    if (result) return\r\n    if (isChildNode(obj) && obj.value.startsWith(searchString)) {\r\n      result = obj.value\r\n      return\r\n    }\r\n    if (!isParentNode(obj)) return\r\n\r\n    if (obj.childNodes.length > 0) {\r\n      obj.childNodes.forEach(traverse)\r\n    }\r\n  }\r\n\r\n  traverse(docObj)\r\n\r\n  return result\r\n}\r\n","import { LegionsOfNagashFaction } from 'factions/legions_of_nagash'\r\nimport { uniq, without } from 'lodash'\r\nimport {\r\n  LEGIONS_OF_NAGASH,\r\n  LUMINETH_REALMLORDS,\r\n  SERAPHON,\r\n  SUPPORTED_FACTIONS,\r\n  TPrimaryFactions,\r\n  TSupportedFaction,\r\n} from 'meta/factions'\r\nimport { getFactionFromList } from 'meta/faction_list'\r\nimport { RealmscapesEnum } from 'types/realmscapes'\r\nimport { TSelections } from 'types/selections'\r\nimport { isValidFactionName } from 'utils/armyUtils'\r\nimport { cleanText, fixKeys, ignoredValues } from 'utils/battlescribe/battlescribeUtils'\r\nimport { isChildNode, isParentNode } from 'utils/battlescribe/checks'\r\nimport {\r\n  IChildNode,\r\n  IFactionInfo,\r\n  IFlavorInfo,\r\n  IParentNode,\r\n  IParsedRoot,\r\n} from 'utils/battlescribe/getBattlescribeArmy'\r\nimport { partialSearchDoc, stripParentNode } from 'utils/battlescribe/parseHTML'\r\nimport { importFactionNameMap } from 'utils/import/options'\r\nimport { titleCase } from 'utils/textUtils'\r\nimport { lowerToUpperLookup } from 'types/data'\r\n\r\ntype TFactionsAndFlavors = {\r\n  factionName: TSupportedFaction | null\r\n  flavors: string[]\r\n  subFactionName: string | null\r\n}\r\n\r\nexport const getFactionAndFlavors = (\r\n  flavorInfo: IFlavorInfo[],\r\n  factionInfo: IFactionInfo\r\n): TFactionsAndFlavors => {\r\n  const store: TFactionsAndFlavors = {\r\n    factionName: isValidFactionName(factionInfo.factionName) ? factionInfo.factionName : null,\r\n    subFactionName: null,\r\n    flavors: [],\r\n  }\r\n\r\n  flavorInfo.forEach(info => {\r\n    if (!store.factionName) {\r\n      info.flavors?.forEach(name => {\r\n        const y: TPrimaryFactions | string | undefined = isValidFactionName(name)\r\n          ? name\r\n          : importFactionNameMap[name]?.factionName\r\n        if (!store.factionName && isValidFactionName(y)) {\r\n          store.factionName = y\r\n        }\r\n      })\r\n    }\r\n\r\n    const mappedFaction = isValidFactionName(info.factionName)\r\n      ? info.factionName\r\n      : importFactionNameMap[info.factionName || '']?.factionName\r\n\r\n    if (!store.factionName && isValidFactionName(mappedFaction)) {\r\n      store.factionName = mappedFaction\r\n    }\r\n\r\n    if (info.flavors) {\r\n      store.flavors = store.flavors.concat(info.flavors)\r\n    }\r\n\r\n    if (info.subFactionName) store.subFactionName = info.subFactionName\r\n  })\r\n\r\n  const factionName = store.factionName || (factionInfo.factionName as TSupportedFaction)\r\n\r\n  const possibleNameCollisions = Object.keys(importFactionNameMap).filter(\r\n    k => importFactionNameMap[k]?.factionName === factionName\r\n  )\r\n\r\n  // We want to ensure we're not duplicating the faction inside of flavors.\r\n  const fixedFlavors = without(uniq(store.flavors), factionName, ...possibleNameCollisions)\r\n\r\n  let subFactionName = store.subFactionName || factionInfo.subFactionName || ''\r\n  if (isValidFactionName(factionName) && !subFactionName) {\r\n    const _Faction = getFactionFromList(factionName)\r\n    const _subFactionName = store.flavors.find(x => !!_Faction.subFactionKeyMap[x])\r\n    if (_subFactionName) subFactionName = _subFactionName\r\n  }\r\n\r\n  return {\r\n    factionName,\r\n    subFactionName,\r\n    flavors: without(fixedFlavors, subFactionName),\r\n  }\r\n}\r\n\r\nexport const parseBattleRealmObj = (obj: IParentNode): RealmscapesEnum | null => {\r\n  try {\r\n    //@ts-ignore\r\n    const text = obj.childNodes[1].childNodes[1].value\r\n    return text.split(': ')[1].trim() as RealmscapesEnum\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport const parseOriginRealmObj = (obj: IParentNode): RealmscapesEnum | null => {\r\n  try {\r\n    //@ts-ignore\r\n    const text = obj.childNodes[1].childNodes[1].value\r\n    return text.split(': ')[1].trim() as RealmscapesEnum\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param obj\r\n */\r\nexport const parseFaction = (obj: IParentNode): IFactionInfo => {\r\n  try {\r\n    const factionNode = obj.childNodes.find(x => x.nodeName === 'h2')\r\n\r\n    // obj.childNodes[0].childNodes[0].value\r\n    // value === \"-Pitched Battle - Battlehost (2000pts) (Chaos - Disciples of Tzeentch)\"\r\n\r\n    if (!isParentNode(factionNode)) throw new Error('Could not find factionNode')\r\n    if (!isChildNode(factionNode.childNodes[0])) throw new Error('Not a child node')\r\n\r\n    const value = factionNode.childNodes[0].value\r\n\r\n    const factionValue = value\r\n      .replace('(Warscroll Compendium)', '')\r\n      .replace(/\\([\\d]{1,5}pts\\)/g, '')\r\n      .replace(/.+\\((.+)\\).+/g, '$1')\r\n\r\n    const sep = factionValue.includes(': ') ? ': ' : ' - '\r\n    let [grandAlliance, ...rest] = factionValue.split(sep).map(x => {\r\n      // Remove any stray parentheses\r\n      return x.replace(/(\\(|\\))/g, '').trim()\r\n    })\r\n\r\n    const last = rest[rest.length - 1]\r\n\r\n    const factionLookup = importFactionNameMap?.[last]\r\n    const factionName = factionLookup?.factionName || 'Unknown'\r\n    const subFactionName = factionLookup?.subFactionName || null\r\n\r\n    return { grandAlliance, factionName, subFactionName }\r\n  } catch (err) {\r\n    console.log('There was an error detecting the faction name')\r\n    console.error(err)\r\n    return { grandAlliance: null, factionName: null, subFactionName: null }\r\n  }\r\n}\r\n\r\nexport const parseAllegiance = (obj: IParentNode): IFlavorInfo => {\r\n  const flavorInfo: IFlavorInfo = { factionName: null, flavors: null, subFactionName: null }\r\n  try {\r\n    const strippedObj = stripParentNode(obj) as IParentNode\r\n    strippedObj.childNodes = strippedObj.childNodes.filter(x => isParentNode(x))\r\n    // If there is a node with the value of `Allegiance:`\r\n    // There is some advanced Battlescribe bullshittery going on\r\n    // And we need to parse it in a special manner\r\n    if (partialSearchDoc(obj, 'Allegiance:')) {\r\n      return getFlavorMetadata(obj)\r\n    }\r\n\r\n    // TODO: Switch to Table lookup\r\n    // Otherwise we can do a semi-normal lookup\r\n    const { childNodes = [] } = strippedObj\r\n\r\n    const isSelectionNode = (node: IParentNode | IChildNode) => {\r\n      return (\r\n        isParentNode(node) &&\r\n        node.nodeName === 'span' &&\r\n        node.childNodes.length &&\r\n        isChildNode(node.childNodes[0]) &&\r\n        node.childNodes[0].value === 'Selections:'\r\n      )\r\n    }\r\n\r\n    const nameObj = childNodes.find(x => {\r\n      if (\r\n        isParentNode(x) &&\r\n        x.nodeName === 'p' &&\r\n        x.childNodes.length &&\r\n        x.childNodes.some(isSelectionNode)\r\n      ) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    })\r\n\r\n    if (!nameObj || !isParentNode(nameObj)) {\r\n      let flavor = flavorCategoryLookup(childNodes)\r\n      flavorInfo.flavors = flavor ? [flavor] : null\r\n\r\n      if (!flavor) {\r\n        flavor = flavorSelectionLookup(childNodes)\r\n        flavorInfo.flavors = flavor ? [flavor] : null\r\n      }\r\n\r\n      const lookup = factionH4Lookup(childNodes)\r\n      flavorInfo.faction = lookup.factionName\r\n      if (lookup.subFactionName) flavorInfo.subFactionName = lookup.subFactionName\r\n\r\n      return flavorInfo\r\n    }\r\n\r\n    const selectionIdx = nameObj.childNodes.findIndex(isSelectionNode)\r\n\r\n    const objs = nameObj.childNodes.slice(selectionIdx + 1)\r\n\r\n    const potentialFactionName = objs\r\n      .reduce((a, b) => {\r\n        if (isParentNode(b)) return a\r\n        a = `${a} ${b.value}`\r\n        return a\r\n      }, '')\r\n      .trim()\r\n\r\n    const lookup = importFactionNameMap[potentialFactionName]\r\n    const factionName = lookup?.factionName || potentialFactionName\r\n    const subFactionName = lookup?.subFactionName || ''\r\n\r\n    return { ...flavorInfo, factionName, subFactionName }\r\n  } catch (err) {\r\n    return flavorInfo\r\n  }\r\n}\r\n\r\nconst factionH4Lookup = (\r\n  childNodes: Array<IParentNode | IChildNode>\r\n): { factionName: TSupportedFaction | null; subFactionName: string | null } => {\r\n  const emptyResponse = { factionName: null, subFactionName: null }\r\n  try {\r\n    // @ts-expect-error\r\n    const valNode = childNodes[2].childNodes[0].childNodes[0].childNodes[0]\r\n\r\n    // @ts-expect-error\r\n    if (childNodes[2].childNodes[0].childNodes[0].nodeName !== 'h4') return emptyResponse\r\n    if (valNode.nodeName !== '#text') return emptyResponse\r\n\r\n    const lookup = importFactionNameMap[cleanText(valNode.value)]\r\n    const factionName = lookup.factionName || null\r\n    const subFactionName = lookup.subFactionName || null\r\n\r\n    return {\r\n      factionName: isValidFactionName(factionName) ? factionName : null,\r\n      subFactionName,\r\n    }\r\n  } catch (err) {\r\n    return emptyResponse\r\n  }\r\n}\r\n\r\nconst flavorSelectionLookup = (childNodes: Array<IParentNode | IChildNode>) => {\r\n  const ignoredValues = [\r\n    'Cycle of Corruption, Summon Daemons of Nurgle',\r\n    'Cycle of Corruption',\r\n    'Light of the Bad Moon',\r\n  ]\r\n  try {\r\n    // Don't run if we have categories\r\n    // @ts-expect-error\r\n    if (childNodes[2].childNodes[0].childNodes[2].childNodes[0].childNodes[0].value === 'Categories:') {\r\n      return null\r\n    }\r\n    // @ts-expect-error\r\n    const mainNode = childNodes[2].childNodes[0].childNodes[1]\r\n    const spanNode = mainNode.childNodes[0]\r\n    // @ts-expect-error\r\n    const valNode = childNodes[2].childNodes[0].childNodes[1].childNodes[1]\r\n\r\n    if (mainNode.nodeName !== 'p') return null\r\n    if (spanNode.nodeName !== 'span') return null\r\n    if (spanNode.childNodes[0].value !== 'Selections:') return null\r\n    if (!isChildNode(valNode) || valNode.nodeName !== '#text') return null\r\n\r\n    const value = cleanText(valNode.value)\r\n      .replace('Cycle of Corruption, ', '')\r\n      .replace('Summon Daemons of Nurgle', '')\r\n      .trim()\r\n\r\n    return ignoredValues.includes(value) || !value ? null : value\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Handles weird formatting issues with armies like Idoneth Deepkin\r\n * @param childNodes\r\n */\r\nconst flavorCategoryLookup = (childNodes: Array<IParentNode | IChildNode>): string | null => {\r\n  try {\r\n    //@ts-ignore\r\n    if (childNodes[2].childNodes[0].childNodes[2].childNodes[0].childNodes[0].value !== 'Categories:') {\r\n      return null\r\n    }\r\n\r\n    //@ts-ignore\r\n    const value = childNodes[2].childNodes[0].childNodes[2].childNodes[1].childNodes[0].value\r\n    const possibleFlavors: string[] = value\r\n      .split(', ')\r\n      .map(cleanText)\r\n      .filter((x: string) => {\r\n        return x !== 'SCENERY' && x !== 'GLOOMTIDE SHIPWRECK'\r\n      })\r\n    const faction = cleanText(possibleFlavors.shift() || '')\r\n      .split(' ')\r\n      .join('_')\r\n\r\n    if (isValidFactionName(faction) && possibleFlavors.length > 0) {\r\n      return possibleFlavors[0]\r\n    } else {\r\n      return null\r\n    }\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\nconst getFlavorMetadata = (obj: IParentNode): IFlavorInfo => {\r\n  const flavorInfo: IFlavorInfo = { factionName: null, subFactionName: null, flavors: null }\r\n\r\n  let liNode = obj\r\n\r\n  const ulNode = obj.childNodes.find(x => x.nodeName === 'ul') as IParentNode\r\n  if (ulNode) {\r\n    liNode = ulNode.childNodes.find(x => x.nodeName === 'li') as IParentNode\r\n  }\r\n\r\n  const pChildren = liNode.childNodes.filter(x => x.nodeName === 'p') as IParentNode[]\r\n\r\n  let className = ''\r\n  let key = ''\r\n  const entries = pChildren.reduce((accum, x) => {\r\n    x.childNodes.forEach(cNode => {\r\n      let val = ''\r\n\r\n      if (isParentNode(cNode)) {\r\n        if (cNode.attrs.length > 0) {\r\n          if (cNode.attrs[0].value === 'bold' && className !== 'bold') {\r\n            className = 'bold'\r\n            key = ''\r\n          } else if (cNode.attrs[0].value !== 'bold' && className !== 'not_bold') {\r\n            accum[key] = ''\r\n            className = 'not_bold'\r\n          }\r\n        }\r\n        val = cleanText((cNode.childNodes[0] as IChildNode).value)\r\n      } else if (isChildNode(cNode)) {\r\n        if (!accum[key]) accum[key] = ''\r\n        className = 'not_bold'\r\n        val = cleanText(cNode.value)\r\n      }\r\n\r\n      if (className === 'bold') {\r\n        key = cleanText(`${key} ${val}`).replace(/:$/g, '')\r\n      } else {\r\n        accum[key] = cleanText(`${accum[key]} ${val}`)\r\n      }\r\n    })\r\n\r\n    return accum\r\n  }, {} as Record<string, string>)\r\n\r\n  const liEntries = Object.keys(entries).reduce((a, key) => {\r\n    const val = entries[key]\r\n      .replace(/^Allegiance: /g, '') // Remove leading Allegiance indicator for subfactions\r\n      .replace(/^Awakened Wyldwood(,)?/g, '') // Remove random Sylvaneth Wyldwood entry\r\n      .replace(/(, )?Ur-Gold(,)?/g, '') // Remove Ur-Gold (not an allegiance)\r\n      .replace(/ {1,},$/g, '') // remove trailing comma\r\n      .trim()\r\n    a[key] = val\r\n    return a\r\n  }, {} as Record<string, string>)\r\n\r\n  const tableTags = obj.childNodes.filter(x => isParentNode(x) && x.nodeName === 'table') as IParentNode[]\r\n\r\n  const tableTraits = tableTags.reduce((a, table) => {\r\n    // @ts-expect-error\r\n    const tableName = table.childNodes[0].childNodes[0].childNodes[0].childNodes[0].value\r\n    // @ts-expect-error\r\n    const tds = table.childNodes[0].childNodes.slice(1).map(x => x.childNodes[0])\r\n    const names = tds.map(x => x.childNodes[0].value).flat()\r\n    a[tableName] = names\r\n    return a\r\n  }, {} as Record<string, string[] | string>)\r\n\r\n  const mergedTraits = fixKeys(\r\n    Object.keys(liEntries).reduce((a, key) => {\r\n      if (tableTraits[key]) {\r\n        // Prefer table traits to li traits\r\n        a[key] = tableTraits[key]\r\n      } else {\r\n        a[key] = liEntries[key]\r\n      }\r\n      return a\r\n    }, {})\r\n  )\r\n\r\n  const fixedKeys = Object.keys(mergedTraits).reduce((a, key) => {\r\n    const val = mergedTraits[key]\r\n\r\n    // Ignore empty values\r\n    if (!val) return a\r\n\r\n    if (key === 'Selections' && typeof val === 'string') {\r\n      a.flavors = [stripAllegiancePrefix(val)]\r\n    } else if (key === 'Categories' && typeof val === 'string') {\r\n      a.factionName = val\r\n    } else {\r\n      a[key] = val\r\n    }\r\n    return a\r\n  }, flavorInfo)\r\n\r\n  // Soulblight hotfix\r\n  if (\r\n    // @ts-expect-error\r\n    obj?.childNodes[2]?.childNodes?.[0]?.childNodes?.[0]?.childNodes?.[0]?.value === 'Allegiance: Soulblight'\r\n  ) {\r\n    fixedKeys.factionName = LEGIONS_OF_NAGASH\r\n    fixedKeys.subFactionName = LegionsOfNagashFaction.subFactionKeyMap.Soulblight\r\n    fixedKeys.flavors = []\r\n  }\r\n\r\n  // Seraphon hotfix\r\n  // It's messy, sorry!\r\n  if (\r\n    // @ts-expect-error\r\n    ulNode?.childNodes?.[0]?.childNodes?.[0]?.childNodes?.[0]?.value === 'Allegiance: Seraphon'\r\n  ) {\r\n    const way =\r\n      // @ts-expect-error\r\n      obj?.childNodes?.[2]?.childNodes?.[0]?.childNodes[2]?.childNodes?.[0]?.childNodes?.[0]?.childNodes?.[0]\r\n        ?.value\r\n    const constellation =\r\n      // @ts-expect-error\r\n      ulNode?.childNodes?.[0]?.childNodes[2]?.childNodes?.[0]?.childNodes?.[1]?.childNodes?.[1]?.value\r\n        ?.replace('The ', '')\r\n        ?.replace(', Show Celestial Conjuration Table', '')\r\n        ?.replace('Show Celestial Conjuration Table', '')\r\n\r\n    if ((way || constellation) && !fixedKeys.flavors) fixedKeys.flavors = []\r\n    if (way) fixedKeys.subFactionName = way\r\n    if (constellation) fixedKeys.flavors?.push(constellation)\r\n    fixedKeys.factionName = SERAPHON\r\n  }\r\n\r\n  // Horrible Lumineth hotfix - 10/28/20\r\n  // @ts-expect-error\r\n  if (liNode?.childNodes?.[0]?.childNodes?.[0].value === 'Allegiance: Lumineth') {\r\n    // @ts-expect-error\r\n    const luminethAllegiance = liNode?.childNodes?.[2]?.childNodes?.[1]?.childNodes?.[0]?.value\r\n    if (\r\n      luminethAllegiance &&\r\n      getFactionFromList(LUMINETH_REALMLORDS)?.flavorKeys?.includes(luminethAllegiance)\r\n    ) {\r\n      fixedKeys.flavors = [luminethAllegiance]\r\n      fixedKeys.factionName = LUMINETH_REALMLORDS\r\n    }\r\n  }\r\n\r\n  return fixedKeys\r\n}\r\n\r\nconst stripAllegiancePrefix = (str: string) => str.replace(/(Legion: )/g, '')\r\n\r\nexport const sortParsedRoots = (roots: IParsedRoot[], flavorInfo: IFlavorInfo[]) => {\r\n  const Collection: TSelections = Object.keys(lowerToUpperLookup).reduce((a, key) => {\r\n    a[key] = []\r\n    return a\r\n  }, {} as TSelections)\r\n\r\n  roots.forEach(r => {\r\n    // Handle name first\r\n    if (ignoredValues.includes(r.name)) return\r\n\r\n    // We'll keep track of whether we've matched the current name to a category yet\r\n    // And if we need to do some additional parsing (we don't need to for Endless Spells)\r\n    let [has_matched, process_entries] = [false, true]\r\n\r\n    // If we have a battalion entry (and no helpful prefix) let's be sure to store it accordingly\r\n    if (isBattalion(r)) {\r\n      const val = cleanText(r.name)\r\n      Collection.battalions = uniq(Collection.battalions.concat(val))\r\n      has_matched = true\r\n    }\r\n\r\n    // Let's see if we can match this entry nicely to a certain category\r\n    if (!has_matched) {\r\n      Object.keys(prefixLookup).forEach(key => {\r\n        if (!has_matched && r.name.startsWith(`${key}:`)) {\r\n          const vals = r.name.split(`${key}:`)[1].split(',').map(cleanText)\r\n          Collection[prefixLookup[key]] = uniq(Collection[prefixLookup[key]].concat(vals))\r\n          has_matched = true\r\n          if (['Endless Spell', 'Bound Endless Spell'].includes(key)) {\r\n            process_entries = false\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    // Check for exact matches\r\n    if (!has_matched) {\r\n      const cleanedName = cleanText(r.name)\r\n      Object.keys(exactMatches).forEach(key => {\r\n        if (!has_matched && key === cleanedName) {\r\n          Collection[exactMatches[key]] = uniq(Collection[exactMatches[key]].concat([cleanedName]))\r\n          has_matched = true\r\n        }\r\n      })\r\n    }\r\n\r\n    // Put everything else in units\r\n    if (!has_matched) {\r\n      const val = cleanText(r.name)\r\n      const names = multiNameMap[val] || [val]\r\n      Collection.units = uniq(Collection.units.concat(names))\r\n    }\r\n\r\n    if (process_entries) {\r\n      // Now need to handle entries\r\n      Object.keys(r.entries).forEach(key => {\r\n        if (prefixLookup[key]) {\r\n          const vals = without(r.entries[key], ...ignoredNames)\r\n          Collection[prefixLookup[key]] = uniq(Collection[prefixLookup[key]].concat(vals))\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  flavorInfo.forEach(info => {\r\n    Object.keys(info).forEach(key => {\r\n      if (prefixLookup[key]) {\r\n        const vals = info[key]\r\n        if (vals) Collection[prefixLookup[key]] = uniq(Collection[prefixLookup[key]].concat(vals))\r\n      }\r\n    })\r\n  })\r\n\r\n  // Remove duplicates like \"Gors\" and \"Gor\" (leaves the pluralized version)\r\n  Collection.units.forEach(x => {\r\n    if (x.endsWith('s')) {\r\n      const singular = x.slice(0, -1)\r\n      Collection.units = without(Collection.units, singular)\r\n    }\r\n  })\r\n\r\n  return Collection\r\n}\r\n\r\nconst ignoredNames = [\r\n  'Coalition',\r\n  'Crew',\r\n  'Screaming Skull Catapult Crew',\r\n  'Show Celestial Conjuration Table',\r\n  'Summon Bleeding Icon',\r\n  'Summon Hexgorger Skulls',\r\n  'Summon Molten Infernoth',\r\n  'Summon Runic Fyrewall',\r\n  'Summon Umbral Spellportal',\r\n  'Summon Wrath-Axe',\r\n  'Summon Zharrgron Flame Splitter',\r\n  'Summoning',\r\n  'Ur-Gold',\r\n  \"Summon Ravenak's Gnashing Jaws\",\r\n] as const\r\n\r\n// Convert names of units that contain multiple unit types\r\nconst multiNameMap: Record<string, string[]> = {\r\n  'Duke Crakmarrow and the Grymwatch': ['Duke Crakmarrow', 'The Grymwatch'],\r\n}\r\n\r\n/**\r\n * If a value is prefixed with a certain string,\r\n * assign the value to a certain selection type\r\n */\r\nconst prefixLookup: Record<string, keyof TSelections> = {\r\n  'Battle Traits': 'command_traits',\r\n  'Bound Endless Spell': 'endless_spells',\r\n  'Command Abilities': 'command_abilities',\r\n  'Command Traits': 'command_traits',\r\n  'Core Battalion': 'battalions',\r\n  'Endless Spell': 'endless_spells',\r\n  'Grand Strategy': 'grand_strategies',\r\n  'Invocation of Khaine': 'endless_spells',\r\n  'Magmic Invocation': 'endless_spells',\r\n\r\n  // e.g. 'Orruk Warclans Core Battalion': 'battalions',\r\n  ...SUPPORTED_FACTIONS.reduce((accum, factionName) => {\r\n    accum[`${titleCase(factionName)} Core Battalion`] = 'battalions'\r\n    return accum\r\n  }, {}),\r\n  'Orruk Warclans Core Battalion': 'battalions',\r\n  'Slaves to Darkness Core Battalion': 'battalions',\r\n  'Sons of Behemat Core Battalion': 'battalions',\r\n  'Stormcast Core Battalion': 'battalions',\r\n  'Super Battalion': 'battalions',\r\n  Artifacts: 'artifacts',\r\n  Battalion: 'battalions',\r\n  Commands: 'command_abilities',\r\n  Enginecoven: 'battalions',\r\n  Judgement: 'endless_spells',\r\n  Prayers: 'prayers',\r\n  Scenery: 'scenery',\r\n  Spells: 'spells',\r\n  Traits: 'command_traits',\r\n  Triumphs: 'triumphs',\r\n  Unit: 'units',\r\n  Manifestations: `manifestations`,\r\n}\r\n\r\n/**\r\n * Names that if they are matched exactly,\r\n * should be placed in a certain selection type\r\n */\r\nconst exactMatches: Record<string, keyof TSelections> = {\r\n  'Charnel Throne': 'scenery',\r\n  'Feculent Gnarlmaw': 'scenery',\r\n  'Shrine Luminor': 'scenery',\r\n}\r\n\r\nconst isBattalion = (r: IParsedRoot): boolean => {\r\n  // Ignore units\r\n  if (r.entries['Unit']?.[0] === r.name) {\r\n    return false\r\n  }\r\n\r\n  // Do we have battalion abilities? And are our abilities unique?\r\n  if (!r.entries['Battalion Abilities'] || r.entries?.['Battalion Abilities']?.[0] === r.name) {\r\n    return false\r\n  }\r\n\r\n  // Are we missing a known prefix?\r\n  const startsWithPrefix = Object.keys(prefixLookup).some(x => r.name.startsWith(x))\r\n  return !startsWithPrefix\r\n}\r\n","import { TSupportedFaction } from 'meta/factions'\r\nimport parse5 from 'parse5'\r\nimport { BATTLESCRIBE, IImportedArmy } from 'types/import'\r\nimport { getFactionAndFlavors, sortParsedRoots } from 'utils/battlescribe/getters'\r\nimport { parseRootSelection, stripParentNode, traverseDoc } from 'utils/battlescribe/parseHTML'\r\nimport { importErrorChecker } from 'utils/import'\r\n\r\nexport const getBattlescribeArmy = (html_string: string) => {\r\n  const army = getInitialBattlescribeArmy(html_string)\r\n  const errorChecked = importErrorChecker(army, BATTLESCRIBE)\r\n\r\n  return errorChecked\r\n}\r\n\r\nconst getInitialBattlescribeArmy = (html_string: string): IImportedArmy => {\r\n  const document = parse5.parse(html_string)\r\n\r\n  const strippedDoc = stripParentNode(document)\r\n\r\n  const { allegianceInfo, factionInfo, realmscape, origin_realm, rootSelections } = traverseDoc(strippedDoc)\r\n  const { factionName, subFactionName, flavors } = getFactionAndFlavors(allegianceInfo, factionInfo)\r\n  const parsedRoots: IParsedRoot[] = rootSelections.map(parseRootSelection)\r\n  const selections = sortParsedRoots(parsedRoots, allegianceInfo)\r\n\r\n  return {\r\n    allyFactionNames: [],\r\n    allySelections: {},\r\n    allyUnits: [],\r\n    errors: [],\r\n    factionName: factionName as TSupportedFaction,\r\n    subFactionName: subFactionName || '', // TODO\r\n    origin_realm,\r\n    realmscape_feature: null,\r\n    realmscape,\r\n    selections: {\r\n      ...selections,\r\n      flavors,\r\n    },\r\n    unknownSelections: [],\r\n  }\r\n}\r\n\r\nexport interface IParsedRoot {\r\n  name: string\r\n  entries: {\r\n    [key: string]: string[]\r\n  }\r\n}\r\n\r\ninterface IAttrs {\r\n  name: string\r\n  value: string\r\n}\r\n\r\nexport interface IChildNode {\r\n  nodeName: string\r\n  value: string\r\n}\r\n\r\nexport interface IParentNode {\r\n  nodeName: string\r\n  attrs: IAttrs[]\r\n  childNodes: Array<IChildNode | IParentNode>\r\n}\r\n\r\nexport interface IFactionInfo {\r\n  grandAlliance: string | null\r\n  factionName: string | null\r\n  subFactionName: string | null\r\n}\r\n\r\nexport interface IFlavorInfo {\r\n  factionName: string | null\r\n  subFactionName: string | null\r\n  flavors: string[] | null\r\n  [key: string]: string | string[] | null\r\n}\r\n","export const cleanWarscrollText = (pdfText: string[]) => {\r\n  return pdfText\r\n    .map(\r\n      txt =>\r\n        txt\r\n          .replace(/\\\\\\(/g, '(') // Fix parentheses i.e. \"\\(value\\)\"\r\n          .replace(/\\\\\\)/g, ')') // Fix parentheses i.e. \"\\(value\\)\"\r\n          .replace(/^[0-9]{1,2}\"$/g, '') // Remove '12\"' entries\r\n          .replace(/^[0-9]{1,2}\"\\*$/g, '') // Remove '10\"*' entries\r\n          .replace(/^[0-9]{1,2}[D|d]6\"/g, '') // Remove '2D6\"' entries\r\n          .replace(/^[0-9]{1,2}\\*\\+/g, '') // Remove '3*+' entries\r\n    )\r\n    .filter(\r\n      txt =>\r\n        !!txt &&\r\n        txt.length > 2 &&\r\n        txt !== 'Warscroll Builder on www.warhammer-community.com' &&\r\n        txt !== '* See Warscroll'\r\n    )\r\n    .join('¬¨')\r\n    .replace(\r\n      /[^¬¨]*?\\([0-9]+\\)¬¨(?!(LEADERS|UNITS|ARTILLERY|BEHEMOTHS|WAR MACHINES|ENDLESS SPELLS & INVOCATIONS|ENDLESS SPELLS|CORE BATTALIONS|BATTALIONS|BATTLELINE|TOTAL|Spearhead|Main Body|Rearguard|Extra Command Point|-|[^¬¨]*?\\([0-9]+\\)))(.*?)¬¨/gi,\r\n      '$2¬¨'\r\n    ) // Remove custom unit names\r\n    .split('¬¨')\r\n    .map(txt =>\r\n      txt\r\n        .replace(/ \\([0-9]+\\)/g, '') // Remove point values e.g. \"Slann Starmaster (360)\"\r\n        .replace(/[0-9]+ x /g, '') // Remove quantity from units e.g. \"3 x Razordons\"\r\n        .replace(/ x [0-9]{1,3}( \\([0-9]{1,4}\\))?/g, '') // Remove quantity from units e.g. \"Knights of the Empty Throne Varanguard x 6 (560)\"\r\n        .replace(/\\*+$/g, '') // Remove asterik suffixes\r\n        .replace(/^\\*+/g, '') // Remove asterik prefixes e.g. \"**Bosses of the Stomp - Unified\"\r\n        .replace(/ - Single ?$/g, '') // Remove weird syntax for saying there's a single unit\r\n        .trim()\r\n    )\r\n}\r\n","import { SeraphonFaction } from 'factions/seraphon'\r\nimport { StormcastFaction } from 'factions/stormcast_eternals'\r\nimport { CoreBattalions, GenericScenery } from 'generic_rules'\r\nimport { last, uniq } from 'lodash'\r\nimport { KHARADRON_OVERLORDS, SLAANESH, STORMCAST_ETERNALS, TSupportedFaction } from 'meta/factions'\r\nimport { getFactionFromList, getFactionList } from 'meta/faction_list'\r\nimport { IImportedArmy, WARSCROLL_BUILDER } from 'types/import'\r\nimport { TSelections } from 'types/selections'\r\nimport { isValidFactionName } from 'utils/armyUtils'\r\nimport { importErrorChecker } from 'utils/import'\r\nimport { importFactionNameMap, importUnitOptionMap } from 'utils/import/options'\r\nimport { cleanWarscrollText } from 'utils/warscroll/warscrollUtils'\r\nimport { lowerToUpperLookup } from 'types/data'\r\n\r\nexport const getWarscrollArmyFromPdf = (pdfText: string[]): IImportedArmy => {\r\n  const army = getInitialWarscrollArmyPdf(pdfText)\r\n  const errorChecked = importErrorChecker(army, WARSCROLL_BUILDER)\r\n  return errorChecked\r\n}\r\n\r\nconst flavorTypes = uniq(\r\n  Object.values(getFactionList())\r\n    .map(v => (v.AggregateArmy.FlavorType || '').replace(/s$/, '')) // Remove trailing 's'\r\n    .filter(x => !!x)\r\n    .concat(['Host of Chaos']) // Manually add flavorTypes here\r\n)\r\n\r\nconst coreBattalionNames = CoreBattalions.map(x => x.name)\r\n\r\nconst unitIndicatorsPdf = [\r\n  'Artillery',\r\n  'Leaders',\r\n  'Units',\r\n  'Behemoths',\r\n  'War Machines',\r\n  'Battleline',\r\n  'Spearhead',\r\n  'Main Body',\r\n  'Rearguard',\r\n].map(x => x.toUpperCase())\r\n\r\n// TODO: This is fucking ridiculous.\r\n// Change it to something testable and more.. uhhh.. sane?\r\nconst getInitialWarscrollArmyPdf = (pdfText: string[]): IImportedArmy => {\r\n  const cleanedText = cleanWarscrollText(pdfText)\r\n  const genericScenery = GenericScenery.map(x => x.name)\r\n\r\n  let allyUnits: string[] = []\r\n  let factionName = ''\r\n  let subFactionName = ''\r\n  let origin_realm: string | null = null\r\n  let selector = ''\r\n\r\n  const initialSelections = Object.keys(lowerToUpperLookup).reduce((a, key) => {\r\n    a[key] = []\r\n    return a\r\n  }, {} as TSelections)\r\n\r\n  const selections = cleanedText.reduce((accum, txt) => {\r\n    // Force certain values into a certain part of the selections\r\n    if (manualLookup[txt]) {\r\n      const slice = manualLookup[txt]\r\n      accum[slice] = accum[slice].concat(txt)\r\n      return accum\r\n    }\r\n\r\n    // Get Allegiance\r\n    // e.g. 'Allegiance: Seraphon - Mortal Realm: Ghyran',\r\n    // or 'Davis Ford - Allegiance: Seraphon - Mortal Realm: Ghyran',\r\n    if (txt.includes('Allegiance:')) {\r\n      const nameRemoved = txt.replace(/(.+)?Allegiance: /g, '')\r\n      const parts = nameRemoved.split(' - ').map(t => t.trim())\r\n      const name = parts[0].trim()\r\n\r\n      const factionLookup = importFactionNameMap[name]\r\n\r\n      factionName = factionLookup?.factionName || name\r\n\r\n      if (factionLookup?.subFactionName) {\r\n        subFactionName = factionLookup.subFactionName\r\n      }\r\n\r\n      return accum\r\n    }\r\n\r\n    // 2/10/20 hotfix\r\n    if (txt.startsWith('undefined x ')) {\r\n      txt = txt.replace('undefined x ', '')\r\n    }\r\n\r\n    // Deprecated format\r\n    if (txt.startsWith('Skyport: ')) {\r\n      const skyport = txt.replace(/^Skyport: /g, '').trim()\r\n      accum.flavors = accum.flavors.concat(skyport)\r\n      return accum\r\n    }\r\n\r\n    // New format\r\n    if (txt.startsWith('- Sky Port: ')) {\r\n      const skyport = txt.replace('- Sky Port: ', '').trim().replace(' ', '-') // e.g. Barak Zilfin -> Barak-Zilfin\r\n      if (skyport !== 'None') {\r\n        accum.flavors = accum.flavors.concat(skyport)\r\n      }\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith('- Mortal Realm: ')) {\r\n      origin_realm = txt.replace('- Mortal Realm: ', '').trim()\r\n      return accum\r\n    }\r\n\r\n    if (unitIndicatorsPdf.includes(txt)) {\r\n      selector = 'units'\r\n      return accum\r\n    }\r\n\r\n    if (txt === 'BATTALIONS' || txt === 'CORE BATTALIONS') {\r\n      selector = 'battalions'\r\n      return accum\r\n    }\r\n\r\n    if (\r\n      txt === 'ENDLESS SPELLS / TERRAIN' ||\r\n      txt === 'ENDLESS SPELLS / TERRAIN / COMMAND POINTS' ||\r\n      txt === 'ENDLESS SPELLS & INVOCATIONS'\r\n    ) {\r\n      selector = 'endless_spells'\r\n      return accum\r\n    }\r\n\r\n    if (txt === 'Extra Command Point') return accum\r\n\r\n    if (txt.startsWith('- ')) {\r\n      if (txt.startsWith('- General')) return accum\r\n      if (txt.startsWith('- City Role')) return accum\r\n      if (txt.startsWith('- Mark of Chaos : ')) return accum\r\n      if (txt.startsWith('- Host Option: ')) return accum\r\n\r\n      // New in 2021\r\n      if (txt.startsWith('- Triumphs: ')) {\r\n        // e.g. \"- Triumphs: Inspired,Bloodthirsty\"\r\n        const triumphs = txt\r\n          .replace('- Triumphs: ', '')\r\n          .split(',')\r\n          .map(x => x.trim())\r\n        accum.triumphs = accum.triumphs.concat(triumphs)\r\n        return accum\r\n      }\r\n\r\n      // New in 2021\r\n      if (txt.startsWith('- Grand Strategy: ')) {\r\n        const grand_strategy = txt.replace('- Grand Strategy: ', '').trim()\r\n        if (grand_strategy !== 'None Chosen') {\r\n          accum.grand_strategies.push(grand_strategy)\r\n        }\r\n        return accum\r\n      }\r\n\r\n      // New in 2021\r\n      if (txt.startsWith('- Universal Spell Lore: ')) {\r\n        accum.spells.push(txt.replace('- Universal Spell Lore: ', ''))\r\n        return accum\r\n      }\r\n\r\n      // New in 2021\r\n      if (txt.startsWith('- Universal Prayer Scripture: ')) {\r\n        accum.prayers.push(txt.replace('- Universal Prayer Scripture: ', ''))\r\n        return accum\r\n      }\r\n\r\n      if (txt.startsWith('- Tribe: ')) {\r\n        const { flavor, trait } = getTribe(txt)\r\n        accum.flavors.push(flavor)\r\n        if (trait) {\r\n          accum.command_traits = accum.command_traits.concat(trait)\r\n        }\r\n        return accum\r\n      }\r\n\r\n      if (txt.startsWith('- Additional Footnote: ')) {\r\n        const trait = txt.replace('- Additional Footnote: ', '').trim()\r\n        if (trait) {\r\n          accum.command_traits = accum.command_traits.concat(trait)\r\n          return accum\r\n        }\r\n      }\r\n\r\n      if (txt.startsWith('- Damned Legion: ')) {\r\n        const name = txt\r\n          .replace('- Damned Legion: ', '')\r\n          .replace(/ \\(.+\\)/, '')\r\n          .trim()\r\n        if (name) subFactionName = name\r\n        return accum\r\n      }\r\n\r\n    /*  if (txt.startsWith('- Constellation: ')) {\r\n        const name = txt.replace('- Constellation: ', '').trim()\r\n        const data = getSeraphonConstellations(name)\r\n        if (data.flavor) accum.flavors.push(data.flavor)\r\n        if (data.subFactionName) subFactionName = data.subFactionName\r\n        return accum\r\n      } */\r\n\r\n      if (txt.startsWith('- Great Endrinworks')) {\r\n        const name = txt.replace(/- Great Endrinworks ?: /, '').trim()\r\n        const artifact = name.replace(/\\(.+\\)/g, '').trim()\r\n        if (artifact) {\r\n          accum.artifacts = accum.artifacts.concat(artifact)\r\n          return accum\r\n        }\r\n      }\r\n\r\n      if (txt.startsWith('- Grand Court')) {\r\n        const flavor = ['Gristlegore', 'Morgaunt', 'Blisterskin', 'Hollowmourne'].find(x => txt.includes(x))\r\n        if (flavor) {\r\n          accum.flavors = accum.flavors.concat(flavor)\r\n          return accum\r\n        }\r\n      }\r\n\r\n      if (txt.startsWith('- City')) {\r\n        const { flavor, trait } = getCity(txt)\r\n        accum.flavors = accum.flavors.concat(flavor)\r\n        if (trait) {\r\n          accum.command_traits = accum.command_traits.concat(trait)\r\n        }\r\n        return accum\r\n      }\r\n\r\n      if (txt.startsWith('- Allies')) {\r\n        const alliedUnit = last(accum.units)\r\n        if (alliedUnit) {\r\n          const accumMock = [...accum.units]\r\n          accumMock.pop()\r\n          accum[selector] = accumMock\r\n          allyUnits.push(alliedUnit)\r\n        }\r\n        return accum\r\n      }\r\n\r\n      // Misthavn Narcotic\r\n      if (txt.startsWith('- Misthavn Narcotic: ')) {\r\n        const artifact = txt.replace('- Misthavn Narcotic: ', '').trim()\r\n        accum.artifacts.push(artifact)\r\n        return accum\r\n      }\r\n\r\n      // Handle cases where two command traits are in the same entry\r\n      if (txt.startsWith('- Command Trait : ') && txt.replace('- Command Trait : ', '').match(':')) {\r\n        const traits = txt // e.g. \"- Command Trait : Killer Reputation: Fateseeker\"\r\n          .replace('- Command Trait : ', '')\r\n          .split(':')\r\n          .map(x => x.trim()) // results in ['Killer Reputation', 'Fateseeker']\r\n        accum.command_traits = accum.command_traits.concat(...traits)\r\n        return accum\r\n      }\r\n\r\n      // Same as above (could probably be refactored)\r\n      if (txt.startsWith('- Command Trait: ') && txt.replace('- Command Trait: ', '').match(':')) {\r\n        const traits = txt\r\n          .replace('- Command Trait: ', '')\r\n          .split(':')\r\n          .map(x => x.trim())\r\n        accum.command_traits = accum.command_traits.concat(...traits)\r\n        return accum\r\n      }\r\n\r\n      // Handles Sons of Behemat issue with double command traits\r\n      if (txt.startsWith('- Command Trait: Extremely Bitter')) {\r\n        let traits = ['Extremely Bitter (Breaker Tribe)']\r\n        const secondTrait = txt.replace('- Command Trait: Extremely Bitter - ', '').trim()\r\n        if (secondTrait) traits.push(secondTrait)\r\n        accum.command_traits = accum.command_traits.concat(...traits)\r\n        return accum\r\n      }\r\n\r\n      // Handles Very Acquisitive command traits/artifacts\r\n      if (txt.startsWith('- Command Trait: Very Acquisitive - ')) {\r\n        accum.command_traits.push('Very Acquisitive (Taker Tribe)')\r\n        const artifact = txt.replace('- Command Trait: Very Acquisitive - ', '').trim()\r\n        if (artifact) accum.artifacts.push(artifact)\r\n        return accum\r\n      }\r\n\r\n      // General handling of Command Traits, checks for attached spells\r\n      if (txt.startsWith('- Command Trait')) {\r\n        const { trait, spell } = getTraitWithSpell('Command Trait', txt)\r\n        accum.command_traits = accum.command_traits.concat(trait)\r\n        if (spell) accum.spells = accum.spells.concat(spell)\r\n        return accum\r\n      }\r\n      if (txt.startsWith('- Mount Trait')) {\r\n        const trait = getTrait('Mount Trait', txt)\r\n        accum.mount_traits.push(trait)\r\n        return accum\r\n      }\r\n      if (txt.startsWith('- Drakeblood Curse')) {\r\n        const trait = getTrait('Drakeblood Curse', txt)\r\n        accum.command_traits = accum.command_traits.concat(trait)\r\n        return accum\r\n      }\r\n      if (txt.startsWith('- Grand Court')) {\r\n        const trait = getTrait('Grand Court', txt)\r\n        accum.command_traits = accum.command_traits.concat(trait)\r\n        return accum\r\n      }\r\n\r\n      if (txt.match(/^- (.+ \\()?Artefact(\\))?( )?:/)) {\r\n        const { trait: artifact, spell } = getTraitWithSpell('Artefact', txt)\r\n        accum.artifacts = accum.artifacts.concat(artifact)\r\n        if (spell && spell !== 'None') accum.spells = accum.spells.concat(spell)\r\n        return accum\r\n      }\r\n\r\n      // New in 2021\r\n      if (txt.search(/^- .+ Spell: /g) > -1) {\r\n        // Handles entries like \"- Ancient Knowledge Spell: Celestial Equilibrium\"\r\n        const spell = getTrait('Spell', txt)\r\n        if (spell !== 'None') {\r\n          accum.spells.push(spell)\r\n        }\r\n        return accum\r\n      }\r\n\r\n      if (txt.startsWith('- Spell')) {\r\n        const spell = getTrait('Spell', txt)\r\n        if (spell !== 'None') {\r\n          accum.spells = accum.spells.concat(spell)\r\n        }\r\n        return accum\r\n      }\r\n\r\n      // New in 2021\r\n      if (txt.search(/^- .+ Prayer: /g) > -1) {\r\n        const prayer = getTrait('Prayer', txt)\r\n        accum.prayers.push(prayer)\r\n        return accum\r\n      }\r\n\r\n      if (txt.startsWith('- Prayer')) {\r\n        // New (bug?) in 2021\r\n        if (txt.startsWith('- Prayer1')) {\r\n          txt = txt.replace('- Prayer1', '- Prayer')\r\n        }\r\n\r\n        const prayer = getTrait('Prayer', txt)\r\n        accum.prayers.push(prayer)\r\n        return accum\r\n      }\r\n\r\n      if (txt.startsWith('- Mortal Realm') && last(accum.units) === 'Battlemage') {\r\n        const battlemage_realm = txt.replace(/- Mortal Realm ?: /, '').trim()\r\n        accum.units.pop()\r\n        accum.units.push(`Battlemage (${battlemage_realm})`)\r\n        return accum\r\n      }\r\n\r\n      // Add weapon options and other configuration\r\n      if (selector === 'units' && accum.units.length > 0) {\r\n        const attr = txt.split('-')[1].trim().replace('Weapon: ', '').replace('Weapon : ', '').trim()\r\n\r\n        if (importUnitOptionMap[attr]) {\r\n          const accumMock = [...accum.units]\r\n          accumMock.pop()\r\n          accumMock.push(importUnitOptionMap[attr])\r\n          accum.units = accumMock\r\n          return accum\r\n        }\r\n      }\r\n\r\n      // Handle some new stuff I've noticed\r\n      // We _REALLY_ need to test this stuff better\r\n\r\n      if (factionName === KHARADRON_OVERLORDS && txt.match(/^- (Artycle|Amendment|Footnote)( )?: /g)) {\r\n        const command_trait = txt.replace(/^- /, '').trim()\r\n        accum.command_traits.push(command_trait)\r\n        return accum\r\n      }\r\n\r\n      // Handle allegiances programmatically\r\n      // TODO: Break this out into a testable function\r\n      let stop_processing = false\r\n      flavorTypes.forEach(t => {\r\n        if (stop_processing) return\r\n        let val = txt.replace(`- ${t}: `, '').trim()\r\n\r\n        if (val && val !== 'None' && txt.startsWith(`- ${t}: `)) {\r\n          // Handle SCE Subfactions\r\n          if (factionName === STORMCAST_ETERNALS && val.includes('(Stormkeep)')) {\r\n            const sceFlavor = val.replace(/\\(Stormkeep\\)$/g, '(Stormhost)')\r\n            accum.flavors.push(sceFlavor)\r\n            subFactionName = StormcastFaction.subFactionKeyMap['Celestial Sentinels'] // Stormkeep\r\n            stop_processing = true\r\n            return\r\n          }\r\n\r\n          // Handle Slaanesh Subfactions/Flavors e.g. \"- Host: Scarlet Cavalcade Godseekers Host (Host of Chaos)\"\r\n          if (factionName === SLAANESH && val.endsWith('(Host of Chaos)')) {\r\n            const _faction = getFactionFromList(factionName)\r\n            const slaaneshSubFaction = _faction.subFactionKeys.find(x => val.includes(x))\r\n\r\n            if (slaaneshSubFaction) {\r\n              subFactionName = slaaneshSubFaction\r\n              val = val.split(slaaneshSubFaction)[0].trim()\r\n              accum.flavors.push(val)\r\n              stop_processing = true\r\n              return\r\n            }\r\n          }\r\n\r\n          // Generic subfaction checker\r\n          if (isValidFactionName(factionName)) {\r\n            // Need to do something faction-specific to the value? Do it here.\r\n            // if (factionName === SOME_FACTION) val = val.replace('something', '')\r\n            const _faction = getFactionFromList(factionName)\r\n            if (_faction.subFactionKeyMap[val]) {\r\n              subFactionName = val\r\n              stop_processing = true\r\n              return\r\n            }\r\n          }\r\n\r\n          // If we can't find a subfaction match, it's probably a Flavor\r\n          accum.flavors.push(val)\r\n          stop_processing = true\r\n        }\r\n      })\r\n      if (stop_processing) return accum\r\n\r\n      const commandTraitPrefixes = ['- Host Option : ', '- Host Option: ', '- Big Name : ']\r\n      commandTraitPrefixes.forEach(val => {\r\n        if (stop_processing) return\r\n        if (txt.startsWith(val)) {\r\n          const command_trait = txt.replace(val, '').trim()\r\n          accum.command_traits.push(command_trait)\r\n          stop_processing = true\r\n        }\r\n      })\r\n      if (stop_processing) return accum\r\n\r\n      if (txt.match(/^- Lore of .+ ?: /)) {\r\n        const spell = txt.replace(/^- Lore of .+ ?: /, '').trim()\r\n        if (spell !== 'None') {\r\n          accum.spells.push(spell)\r\n        }\r\n        stop_processing = true\r\n      }\r\n      if (stop_processing) return accum\r\n\r\n      return accum\r\n    }\r\n\r\n    // Check for end of file stuff\r\n    if (['TOTAL: ', 'LEADERS: ', 'ARTEFACTS: ', 'ADDITIONAL ENHANCEMENTS'].some(e => txt.startsWith(e))) {\r\n      selector = ''\r\n      return accum\r\n    }\r\n\r\n    // Add item to accum\r\n    if (selector) {\r\n      // Endless spells and terrain are grouped together, so we have to do this check manually\r\n      if (selector === 'endless_spells' && genericScenery.includes(txt)) {\r\n        accum.scenery = uniq(accum.scenery.concat(txt))\r\n      } else {\r\n        // New in 2021\r\n        // Extract Core Battalions from a unit name (e.g. 'Freeguild General in Grand Battery')\r\n        if (selector === 'units') {\r\n          const coreBattalion = coreBattalionNames.find(name => txt.endsWith(` in ${name}`))\r\n          if (coreBattalion) {\r\n            accum.battalions = uniq(accum.battalions.concat(coreBattalion))\r\n            txt = txt.replace(` in ${coreBattalion}`, '')\r\n          }\r\n        }\r\n\r\n        accum[selector] = uniq(accum[selector].concat(txt))\r\n      }\r\n    }\r\n\r\n    return accum\r\n  }, initialSelections)\r\n\r\n  return {\r\n    allyFactionNames: [],\r\n    allySelections: {},\r\n    allyUnits: uniq(allyUnits),\r\n    errors: [],\r\n    factionName: factionName as TSupportedFaction,\r\n    origin_realm,\r\n    realmscape_feature: null,\r\n    realmscape: null,\r\n    selections,\r\n    subFactionName,\r\n    unknownSelections: [],\r\n  }\r\n}\r\n\r\n/**\r\n * Value on the left, desired selection placement on the right\r\n */\r\nconst manualLookup = {\r\n  'Celestar Ballista': 'units',\r\n}\r\n\r\ntype TTraitType =\r\n  | 'Command Trait'\r\n  | 'Artefact'\r\n  | 'Spell'\r\n  | 'Mount Trait'\r\n  | 'Drakeblood Curse'\r\n  | 'Grand Court'\r\n  | 'Prayer'\r\n\r\nconst getTrait = (type: TTraitType, txt: string) => {\r\n  const sep = txt.includes(`${type} : `)\r\n    ? `${type} : `\r\n    : txt.includes(` (${type}) : `)\r\n    ? ` (${type}) : `\r\n    : txt.includes(`(${type}): `)\r\n    ? `(${type}): `\r\n    : `${type}: `\r\n\r\n  const newTxt = txt.split(sep)[1].trim()\r\n  return removePrefix(newTxt)\r\n}\r\n\r\n/**\r\n * Removes unnecessary prefixes\r\n * @param txt\r\n */\r\nconst removePrefix = (txt: string) => {\r\n  const prefixes = [\r\n    'Court of Delusion -',\r\n    'Extremely Bitter -',\r\n    'Lore of Cinder -',\r\n    'Lore of Dark Sorcerey -',\r\n    'Lore of Eagles -',\r\n    'Lore of Leaves -',\r\n    'Lore of Smog -',\r\n    'Lore of the Phoenix -',\r\n    'Lore of Whitefire -',\r\n    'Universal Prayer Scripture: ',\r\n  ]\r\n  const regexp = new RegExp(`${prefixes.join('|')}`, 'g')\r\n  return txt.replace(regexp, '').trim()\r\n}\r\n\r\nconst getTribe = (txt: string) => {\r\n  const tribe = txt.split('- Tribe: ')[1].split('(')\r\n  const flavor = tribe[0].trim()\r\n  try {\r\n    let trait = tribe[1] ? tribe[1].split('Fierce Loathing: ')[1].replace(')', '').trim() : null\r\n    trait = trait ? `${trait} (Fierce Loathing)` : null //  e.g. \"Shiny 'Uns (Fierce Loathing)\"\r\n    return { flavor, trait }\r\n  } catch (err) {\r\n    return { flavor, trait: null }\r\n  }\r\n}\r\n\r\nconst getCity = (txt: string) => {\r\n  const city = txt.split('- City: ')[1].split('(')\r\n  const flavor = city[0].trim()\r\n  try {\r\n    const trait = city[1] ? city[1].split('Illicit Dealings: ')[1].replace(')', '').trim() : null\r\n    return { flavor, trait }\r\n  } catch (err) {\r\n    return { flavor, trait: null }\r\n  }\r\n}\r\n\r\n/**\r\n * Warscroll Builder sometimes (confusingly) will mingle Command Traits (that grant a spell) with the spell itself\r\n * A typical entry might look like:\r\n * \"- Command Trait : Secretive Warlock - Shadow Daggers\"\r\n *                       ^ trait ^          ^ spell ^\r\n *\r\n * We will want to extract the trait AND the spell, if possible\r\n */\r\nconst traitToSpellMapper = [\r\n  'Amethyst Glow -',\r\n  'Blood Sigil -',\r\n  'Dark Acolyte -',\r\n  'Druid of the Everspring -',\r\n  'One Wiv Da Beast -',\r\n  'Loremaster -',\r\n  'Midnight Tome -',\r\n  'One with Fire and Ice -',\r\n  'Rune of Ulgu -',\r\n  'Secretive Warlock -',\r\n  'Vast Intellect -',\r\n  'Whitefire Tome -',\r\n]\r\n\r\n/**\r\n * Extracts a given trait, and optionally, a spell associated with it\r\n * @param txt\r\n */\r\nconst getTraitWithSpell = (type: TTraitType, txt: string) => {\r\n  const cleaned = getTrait(type, txt)\r\n  const hasSpell = traitToSpellMapper.some(x => cleaned.startsWith(x))\r\n\r\n  if (!hasSpell) return { trait: cleaned, spell: null }\r\n\r\n  const [trait, spell] = cleaned.split(' - ').map(x => x.trim())\r\n\r\n  return { trait, spell: spell === 'All Spells' ? null : spell }\r\n}\r\n\r\n/**\r\n * If a Seraphon army has taken a constellation such as Koatl's Claw or Thunder Lizard,\r\n * this function adds the \"Way of the Seraphon\" subfaction that the constellation is associated with\r\n * @param flavor\r\n */\r\n/* const getSeraphonConstellations = (flavor: string) => {\r\n  const { subFactionKeyMap, SubFactions } = SeraphonFaction\r\n\r\n const CoalescedFlavors = SubFactions.Coalesced.available.flavors.map(x => Object.keys(x)).flat()\r\n  const StarborneFlavors = SubFactions.Starborne.available.flavors.map(x => Object.keys(x)).flat()\r\n\r\n  if (subFactionKeyMap[flavor]) return { subFactionName: subFactionKeyMap[flavor] }\r\n\r\n  if (CoalescedFlavors.includes(flavor)) {\r\n    return { flavor, subFactionName: subFactionKeyMap.Coalesced }\r\n  }\r\n  if (StarborneFlavors.includes(flavor)) {\r\n   return { flavor, subFactionName: subFactionKeyMap.Starborne }\r\n  } \r\n\r\n  return { flavor }\r\n} */\r\n","import { PreferenceApi } from 'api/preferenceApi'\r\nimport {\r\n  AZYR,\r\n  BATTLESCRIBE,\r\n  HTML_FILE,\r\n  IImportedArmy,\r\n  PDF_FILE,\r\n  TImportParsers,\r\n  UNKNOWN,\r\n  WARSCROLL_BUILDER,\r\n} from 'types/import'\r\nimport { logEvent } from 'utils/analytics'\r\nimport { isValidFactionName } from 'utils/armyUtils'\r\nimport { getPdfPages, handleAzyrPages } from 'utils/azyr/azyrPdf'\r\nimport { getAzyrArmyFromPdf } from 'utils/azyr/getAzyrArmy'\r\nimport { getBattlescribeArmy } from 'utils/battlescribe/getBattlescribeArmy'\r\nimport { hasErrorOrWarning } from 'utils/import/warnings'\r\nimport { parsePdf } from 'utils/pdf/pdfUtils'\r\nimport { getWarscrollArmyFromPdf } from 'utils/warscroll/getWarscrollArmy'\r\n\r\ninterface IUseParseArgs {\r\n  handleDone: () => void\r\n  handleDrop: (parsedArmy: IImportedArmy) => void\r\n  handleError: (error?: string) => void\r\n  isOnline: boolean\r\n  setParser: (parser: TImportParsers) => void\r\n  startProcessing: () => boolean\r\n  stopProcessing: () => boolean\r\n}\r\n\r\ntype TUseParse = (args: IUseParseArgs) => (acceptedFiles: any[]) => void\r\n\r\nconst arrayBufferToString = (buf: any) => {\r\n  return new TextDecoder('utf-8').decode(new Uint8Array(buf))\r\n}\r\n\r\nconst checkFileInformation = async (typedArray: any) => {\r\n  const { pdfPages, parser } = await getPdfPages(typedArray)\r\n  return { pdfPages, parser }\r\n}\r\n\r\nexport const handleParseFile: TUseParse = handlers => {\r\n  const { handleError, isOnline, setParser, startProcessing, stopProcessing } = handlers\r\n\r\n  return acceptedFiles => {\r\n    try {\r\n      const file = acceptedFiles[0]\r\n      const reader = new FileReader()\r\n\r\n      // Set reader options\r\n      reader.onabort = () => {\r\n        stopProcessing() && console.log('File reading was aborted.')\r\n      }\r\n      reader.onerror = () => {\r\n        stopProcessing() && handleError()\r\n        console.log('File reading has failed.')\r\n      }\r\n      reader.onload = async () => {\r\n        const typedArray = new Uint8Array(reader.result as any)\r\n\r\n        if (file.type === HTML_FILE) {\r\n          setParser(BATTLESCRIBE)\r\n          return handleBattlescribeHTML(reader.result as string, isOnline, handlers)\r\n        }\r\n\r\n        const { pdfPages, parser } = await checkFileInformation(typedArray)\r\n\r\n        setParser(parser)\r\n\r\n        if (pdfPages[0].startsWith('HEADER 1 aosreminders.com')) {\r\n          logEvent(`ImportAoSReminders`)\r\n          return stopProcessing() && handleError(`Unable to process AoS Reminder PDFs`)\r\n        }\r\n\r\n        if (parser === BATTLESCRIBE) {\r\n          logEvent(`Import${parser}PDF`)\r\n          return (\r\n            stopProcessing() && handleError(`We don't support ${BATTLESCRIBE} PDFs yet. Try an HTML file!`)\r\n          )\r\n        }\r\n\r\n        if (parser === UNKNOWN) return handleUnknownPDF(pdfPages, isOnline, handlers)\r\n\r\n        if (parser === WARSCROLL_BUILDER) {\r\n          const fileTxt = arrayBufferToString(reader.result)\r\n          return handleWarscrollBuilderPDF(fileTxt, isOnline, handlers)\r\n        } else {\r\n          return handleAzyrPDF(pdfPages, isOnline, handlers)\r\n        }\r\n      }\r\n\r\n      startProcessing() // Start processing spinner\r\n\r\n      // Read the file\r\n      if (file && file.type === PDF_FILE) {\r\n        reader.readAsArrayBuffer(file)\r\n      } else if (file && file.type === HTML_FILE) {\r\n        reader.readAsText(file)\r\n      } else {\r\n        const fileType = file ? file.type : UNKNOWN\r\n        if (isOnline) logEvent(`Import${fileType}`)\r\n        console.error(`Error: File type not supported - ${fileType}`)\r\n        return stopProcessing() && handleError(`Only feed me PDF and HTML files, please`)\r\n      }\r\n    } catch (err) {\r\n      console.error(err)\r\n      return stopProcessing() && handleError()\r\n    }\r\n  }\r\n}\r\n\r\nconst parseWarscroll = (fileText: string) => {\r\n  const parsedFile = parsePdf(fileText)\r\n  const parsedArmy = getWarscrollArmyFromPdf(parsedFile)\r\n  return { parsedFile, parsedArmy }\r\n}\r\n\r\nconst handleWarscrollBuilderPDF = (fileTxt: string, isOnline: boolean, handlers: IUseParseArgs) => {\r\n  try {\r\n    const { parsedFile, parsedArmy } = parseWarscroll(fileTxt)\r\n\r\n    // Send a copy of our file to S3\r\n    if (isOnline && hasErrorOrWarning(parsedArmy.errors)) {\r\n      const payload = {\r\n        fileTxt: parsedFile,\r\n        parser: WARSCROLL_BUILDER,\r\n        fileType: PDF_FILE,\r\n      }\r\n      Promise.resolve(PreferenceApi.createErrorFile(payload))\r\n    }\r\n\r\n    handlers.handleDrop(parsedArmy)\r\n    handlers.stopProcessing() && handlers.handleDone()\r\n    if (isOnline && isValidFactionName(parsedArmy.factionName)) {\r\n      logEvent(`Import${WARSCROLL_BUILDER}-${parsedArmy.factionName}`)\r\n    }\r\n  } catch (err) {\r\n    console.error(err)\r\n    handlers.stopProcessing() && handlers.handleError(err.toString())\r\n  }\r\n}\r\n\r\nconst handleAzyrPDF = (fileTxt: string[], isOnline: boolean, handlers: IUseParseArgs) => {\r\n  try {\r\n    const parsedPages = handleAzyrPages(fileTxt)\r\n    const parsedArmy: IImportedArmy = getAzyrArmyFromPdf(parsedPages)\r\n\r\n    if (isOnline && hasErrorOrWarning(parsedArmy.errors)) {\r\n      const payload = {\r\n        fileTxt,\r\n        parser: AZYR,\r\n        fileType: PDF_FILE,\r\n      }\r\n      Promise.resolve(PreferenceApi.createErrorFile(payload))\r\n    }\r\n\r\n    handlers.handleDrop(parsedArmy)\r\n    handlers.stopProcessing() && handlers.handleDone()\r\n\r\n    if (isOnline && isValidFactionName(parsedArmy.factionName)) {\r\n      logEvent(`Import${AZYR}-${parsedArmy.factionName}`)\r\n    }\r\n  } catch (err) {\r\n    console.error(err)\r\n    handlers.stopProcessing() && handlers.handleError(err.toString())\r\n  }\r\n}\r\n\r\nconst handleUnknownPDF = (fileTxt: string[], isOnline: boolean, handlers: IUseParseArgs) => {\r\n  // Send a copy of our file to S3\r\n  if (isOnline) {\r\n    const payload = {\r\n      fileTxt,\r\n      parser: UNKNOWN,\r\n      fileType: PDF_FILE,\r\n    }\r\n    Promise.resolve(PreferenceApi.createErrorFile(payload))\r\n  }\r\n\r\n  handlers.stopProcessing() && handlers.handleError()\r\n\r\n  if (isOnline) logEvent(`Import${UNKNOWN}PDF`)\r\n}\r\n\r\nconst handleBattlescribeHTML = (fileTxt: string, isOnline: boolean, handlers: IUseParseArgs) => {\r\n  try {\r\n    const parsedArmy = getBattlescribeArmy(fileTxt)\r\n\r\n    // Send a copy of our file to S3\r\n    if (isOnline && hasErrorOrWarning(parsedArmy.errors)) {\r\n      const payload = {\r\n        fileTxt,\r\n        parser: BATTLESCRIBE,\r\n        fileType: HTML_FILE,\r\n      }\r\n      Promise.resolve(PreferenceApi.createErrorFile(payload))\r\n    }\r\n\r\n    handlers.handleDrop(parsedArmy)\r\n    handlers.stopProcessing() && handlers.handleDone()\r\n\r\n    if (isOnline && isValidFactionName(parsedArmy.factionName)) {\r\n      logEvent(`Import${BATTLESCRIBE}-${parsedArmy.factionName}`)\r\n    }\r\n  } catch (err) {\r\n    console.error(err)\r\n    handlers.stopProcessing() && handlers.handleError(err.toString())\r\n  }\r\n}\r\n","import matchAll from 'string.prototype.matchall'\r\n\r\nexport const parsePdf = (pdfText: string): string[] => {\r\n  const regex = /^\\((.+)\\) Tj$/gm\r\n  const matches = matchAll(pdfText, regex)\r\n\r\n  const result: string[] = [...matches].map(x => x[1].trim())\r\n\r\n  return result\r\n}\r\n","import Spinner from 'components/helpers/spinner'\r\nimport { handleParseFile } from 'components/input/importPdf/parseFile'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useSavedArmies } from 'context/useSavedArmies'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { FaRegCheckCircle } from 'react-icons/fa'\r\nimport { MdErrorOutline } from 'react-icons/md'\r\nimport { centerContentClass } from 'theme/helperClasses'\r\nimport {\r\n  AZYR,\r\n  BATTLESCRIBE,\r\n  HTML_FILE,\r\n  IImportedArmy,\r\n  PDF_FILE,\r\n  TImportParsers,\r\n  WARSCROLL_BUILDER,\r\n} from 'types/import'\r\nimport { resetAnalyticsStore } from 'utils/analytics'\r\nimport useWindowSize from 'utils/hooks/useWindowSize'\r\n\r\ninterface IDropzoneProps {\r\n  handleDrop: (army: IImportedArmy) => void\r\n}\r\n\r\nconst ImportDropzone = ({ handleDrop }: IDropzoneProps) => {\r\n  const { isMobile } = useWindowSize()\r\n  const { isOnline } = useAppStatus()\r\n  const { setLoadedArmy } = useSavedArmies()\r\n  const { theme } = useTheme()\r\n\r\n  const [isDone, setIsDone] = useState(false)\r\n  const [isError, setIsError] = useState(false)\r\n  const [errorTxt, setErrorText] = useState<string | null>(null)\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n  const [parser, setParser] = useState<TImportParsers>(WARSCROLL_BUILDER)\r\n\r\n  const handleDone = () => {\r\n    setIsDone(true)\r\n    setTimeout(() => setIsDone(false), 6000)\r\n  }\r\n\r\n  const handleError = (error?: string) => {\r\n    if (error) setErrorText(error)\r\n    setIsError(true)\r\n    setTimeout(() => {\r\n      setIsError(false)\r\n      setErrorText(null)\r\n    }, 6000)\r\n  }\r\n\r\n  const startProcessing = () => {\r\n    setLoadedArmy(null)\r\n    resetAnalyticsStore()\r\n    setIsDone(false)\r\n    setIsError(false)\r\n    setIsProcessing(true)\r\n    return true\r\n  }\r\n\r\n  const stopProcessing = () => {\r\n    setIsProcessing(false)\r\n    return true\r\n  }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const onDrop = useCallback(\r\n    handleParseFile({\r\n      handleDrop,\r\n      handleError,\r\n      handleDone,\r\n      isOnline,\r\n      setParser,\r\n      startProcessing,\r\n      stopProcessing,\r\n    }),\r\n    [handleDrop]\r\n  )\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop,\r\n    accept: `${PDF_FILE}, ${HTML_FILE}`,\r\n    multiple: false,\r\n  })\r\n\r\n  const getText = () => {\r\n    if (isProcessing) return ``\r\n    if (isError) return errorTxt || `Unable to process this file`\r\n    if (isDone) return `${parser} file processed!`\r\n    if (isMobile) return `Tap to select your ${AZYR}/${WARSCROLL_BUILDER} PDF or ${BATTLESCRIBE} HTML`\r\n    return `Drag your ${AZYR}/${WARSCROLL_BUILDER} PDF or ${BATTLESCRIBE} HTML here, or click to select`\r\n  }\r\n\r\n  return (\r\n    <div {...getRootProps({ className: theme.dropzone })}>\r\n      <input {...getInputProps()} />\r\n      <div className={`${centerContentClass} text-center py-3`}>\r\n        {isProcessing && <Spinner />}\r\n        {getText()}\r\n        {isDone && <FaRegCheckCircle className=\"text-success ml-2\" />}\r\n        {isError && <MdErrorOutline className=\"text-danger ml-2\" />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImportDropzone\r\n","const CREATED_BY_WARHAMMER_APP = 'Created with Warhammer Age of Sigmar: The App'\r\n\r\nexport const warhammerAppPlaceholders = {\r\n  ALLY_SUFFIX: ' (ALLY)',\r\n  ARMY_NAME_PREFIX: 'Army Name: ',\r\n  ARMY_NOTES_PREFIX: 'Army Notes: ',\r\n  ARTIFACTS_PREFIX: 'Artefacts: ',\r\n  BATTALIONS: '---BATTALIONS---',\r\n  COMMAND_TRAITS_PREFIX: 'Command Traits: ',\r\n  CREATED_BY_WARHAMMER_APP,\r\n  END_OF_ENTRY: '---END_OF_ENTRY---',\r\n  END_OF_LIST: '---END_OF_LIST---',\r\n  ENDLESS_SPELLS: '---ENDLESS_SPELLS---',\r\n  ENHANCEMENTS: '---ENHANCEMENTS---',\r\n  FACTION_NAME_PREFIX: 'FACTION_NAME: ',\r\n  FLAVOR_PREFIX: 'FLAVOR: ',\r\n  GRAND_STRATEGY_PREFIX: 'Grand Strategy: ',\r\n  INVALID_LIST: `Invalid: ${CREATED_BY_WARHAMMER_APP}`,\r\n  MOUNT_TRAITS_PREFIX: 'Mount Traits: ',\r\n  PRAYERS_PREFIX: 'Prayers: ',\r\n  SCENERY: '---SCENERY---',\r\n  SPELLS_PREFIX: 'Spells: ',\r\n  SUBFACTION_PREFIX: 'SUBFACTION: ',\r\n  TRIUMPHS_PREFIX: 'Triumphs: ',\r\n  UNITS: '---UNITS---',\r\n  VALID_LIST: `Valid: ${CREATED_BY_WARHAMMER_APP}`,\r\n  MANIFESTATIONS: '---MANIFESTATIONS---',\r\n} as const\r\n\r\nexport const cleanWarhammerAppText = (text: string): string[] => {\r\n  const pass1 = text.split('\\n').map(txt =>\r\n    txt\r\n      .replace(/[‚Äò‚Äô]/g, `'`) // Replace special quotes\r\n      .replace(/[‚Äú‚Äù]/g, `\"`) // Replace special quotes\r\n      .replace(/[‚Äë‚Äì‚Äî]/g, `-`) // Replace special dashes\r\n      .replace(/¬†/g, ` `) // Remove non ASCII-spaces\r\n\r\n      // Replace special characters\r\n      .replace(/√∫/, 'u')\r\n      .replace(/√°/, 'a')\r\n\r\n      // Mark our units for later use\r\n      .replace(/^(Units|BATTLELINE|LEADERS|OTHER|BEHEMOTH|LEADER)$/g, warhammerAppPlaceholders.UNITS)\r\n\r\n      .trim()\r\n  )\r\n\r\n  let pastBeginningSection = false\r\n  const pass2 = pass1.map(x => {\r\n    if (x === warhammerAppPlaceholders.UNITS) {\r\n      pastBeginningSection = true\r\n      return x\r\n    }\r\n    return pastBeginningSection ? x : x.replace(/^- /g, '')\r\n  })\r\n\r\n  // Remove unnecessary info\r\n  const pass3 = pass2\r\n    .map(txt =>\r\n      txt\r\n        .replace(/ \\(General\\)$/g, '') // Remove General tag e.g. \"Lord Kroak (General)\" -> \"Lord Kroak\"\r\n        .replace(/^- General$/g, '') // Remove General entry\r\n        .replace(/^General$/g, '') // Remove General entry\r\n        .replace(/^Triumps: /g, warhammerAppPlaceholders.TRIUMPHS_PREFIX) // fix a typo\r\n        .replace(\r\n          /^(Army Notes|General|Battle Trait Bonus|Reinforced|Battlefield Role|Battlepack|Points Limit|Battalion Slot Filled): .+/g,\r\n          ''\r\n        )\r\n        .replace(/^Mark of Chaos: .+/g, '') // Remove Mark of Chaos tag e.g. \"Mark of Chaos: Khorne\"\r\n        .replace(/^Host Option: .+/g, '') // Remove Host Option tag e.g. \"Host Option: General\"\r\n        .replace(/\\*+$/g, '') // Remove asterik suffixes\r\n        .replace(/^\\*+/g, '') // Remove asterik prefixes e.g. \"**Bosses of the Stomp - Unified\"\r\n        .replace(/^[0-9]+ x /g, '') // Remove quantity from units e.g. \"3 x Razordons\"\r\n        .replace(/\\([0-9]+\\)$/g, '') // Remove point values e.g. \"Slann Starmaster (360)\"\r\n        .replace(/^-(\\w)/g, `- $1`) //  Replace non-spaced list dash e.g. \"-Warlord\"\r\n\r\n        // Replace text with standardized endings\r\n        .replace(/^Points Cost: .+/g, warhammerAppPlaceholders.END_OF_ENTRY) // Replace \"Points Cost: 430 pts\" with a constant separator (helps to mark the end of a unit entry)\r\n        .replace(/^(Total Points|TOTAL POINTS): .+/g, warhammerAppPlaceholders.END_OF_LIST) // Replace \"Total Points: 2000 pts\" with a constant separator (helps to mark the end of a list)\r\n        .replace('Endless Spells/Invocations', warhammerAppPlaceholders.ENDLESS_SPELLS)\r\n        .replace(/^ENDLESS SPELLS & INVOCATIONS/g, warhammerAppPlaceholders.ENDLESS_SPELLS)\r\n        .replace(/^(ENDLESS SPELL|INVOCATION)$/g, warhammerAppPlaceholders.ENDLESS_SPELLS)\r\n        .replace(/^(Core Battalions|CORE BATTALIONS|CORE BATTALIONS:)$/g, warhammerAppPlaceholders.BATTALIONS)\r\n        .replace(/^Enhancements$/g, warhammerAppPlaceholders.ENHANCEMENTS)\r\n        .replace(/^(Faction Terrain|TERRAIN)$/g, warhammerAppPlaceholders.SCENERY)\r\n        .replace(\r\n          /^(Units|BATTLELINE|LEADERS|OTHER|BEHEMOTH|ARTILLERY|LEADER)$/g,\r\n          warhammerAppPlaceholders.UNITS\r\n        )\r\n        .replace(/^Army Faction: /g, warhammerAppPlaceholders.FACTION_NAME_PREFIX)\r\n        .replace(/^Army Type: /g, warhammerAppPlaceholders.SUBFACTION_PREFIX) // Army Type in WH App === Subfactions in AoSr\r\n        .replace(/^(Subfaction|Army Subfaction): /g, warhammerAppPlaceholders.FLAVOR_PREFIX) // Subfactions in WH App === Flavors in AoSr\r\n        .replace(/ \\(Coalition Ally\\)$/g, warhammerAppPlaceholders.ALLY_SUFFIX) // Mark Allies appropriately\r\n        .replace(/ \\(Ally\\)$/g, warhammerAppPlaceholders.ALLY_SUFFIX) // Mark Allies appropriately\r\n        .replace(/^Artefacts of Power: /g, warhammerAppPlaceholders.ARTIFACTS_PREFIX)\r\n        .replace(/^Grand Strategies: /, warhammerAppPlaceholders.GRAND_STRATEGY_PREFIX)\r\n\r\n        // Faction specific and/or special prefixes go here\r\n        .replace(/^Great Endrinworks: /g, warhammerAppPlaceholders.ARTIFACTS_PREFIX)\r\n        .replace(/^Cursed Mutations: /g, warhammerAppPlaceholders.MOUNT_TRAITS_PREFIX)\r\n        .replace(/^Drakeblood Curses: /g, warhammerAppPlaceholders.COMMAND_TRAITS_PREFIX)\r\n        .replace(/^Seasons of War: /g, warhammerAppPlaceholders.SUBFACTION_PREFIX)\r\n\r\n        // One final trim, and we're done!\r\n        .trim()\r\n    )\r\n    .filter(txt => txt && txt.length > 2)\r\n\r\n  const validPrefixes = Object.values(warhammerAppPlaceholders)\r\n\r\n  // Remove weapon/unit equipment options that are irrelevant for us\r\n  const pass4 = pass3\r\n    .filter(x => {\r\n      if (x.startsWith('- ')) {\r\n        return validPrefixes.some(prefix => x.startsWith(`- ${prefix}`))\r\n      }\r\n      return true\r\n    })\r\n    .map(x => x.replace(/^- /, '').trim())\r\n\r\n  return pass4\r\n}\r\n","import { CoreBattalions } from 'generic_rules'\r\nimport { uniq } from 'lodash'\r\nimport { SLAVES_TO_DARKNESS, TSupportedFaction } from 'meta/factions'\r\nimport { getFactionFromList } from 'meta/faction_list'\r\nimport { IImportedArmy, WARHAMMER_APP } from 'types/import'\r\nimport { TSelections, TSelectionTypes } from 'types/selections'\r\nimport { isValidFactionName } from 'utils/armyUtils'\r\nimport { importErrorChecker } from 'utils/import'\r\nimport { importFactionNameMap } from 'utils/import/options'\r\nimport { cleanWarscrollText } from 'utils/warscroll/warscrollUtils'\r\nimport { cleanWarhammerAppText, warhammerAppPlaceholders } from './warhammerAppUtils'\r\nimport { lowerToUpperLookup } from 'types/data'\r\n\r\nexport const getWarhammerAppArmy = (text: string): IImportedArmy => {\r\n  const cleanedText = cleanWarhammerAppText(text)\r\n  const army = getInitialWarhammerAppArmy(cleanedText)\r\n  const errorChecked = importErrorChecker(army, WARHAMMER_APP)\r\n  return errorChecked\r\n}\r\n\r\nconst {\r\n  ALLY_SUFFIX,\r\n  ARMY_NAME_PREFIX,\r\n  ARMY_NOTES_PREFIX,\r\n  ARTIFACTS_PREFIX,\r\n  BATTALIONS,\r\n  COMMAND_TRAITS_PREFIX,\r\n  CREATED_BY_WARHAMMER_APP,\r\n  END_OF_ENTRY,\r\n  END_OF_LIST,\r\n  ENDLESS_SPELLS,\r\n  ENHANCEMENTS,\r\n  FACTION_NAME_PREFIX,\r\n  FLAVOR_PREFIX,\r\n  GRAND_STRATEGY_PREFIX,\r\n  INVALID_LIST,\r\n  MOUNT_TRAITS_PREFIX,\r\n  PRAYERS_PREFIX,\r\n  SCENERY,\r\n  SPELLS_PREFIX,\r\n  SUBFACTION_PREFIX,\r\n  TRIUMPHS_PREFIX,\r\n  UNITS,\r\n  VALID_LIST,\r\n  MANIFESTATIONS,\r\n} = warhammerAppPlaceholders\r\n\r\nconst getInitialWarhammerAppArmy = (text: string[]): IImportedArmy => {\r\n  const cleanedText = cleanWarscrollText(text)\r\n\r\n  let allyUnits: string[] = []\r\n  let factionName = ''\r\n  let subFactionName = ''\r\n  let origin_realm: string | null = null\r\n  let selector: TSelectionTypes | '' = ''\r\n  let battalionNames = CoreBattalions.map(x => x.name)\r\n\r\n  const initialSelections = Object.keys(lowerToUpperLookup).reduce((a, key) => {\r\n    a[key] = []\r\n    return a\r\n  }, {} as TSelections)\r\n\r\n  const selections = cleanedText.reduce((accum, txt) => {\r\n    // Ignore these lines when processing\r\n    if (\r\n      // @ts-expect-error\r\n      [END_OF_LIST, ENHANCEMENTS, VALID_LIST, INVALID_LIST, END_OF_ENTRY].includes(txt) ||\r\n      txt.startsWith(ARMY_NAME_PREFIX) ||\r\n      txt.startsWith(ARMY_NOTES_PREFIX) ||\r\n      txt.endsWith(CREATED_BY_WARHAMMER_APP) ||\r\n      txt.startsWith('Magnificent Bonus: ')\r\n    ) {\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(FACTION_NAME_PREFIX)) {\r\n      const name = txt.replace(FACTION_NAME_PREFIX, '').trim()\r\n      const factionLookup = importFactionNameMap[name]\r\n\r\n      factionName = factionLookup?.factionName || name\r\n\r\n      if (factionLookup?.subFactionName) {\r\n        subFactionName = factionLookup.subFactionName\r\n      }\r\n\r\n      // Add faction-specific battalion names to look up later\r\n      if (isValidFactionName(factionName)) {\r\n        const additionalBattalions = getFactionFromList(factionName).AggregateArmy.Battalions.map(x => x.name)\r\n        battalionNames = battalionNames.concat(additionalBattalions)\r\n      }\r\n\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(SUBFACTION_PREFIX)) {\r\n      subFactionName = txt.replace(SUBFACTION_PREFIX, '').trim()\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(FLAVOR_PREFIX)) {\r\n      // Disagreement between WH App and AoSr. We think the \"Hosts\" are subfactions, in this specific case\r\n      if (factionName === SLAVES_TO_DARKNESS) {\r\n        subFactionName = txt.replace(FLAVOR_PREFIX, '').trim()\r\n        return accum\r\n      }\r\n\r\n      // Normal behavior\r\n      accum.flavors.push(txt.replace(FLAVOR_PREFIX, '').trim())\r\n      return accum\r\n    }\r\n\r\n    if (txt === UNITS) {\r\n      selector = 'units'\r\n      return accum\r\n    }\r\n\r\n    if (txt === BATTALIONS) {\r\n      selector = 'battalions'\r\n      return accum\r\n    }\r\n\r\n    if (txt === ENDLESS_SPELLS) {\r\n      selector = 'endless_spells'\r\n      return accum\r\n    }\r\n\r\n    if (txt === SCENERY) {\r\n      selector = 'scenery'\r\n      return accum\r\n    }\r\n    \r\n\r\n    if (txt.startsWith(TRIUMPHS_PREFIX)) {\r\n      const triumphs = txt\r\n        .replace(TRIUMPHS_PREFIX, '')\r\n        .split(',')\r\n        .map(x => x.trim())\r\n      accum.triumphs = accum.triumphs.concat(triumphs)\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(SPELLS_PREFIX)) {\r\n      const spells = txt\r\n        .replace(SPELLS_PREFIX, '')\r\n        .split(',')\r\n        .map(x => x.trim())\r\n      accum.spells = accum.spells.concat(spells)\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(ARTIFACTS_PREFIX)) {\r\n      const artifacts = txt\r\n        .replace(ARTIFACTS_PREFIX, '')\r\n        .split(',')\r\n        .map(x => x.trim())\r\n      accum.artifacts = accum.artifacts.concat(artifacts)\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(GRAND_STRATEGY_PREFIX)) {\r\n      const grand_strategy = txt.replace(GRAND_STRATEGY_PREFIX, '').trim()\r\n      accum.grand_strategies.push(grand_strategy)\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(PRAYERS_PREFIX)) {\r\n      const prayers = txt\r\n        .replace(PRAYERS_PREFIX, '')\r\n        .split(',')\r\n        .map(x => x.trim())\r\n      accum.prayers = accum.prayers.concat(prayers)\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(MANIFESTATIONS)) {\r\n      const manifestations = txt\r\n        .replace(MANIFESTATIONS, '')\r\n        .split(',')\r\n        .map(x => x.trim())\r\n      accum.manifestations = accum.manifestations.concat(manifestations)\r\n      return accum\r\n    }\r\n\r\n    if (txt.endsWith(ALLY_SUFFIX)) {\r\n      const alliedUnit = txt.replace(ALLY_SUFFIX, '').trim()\r\n      allyUnits.push(alliedUnit)\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(COMMAND_TRAITS_PREFIX)) {\r\n      const trait = txt.replace(COMMAND_TRAITS_PREFIX, '').trim()\r\n      accum.command_traits.push(trait)\r\n      return accum\r\n    }\r\n\r\n    if (txt.startsWith(MOUNT_TRAITS_PREFIX)) {\r\n      const trait = txt.replace(MOUNT_TRAITS_PREFIX, '').trim()\r\n      accum.mount_traits.push(trait)\r\n      return accum\r\n    }\r\n\r\n    // Add item to accum\r\n    if (selector) {\r\n      if (selector === 'units' || selector === 'battalions') {\r\n        const battalion = battalionNames.find(name => name === txt.trim())\r\n\r\n        if (battalion) {\r\n          accum.battalions = uniq(accum.battalions.concat(battalion))\r\n          // TODO: Check for \"Magnificent Bonus: blah blah\" afterwards\r\n          return accum\r\n        } else {\r\n          selector = 'units'\r\n        }\r\n      }\r\n\r\n      accum[selector] = uniq(accum[selector].concat(txt.trim()))\r\n    }\r\n\r\n    return accum\r\n  }, initialSelections)\r\n\r\n  return {\r\n    allyFactionNames: [],\r\n    allySelections: {},\r\n    allyUnits: uniq(allyUnits),\r\n    errors: [],\r\n    factionName: factionName as TSupportedFaction,\r\n    origin_realm,\r\n    realmscape_feature: null,\r\n    realmscape: null,\r\n    selections,\r\n    subFactionName,\r\n    unknownSelections: [],\r\n  }\r\n}\r\n","import { PreferenceApi } from 'api/preferenceApi'\r\nimport GenericButton from 'components/input/generic_button'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useTheme } from 'context/useTheme'\r\nimport { useState } from 'react'\r\nimport { IImportedArmy, TXT_FILE, WARHAMMER_APP } from 'types/import'\r\nimport { logEvent } from 'utils/analytics'\r\nimport { isValidFactionName } from 'utils/armyUtils'\r\nimport { hasErrorOrWarning } from 'utils/import/warnings'\r\nimport { getWarhammerAppArmy } from 'utils/warhammer_app/getWarhammerAppArmy'\r\nimport { warhammerAppPlaceholders } from 'utils/warhammer_app/warhammerAppUtils'\r\n\r\ninterface IImportTextAreaProps {\r\n  handleDrop: (army: IImportedArmy) => void\r\n}\r\n\r\nexport const ImportTextarea = ({ handleDrop }: IImportTextAreaProps) => {\r\n  const { isOnline } = useAppStatus()\r\n  const { isDark } = useTheme()\r\n  const [text, setText] = useState('')\r\n  const [isImporting, setIsImporting] = useState(false)\r\n\r\n  const isFromAoSListCleaner = text.includes('Made with AoS App List Cleaner')\r\n\r\n  const canImport =\r\n    text &&\r\n    !isFromAoSListCleaner &&\r\n    (text.includes(warhammerAppPlaceholders.CREATED_BY_WARHAMMER_APP) ||\r\n      text.startsWith('Army Name: ') ||\r\n      text.includes('Army Type: ') ||\r\n      text.includes('Battalion Slot Filled: ') ||\r\n      text.includes('Battlepack: '))\r\n\r\n  const handleImport = () => {\r\n    setIsImporting(true) // Start the spinner\r\n\r\n    // Parse the text and then send it back as an army\r\n    const army = getWarhammerAppArmy(text)\r\n\r\n    if (isOnline && hasErrorOrWarning(army.errors)) {\r\n      const payload = {\r\n        fileTxt: text,\r\n        parser: WARHAMMER_APP,\r\n        fileType: TXT_FILE,\r\n      }\r\n      Promise.resolve(PreferenceApi.createErrorFile(payload))\r\n    }\r\n\r\n    if (isOnline && isValidFactionName(army.factionName)) {\r\n      logEvent(`Import${WARHAMMER_APP}-${army.factionName}`)\r\n    }\r\n\r\n    setTimeout(() => setIsImporting(false), 1000) // Stop the spinner after a second\r\n\r\n    return handleDrop(army)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div className=\"form-group\">\r\n            <textarea\r\n              name=\"ImportTextarea\"\r\n              id=\"ImportTextarea\"\r\n              className={`form-control ImportTextarea${isDark ? '-Dark' : ''} ${\r\n                text && !canImport ? 'is-invalid' : ''\r\n              }`}\r\n              placeholder={'Or paste your Warhammer App list here'}\r\n              onChange={e => {\r\n                e.preventDefault()\r\n                setText(e.target.value)\r\n              }}\r\n              value={text}\r\n            />\r\n          </div>\r\n        </div>\r\n        {canImport && (\r\n          <div className=\"col-12 pb-3\">\r\n            <GenericButton\r\n              className={`btn ${isDark ? `btn-outline-light` : ``} btn-success btn-block`}\r\n              type=\"button\"\r\n              onClick={handleImport}\r\n            >\r\n              {`Import${isImporting ? 'ing' : ''} `}\r\n              {isImporting ? (\r\n                <span\r\n                  className=\"spinner-border spinner-border-sm ml-2\"\r\n                  role=\"status\"\r\n                  aria-hidden=\"true\"\r\n                ></span>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </GenericButton>\r\n          </div>\r\n        )}\r\n        {text && !canImport && (\r\n          <div className=\"col-12 text-center\">\r\n            <small className={'text-danger'}>\r\n              {isFromAoSListCleaner\r\n                ? \"We don't support lists from AoS App List Cleaner, sorry.\"\r\n                : \"This doesn't look like a list from the Warhammer App.\"}\r\n            </small>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { LinkNewTab } from 'components/helpers/link'\r\nimport GenericButton from 'components/input/generic_button'\r\nimport ImportDropzone from 'components/input/importPdf/drop_zone'\r\nimport { useSavedArmies } from 'context/useSavedArmies'\r\nimport { useSubscription } from 'context/useSubscription'\r\nimport { useCallback, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { IImportedArmy, TImportError } from 'types/import'\r\nimport { logClick } from 'utils/analytics'\r\nimport { GITHUB_URL, ROUTES } from 'utils/env'\r\nimport { hasFatalError } from 'utils/import/warnings'\r\nimport { addArmyToStore } from 'utils/loadArmy/loadArmyHelpers'\r\nimport { ImportTextarea } from './textarea'\r\n\r\nconst ImportContainer = () => {\r\n  const [errors, setErrors] = useState<IImportedArmy['errors']>([])\r\n  const { isSubscribed } = useSubscription()\r\n  const { saveArmyToS3 } = useSavedArmies()\r\n\r\n  const handleDrop = useCallback(\r\n    (army: IImportedArmy) => {\r\n      setErrors(army.errors)\r\n      // Can't proceed if there's an error (usually an unsupported faction)\r\n      if (hasFatalError(army.errors)) return\r\n      addArmyToStore(army)\r\n      saveArmyToS3(army)\r\n    },\r\n    [saveArmyToS3]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row my-2 d-flex justify-content-center\">\r\n        <div className={'col-12 col-lg-9 col-xl-9 px-1'}>\r\n          <div className=\"row my-2 d-flex justify-content-center align-content-center\">\r\n            <div className={'col-12 col-lg-6'}>\r\n              <ImportDropzone handleDrop={handleDrop} />\r\n            </div>\r\n            <div className={'col-12 col-lg-6 pt-2 pt-lg-0'}>\r\n              <ImportTextarea handleDrop={handleDrop} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {!isSubscribed && <InfoAlert />}\r\n\r\n      {errors.length > 0 && (\r\n        <div className=\"row d-flex justify-content-center\">\r\n          <div className={'col-12 col-lg-6 col-xl-6'}>\r\n            {errors.map((x, i) => (\r\n              <ErrorAlert key={`${x.text}_${i}`} text={x.text} severity={x.severity} reason={x.reason} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ImportContainer\r\n\r\nconst ErrorAlert = (props: TImportError) => {\r\n  const { text, reason, severity } = props\r\n  const [isOn, setIsOn] = useState(true)\r\n\r\n  if (!isOn) return null\r\n\r\n  const alertType = {\r\n    'ally-warn': 'alert-warning',\r\n    'ambiguity-warn': 'alert-warning',\r\n    'deprecation-warn': 'alert-warning',\r\n    warn: 'alert-warning',\r\n    error: 'alert-danger',\r\n  }[severity]\r\n\r\n  const prefix = severity === 'error' ? `Error` : `Warning`\r\n\r\n  const messages = {\r\n    error: `${text}`,\r\n    'ally-warn': `${text}`,\r\n    'ambiguity-warn': `${text}`,\r\n    'deprecation-warn': `'${text}' has been removed from AoS Reminders because ${reason}.`,\r\n    warn: `We couldn't find '${text}'. It may be a typo or an ally item. Make sure to add it manually.`,\r\n  }\r\n  const info = messages[severity]\r\n\r\n  return (\r\n    <div className=\"mb-2\">\r\n      <div className={`alert ${alertType} text-center fade show d-flex`} role=\"alert\">\r\n        <div className={`flex-grow-1`}>\r\n          <strong>{prefix}:</strong> {info}\r\n          <br />\r\n          <small>\r\n            Unexpected {prefix.toLowerCase()}? Create an issue on{' '}\r\n            <LinkNewTab\r\n              href={`${GITHUB_URL}/issues`}\r\n              onClick={e => logClick(`failedImport-GithubClick`)}\r\n              label={'Github'}\r\n            >\r\n              Github\r\n            </LinkNewTab>{' '}\r\n            and be sure to attach this file.\r\n          </small>\r\n        </div>\r\n        <div className={`align-self-start ml-2`}>\r\n          <GenericButton className=\"close\" aria-label=\"Close\" onClick={() => setIsOn(false)}>\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </GenericButton>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst InfoAlert = () => (\r\n  <div className=\"row mt-2 d-flex justify-content-center\">\r\n    <div className={'col-12 col-lg-6 col-xl-6'}>\r\n      <div className={`alert alert-info text-center`} role=\"alert\">\r\n        <small>\r\n          Heads up! This will eventually be a <Link to={ROUTES.SUBSCRIBE}>subscriber-only</Link> feature.\r\n        </small>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n"],"sourceRoot":""}