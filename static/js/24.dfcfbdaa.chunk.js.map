{"version":3,"sources":["../../../Warhammer/AOS Reminders/src/components/modals/generic/generic_modal.tsx","../../../Warhammer/AOS Reminders/src/components/modals/generic/generic_destructive_modal.tsx","../../../Warhammer/AOS Reminders/src/components/info/visibilityToggle.tsx","../../../Warhammer/AOS Reminders/src/utils/hooks/useGetArmy.tsx","../../../Warhammer/AOS Reminders/src/components/input/ally_army_builder.tsx","../../../Warhammer/AOS Reminders/src/components/input/ally_armies.tsx"],"names":["Modal","setAppElement","GenericModal","props","children","closeModal","isOpen","label","isProcessing","isDark","useTheme","modalClassName","concat","_jsx","className","contentLabel","onRequestClose","overlayClassName","_jsxs","ModalSpinner","hidden","_ref","variant","Spinner","size","GenericDestructiveModal","bodyText","confirmText","denyText","headerText","onConfirm","onConfirmAsync","onDeny","theme","setIsProcessing","useState","btnReponsiveClass","text","GenericButton","modalDangerClass","onClick","async","e","preventDefault","err","console","error","FaCheck","modalConfirmClass","icons","clear","visible","MdClear","MdAdd","eye","MdVisibility","MdVisibilityOff","fold","MdUnfoldLess","MdUnfoldMore","minus","MdRemove","MdExpandMore","VisibilityToggle","isVisible","setVisibility","type","appearance","withConfirmation","icon","VisibilityComponent","modalIsOpen","setModalIsOpen","handleClick","handleSetVisibility","useCallback","_e$preventDefault","call","_Fragment","IconContext","Provider","value","Dropdown","Item","useGetArmy","factionName","subFactionName","origin_realm","realmscape","useSelector","selectRealmscapeSlice","useMemo","getArmy","deleteAllyArmy","switchAllyArmy","updateAllyArmy","armyActions","deleteAllySelection","resetAllySelection","updateAllyBattalions","updateAllyUnits","selectionActions","deleteAlly","hideAlly","addAlly","showAlly","visibilityActions","AllyArmyBuilder","allyFactionName","allySelectOptions","dispatch","useDispatch","allySelections","selectors","selectAllySelections","selectFactionName","visibleAllies","selectAllies","isOnline","useAppStatus","units","battalions","allyArmy","handleUnits","withSelectMultipleWithPayload","handleBattalions","handleSetAllyFactionName","withSelectOne","next","logAllyFaction","prev","handleClose","useEffect","Army","find","a","AllyCardComponent","battalionItems","sortBy","Battalions","battalionValues","setAllyFactionName","setBattalions","setUnits","unitItems","Units","unitValues","selectBattalionItems","map","_ref2","name","selectUnitItems","_ref3","selectClass","card","FaTrashAlt","AddAllySelect","items","titleCase","cardBody","SelectMulti","values","setValues","isClearable","log","title","length","SelectOne","hasDefault","setValue","toTitle","AlliedArmies","allyFactionNames","selectAllyFactionNames","without","SUPPORTED_FACTIONS"],"mappings":"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","file":"static/js/24.dfcfbdaa.chunk.js","sourcesContent":["import Spinner from 'components/helpers/spinner'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React from 'react'\r\nimport Modal from 'react-modal'\r\n\r\ninterface IGenericModalProps {\r\n  isProcessing?: boolean\r\n  isOpen: boolean\r\n  closeModal: () => void\r\n  label: string\r\n}\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst GenericModal = (props: React.PropsWithChildren<IGenericModalProps>) => {\r\n  const { children, closeModal, isOpen, label, isProcessing = false } = props\r\n  const { isDark } = useTheme()\r\n\r\n  const themeType = isDark ? 'Dark' : 'Light'\r\n  const modalClassName = `Modal-${isProcessing ? `Transparent` : themeType}`\r\n\r\n  return (\r\n    <Modal\r\n      className={modalClassName}\r\n      contentLabel={label}\r\n      isOpen={isOpen}\r\n      onRequestClose={closeModal}\r\n      overlayClassName={'Modal-Overlay'}\r\n    >\r\n      <div className={`container`}>\r\n        {isProcessing && <ModalSpinner />}\r\n        <div hidden={isProcessing}>{children}</div>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default GenericModal\r\n\r\nconst ModalSpinner = ({ isDark = false }) => {\r\n  const variant = isDark ? 'light-gray' : 'dark'\r\n  return (\r\n    <div className={`d-flex flex-row justify-content-center`}>\r\n      <Spinner variant={variant} size=\"large\" />\r\n    </div>\r\n  )\r\n}\r\n","import GenericButton from 'components/input/generic_button'\r\nimport GenericModal from 'components/modals/generic/generic_modal'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useState } from 'react'\r\nimport { FaCheck } from 'react-icons/fa'\r\n\r\ninterface IModalComponentProps {\r\n  closeModal: () => any\r\n  confirmText?: string\r\n  denyText?: string\r\n  isOpen: boolean\r\n  onConfirmAsync?: () => Promise<any>\r\n  onConfirm?: () => any\r\n  onDeny?: () => any\r\n  headerText: string\r\n  bodyText?: string\r\n}\r\n\r\n/**\r\n * A re-usable generic confirmation modal component\r\n *\r\n * Ask if we really want to do a destructive action.\r\n *\r\n * @param props\r\n */\r\nconst GenericDestructiveModal = (props: React.PropsWithChildren<IModalComponentProps>) => {\r\n  const {\r\n    bodyText = '',\r\n    children,\r\n    closeModal,\r\n    confirmText = 'Confirm',\r\n    denyText = 'Cancel',\r\n    headerText,\r\n    isOpen,\r\n    onConfirm = null,\r\n    onConfirmAsync = null,\r\n    onDeny = null,\r\n  } = props\r\n  const { theme } = useTheme()\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n  const handleConfirm = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (onConfirmAsync) {\r\n      try {\r\n        setIsProcessing(true)\r\n        await onConfirmAsync()\r\n      } catch (err) {\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    if (onConfirm) onConfirm()\r\n\r\n    closeModal()\r\n  }\r\n\r\n  const handleDeny = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (onDeny) onDeny()\r\n    closeModal()\r\n  }\r\n\r\n  const btnReponsiveClass = `mx-2 mx-sm-1`\r\n\r\n  return (\r\n    <GenericModal\r\n      isOpen={isOpen}\r\n      isProcessing={isProcessing}\r\n      closeModal={closeModal}\r\n      label={`${headerText} Confirmation Modal`}\r\n    >\r\n      <div className=\"flex-row\">\r\n        <div className={`col ${theme.text} text-center`}>\r\n          <h4 className=\"mb-3\">{headerText}</h4>\r\n          {bodyText && <p className=\"mb-3\">{bodyText}</p>}\r\n          {children ? <div className={`mb-3`}>{children}</div> : null}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex flex-row justify-content-around\">\r\n        <GenericButton className={`${theme.modalDangerClass} ${btnReponsiveClass}`} onClick={handleConfirm}>\r\n          <FaCheck className=\"mr-2\" /> {confirmText}\r\n        </GenericButton>\r\n        <GenericButton className={`${theme.modalConfirmClass} ${btnReponsiveClass}`} onClick={handleDeny}>\r\n          {denyText}\r\n        </GenericButton>\r\n      </div>\r\n    </GenericModal>\r\n  )\r\n}\r\n\r\nexport default GenericDestructiveModal\r\n","import GenericDestructiveModal from 'components/modals/generic/generic_destructive_modal'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { Dropdown } from 'react-bootstrap'\r\nimport { IconContext, IconType } from 'react-icons'\r\nimport {\r\n  MdAdd,\r\n  MdClear,\r\n  MdExpandMore,\r\n  MdRemove,\r\n  MdUnfoldLess,\r\n  MdUnfoldMore,\r\n  MdVisibility,\r\n  MdVisibilityOff,\r\n} from 'react-icons/md'\r\n\r\nexport type TVisibilityIconType = 'clear' | 'eye' | 'fold' | 'minus'\r\n\r\ninterface IVisibilityToggleProps {\r\n  appearance?: 'icon' | 'menuItem'\r\n  className?: string\r\n  isVisible: boolean\r\n  text?: string\r\n  setVisibility?: () => void\r\n  size?: number\r\n  type?: TVisibilityIconType\r\n  withConfirmation?: boolean\r\n}\r\n\r\nconst icons: Record<TVisibilityIconType, { visible: IconType; hidden: IconType }> = {\r\n  clear: {\r\n    visible: MdClear,\r\n    hidden: MdAdd,\r\n  },\r\n  eye: {\r\n    visible: MdVisibility,\r\n    hidden: MdVisibilityOff,\r\n  },\r\n  fold: {\r\n    visible: MdUnfoldLess,\r\n    hidden: MdUnfoldMore,\r\n  },\r\n  minus: {\r\n    visible: MdRemove,\r\n    hidden: MdExpandMore,\r\n  },\r\n}\r\n\r\nexport const VisibilityToggle = (props: IVisibilityToggleProps) => {\r\n  const {\r\n    isVisible,\r\n    setVisibility,\r\n    size = 1.4,\r\n    type = 'eye',\r\n    appearance = 'icon',\r\n    text = '',\r\n    className = '',\r\n    withConfirmation = false,\r\n  } = props\r\n  const { theme } = useTheme()\r\n\r\n  const icon = icons[type]\r\n  const VisibilityComponent = isVisible ? icon.visible : icon.hidden\r\n  const [modalIsOpen, setModalIsOpen] = useState(false)\r\n\r\n  const openModal = () => setModalIsOpen(true)\r\n  const closeModal = () => setModalIsOpen(false)\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    withConfirmation ? openModal() : handleSetVisibility(e)\r\n  }\r\n\r\n  const handleSetVisibility = useCallback(\r\n    (e?: React.MouseEvent) => {\r\n      e?.preventDefault?.()\r\n      setVisibility?.()\r\n    },\r\n    [setVisibility]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {appearance === 'icon' && (\r\n        <IconContext.Provider value={{ size: `${size}em`, className: className || theme.text }}>\r\n          <VisibilityComponent onClick={handleClick} />\r\n        </IconContext.Provider>\r\n      )}\r\n      {appearance === 'menuItem' && (\r\n        <Dropdown.Item className={className} onClick={handleClick}>\r\n          {isVisible ? `Hide` : `Show`}\r\n          {text && ` ${text}`}\r\n        </Dropdown.Item>\r\n      )}\r\n      {modalIsOpen && (\r\n        <GenericDestructiveModal\r\n          closeModal={closeModal}\r\n          confirmText={'Hide'}\r\n          isOpen={modalIsOpen}\r\n          onConfirm={handleSetVisibility}\r\n          headerText={'Hide Rule?'}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { selectRealmscapeSlice } from 'ducks/selectors'\r\nimport { TSupportedFaction } from 'meta/factions'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { IArmy } from 'types/army'\r\nimport { getArmy } from 'utils/getArmy/getArmy'\r\n\r\nconst useGetArmy = (factionName: TSupportedFaction, subFactionName?: string) => {\r\n  const { origin_realm, realmscape } = useSelector(selectRealmscapeSlice)\r\n  const army = useMemo(\r\n    () => getArmy(factionName, subFactionName || null, origin_realm, realmscape),\r\n    [factionName, origin_realm, realmscape, subFactionName]\r\n  )\r\n  return army as IArmy\r\n}\r\n\r\nexport default useGetArmy\r\n","import { VisibilityToggle } from 'components/info/visibilityToggle'\r\nimport { SelectMulti, SelectOne, TSelectMultiSetValueFn, TSelectOneSetValueFn } from 'components/input/select'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useTheme } from 'context/useTheme'\r\nimport { armyActions, selectionActions, selectors, visibilityActions } from 'ducks'\r\nimport { sortBy } from 'lodash'\r\nimport { TSupportedFaction } from 'meta/factions'\r\nimport React, { useCallback, useEffect, useMemo } from 'react'\r\nimport { IconContext } from 'react-icons'\r\nimport { FaTrashAlt } from 'react-icons/fa'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { TEntry } from 'types/data'\r\nimport { IAllySelections } from 'types/selections'\r\nimport { logAllyFaction } from 'utils/analytics'\r\nimport useGetArmy from 'utils/hooks/useGetArmy'\r\nimport { titleCase } from 'utils/textUtils'\r\nimport { withSelectMultipleWithPayload, withSelectOne } from 'utils/withSelect'\r\n\r\nconst { deleteAllyArmy, switchAllyArmy, updateAllyArmy } = armyActions\r\nconst { deleteAllySelection, resetAllySelection, updateAllyBattalions, updateAllyUnits } = selectionActions\r\nconst { deleteAlly: hideAlly, addAlly: showAlly } = visibilityActions\r\n\r\ninterface IAllyArmyBuilderProps {\r\n  allyFactionName: TSupportedFaction\r\n  allySelectOptions: TSupportedFaction[]\r\n}\r\n\r\nexport const AllyArmyBuilder = ({ allyFactionName, allySelectOptions }: IAllyArmyBuilderProps) => {\r\n  const dispatch = useDispatch()\r\n  const allySelections = useSelector(selectors.selectAllySelections)\r\n  const factionName = useSelector(selectors.selectFactionName)\r\n  const visibleAllies = useSelector(selectors.selectAllies)\r\n\r\n  const { isOnline } = useAppStatus()\r\n\r\n  const { units = [], battalions = [] } = allySelections[allyFactionName] as IAllySelections\r\n\r\n  const allyArmy = useGetArmy(allyFactionName)\r\n\r\n  const handleUnits = withSelectMultipleWithPayload(updateAllyUnits, 'units', {\r\n    factionName: allyFactionName,\r\n  })\r\n\r\n  const handleBattalions = withSelectMultipleWithPayload(updateAllyBattalions, 'battalions', {\r\n    factionName: allyFactionName,\r\n  })\r\n\r\n  const handleSetAllyFactionName = withSelectOne((value: string | null) => {\r\n    const next = value as TSupportedFaction\r\n    dispatch(deleteAllySelection(allyFactionName))\r\n    dispatch(hideAlly(allyFactionName))\r\n    dispatch(resetAllySelection(next))\r\n    if (isOnline) logAllyFaction(next)\r\n    dispatch(switchAllyArmy({ prev: allyFactionName, next }))\r\n    dispatch(showAlly(next))\r\n  })\r\n\r\n  const handleClose = useCallback(\r\n    (e: React.MouseEvent) => {\r\n      e.preventDefault()\r\n      dispatch(deleteAllySelection(allyFactionName))\r\n      dispatch(deleteAllyArmy(allyFactionName))\r\n      dispatch(hideAlly(allyFactionName))\r\n    },\r\n    [allyFactionName, dispatch]\r\n  )\r\n\r\n  useEffect(() => {\r\n    dispatch(updateAllyArmy({ factionName: allyFactionName, Army: allyArmy }))\r\n  }, [allyArmy, allyFactionName, dispatch])\r\n\r\n  const isVisible = useMemo(\r\n    () => !!visibleAllies.find(a => a === allyFactionName),\r\n    [allyFactionName, visibleAllies]\r\n  )\r\n\r\n  // Show ally when first clicked\r\n  useEffect(() => {\r\n    dispatch(showAlly(allyFactionName))\r\n  }, [allyFactionName, dispatch])\r\n\r\n  const setVisibility = useCallback(\r\n    () => dispatch(isVisible ? hideAlly(allyFactionName) : showAlly(allyFactionName)),\r\n    [isVisible, allyFactionName, dispatch]\r\n  )\r\n\r\n  return (\r\n    <div className=\"col-12 col-sm-12 col-md-6 col-lg-4 col-xl-4 pb-2\">\r\n      <AllyCardComponent\r\n        allyFactionName={allyFactionName}\r\n        allySelectOptions={allySelectOptions}\r\n        battalionItems={sortBy(allyArmy.Battalions, 'name')}\r\n        battalionValues={battalions}\r\n        factionName={factionName}\r\n        handleClose={handleClose}\r\n        isVisible={isVisible}\r\n        setAllyFactionName={handleSetAllyFactionName}\r\n        setBattalions={handleBattalions}\r\n        setUnits={handleUnits}\r\n        setVisibility={setVisibility}\r\n        unitItems={sortBy(allyArmy.Units, 'name')}\r\n        unitValues={units}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface IAllyCardProps {\r\n  allyFactionName: TSupportedFaction\r\n  allySelectOptions: TSupportedFaction[]\r\n  battalionItems: TEntry[]\r\n  battalionValues: string[]\r\n  factionName: TSupportedFaction\r\n  handleClose: (e: React.MouseEvent) => void\r\n  isVisible: boolean\r\n  setAllyFactionName: TSelectOneSetValueFn\r\n  setBattalions: TSelectMultiSetValueFn\r\n  setUnits: TSelectMultiSetValueFn\r\n  setVisibility: () => {\r\n    payload: string\r\n    type: string\r\n  }\r\n  unitItems: TEntry[]\r\n  unitValues: string[]\r\n}\r\n\r\nconst AllyCardComponent = (props: IAllyCardProps) => {\r\n  const {\r\n    allyFactionName,\r\n    allySelectOptions,\r\n    battalionItems,\r\n    battalionValues,\r\n    factionName,\r\n    handleClose,\r\n    isVisible,\r\n    setAllyFactionName,\r\n    setBattalions,\r\n    setUnits,\r\n    setVisibility,\r\n    unitItems,\r\n    unitValues,\r\n  } = props\r\n  const { theme } = useTheme()\r\n\r\n  const selectBattalionItems = battalionItems.map(({ name }) => name)\r\n  const selectUnitItems = unitItems.map(({ name }) => name)\r\n  const selectClass = `flex-grow-1 ${!isVisible ? `text-center` : ``}`\r\n  const headerClass = `card-header bg-secondary pt-1 pb-2`\r\n\r\n  return (\r\n    <div className={theme.card}>\r\n      <div className={headerClass}>\r\n        <div className=\"row d-flex justify-content-center align-items-center pt-2 px-2\">\r\n          <div className=\"pr-2\">\r\n            <IconContext.Provider value={{ size: '1.25em', className: `text-white` }}>\r\n              <FaTrashAlt onClick={handleClose} />\r\n            </IconContext.Provider>\r\n          </div>\r\n          <div className={selectClass}>\r\n            {isVisible ? (\r\n              <AddAllySelect\r\n                allyFactionName={allyFactionName}\r\n                items={allySelectOptions}\r\n                setAllyFactionName={setAllyFactionName}\r\n              />\r\n            ) : (\r\n              <h5 className={`CardHeaderTitle text-white`}>Ally: {titleCase(allyFactionName)}</h5>\r\n            )}\r\n          </div>\r\n          <div className=\"pl-3\">\r\n            <VisibilityToggle\r\n              isVisible={isVisible}\r\n              setVisibility={setVisibility}\r\n              className={`text-white`}\r\n              type={'minus'}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={`${theme.cardBody} py-3 ${isVisible ? `` : `d-none`}`}>\r\n        <h5 className={`text-center ${theme.text}`}>Allied Units</h5>\r\n        <SelectMulti\r\n          values={unitValues}\r\n          items={selectUnitItems}\r\n          setValues={setUnits}\r\n          isClearable={true}\r\n          log={{ title: 'AlliedUnits', label: factionName }}\r\n        />\r\n        {selectBattalionItems.length > 0 && (\r\n          <>\r\n            <h5 className={`text-center ${theme.text} mt-2`}>Allied Battalions</h5>\r\n            <SelectMulti\r\n              values={battalionValues}\r\n              items={selectBattalionItems}\r\n              setValues={setBattalions}\r\n              isClearable={true}\r\n              log={{ title: 'AlliedBattalions', label: factionName }}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface IAddAllySelect {\r\n  allyFactionName: TSupportedFaction\r\n  items: TSupportedFaction[]\r\n  setAllyFactionName: TSelectOneSetValueFn\r\n}\r\n\r\nconst AddAllySelect = (props: IAddAllySelect) => {\r\n  const { setAllyFactionName, items, allyFactionName } = props\r\n  return (\r\n    <>\r\n      <SelectOne\r\n        hasDefault={true}\r\n        items={items}\r\n        setValue={setAllyFactionName}\r\n        toTitle={true}\r\n        value={titleCase(allyFactionName)}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { AllyArmyBuilder } from 'components/input/ally_army_builder'\r\nimport { selectors } from 'ducks'\r\nimport { without } from 'lodash'\r\nimport { SUPPORTED_FACTIONS } from 'meta/factions'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst AlliedArmies = () => {\r\n  const allyFactionNames = useSelector(selectors.selectAllyFactionNames)\r\n  const factionName = useSelector(selectors.selectFactionName)\r\n  const allySelectOptions = useMemo(() => without(SUPPORTED_FACTIONS, factionName), [factionName])\r\n\r\n  return (\r\n    <div className=\"container d-print-none\">\r\n      <div className=\"row d-flex justify-content-center\">\r\n        {allyFactionNames.map(allyFactionName => (\r\n          <AllyArmyBuilder\r\n            allyFactionName={allyFactionName}\r\n            allySelectOptions={allySelectOptions}\r\n            key={allyFactionName}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AlliedArmies\r\n"],"sourceRoot":""}