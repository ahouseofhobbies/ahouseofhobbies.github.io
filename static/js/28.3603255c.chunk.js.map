{"version":3,"sources":["components/info/banners/notification_banner.tsx","components/info/banners/app_banner.tsx"],"names":["NotificationBanner","props","children","displayOnce","enableLog","name","persistClose","variant","isHidden","getNotificationBanner","isOn","setIsOn","useState","useEffect","logDisplay","hideNotificationBanner","_jsxs","className","concat","role","_jsx","centerContentClass","GenericButton","onClick","handleClose","logClick","AppBanner","isDark","useTheme","href"],"mappings":"uHAAA,oFAoBO,MAAMA,EAAsBC,IACjC,MAAM,SACJC,EAAQ,YACRC,GAAc,EAAK,UACnBC,GAAY,EAAK,KACjBC,EAAI,aACJC,GAAe,EAAI,QACnBC,EAAU,WACRN,EACEO,KAAWF,IAAgBH,IAA8C,WAAhCM,YAAsBJ,IAC9DK,EAAMC,GAAWC,oBAAUJ,GAelC,OAPAK,qBAAU,KACJT,GAAaM,GAAMI,YAAWT,GAC3B,KACDF,GAAeO,GAAMK,YAAuBV,EAAK,KAIpDK,EAGHM,eAAA,OAAKC,UAAS,eAAAC,OAAiBX,EAAO,mDAAmDY,KAAK,QAAOjB,SAAA,CACnGkB,cAAA,OAAKH,UAAS,eAAAC,OAAiBG,KAAqBnB,SAAEA,IACtDkB,cAAA,OAAKH,UAAS,wBAA0Bf,SACtCkB,cAACE,IAAa,CAACL,UAAU,QAAQ,aAAW,QAAQM,QAnBtCC,KAClBb,GAAQ,GACJL,GAAcS,YAAuBV,GACrCD,GAAWqB,YAAS,SAADP,OAAUb,GAAO,EAgBqCH,SACvEkB,cAAA,QAAM,cAAY,OAAMlB,SAAC,gBAPf,IAUV,C,mCCvDV,mCAsDewB,UAnDGA,KAChB,MAAM,OAAEC,GAAWC,cAGnB,OACER,cAACpB,IAAkB,CACjBG,aAAa,EACbC,WAAW,EACXC,KANS,eAOTC,cAAc,EACdC,QAAe,UAAyBL,SAExCc,eAAA,QAAAd,SAAA,CAAM,sBACekB,cAAA,UAAAlB,SAAQ,QAAY,kFAClBkB,cAAA,KAAGS,KAAK,WAAU3B,SAAC,uBAEvB,C","file":"static/js/28.3603255c.chunk.js","sourcesContent":["import GenericButton from 'components/input/generic_button'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { centerContentClass } from 'theme/helperClasses'\r\nimport { TBootstrapTypes } from 'types/theme'\r\nimport { logClick, logDisplay } from 'utils/analytics'\r\nimport { getNotificationBanner, hideNotificationBanner } from 'utils/localStore'\r\n\r\ninterface IBannerProps {\r\n  displayOnce?: boolean\r\n  enableLog?: boolean\r\n  name: string\r\n  persistClose?: boolean\r\n  variant?: TBootstrapTypes\r\n}\r\n\r\n/**\r\n * Re-usable component that can broadcast application notifications\r\n * Can be hidden - will be stored in local storage\r\n * @param props\r\n */\r\nexport const NotificationBanner = (props: React.PropsWithChildren<IBannerProps>) => {\r\n  const {\r\n    children,\r\n    displayOnce = false,\r\n    enableLog = false,\r\n    name,\r\n    persistClose = true,\r\n    variant = 'primary',\r\n  } = props\r\n  const isHidden = persistClose || displayOnce ? getNotificationBanner(name) === 'hidden' : false\r\n  const [isOn, setIsOn] = useState(!isHidden)\r\n\r\n  const handleClose = () => {\r\n    setIsOn(false)\r\n    if (persistClose) hideNotificationBanner(name)\r\n    if (enableLog) logClick(`Close-${name}`)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (enableLog && isOn) logDisplay(name)\r\n    return () => {\r\n      if (displayOnce && isOn) hideNotificationBanner(name)\r\n    }\r\n  })\r\n\r\n  if (!isOn) return null\r\n\r\n  return (\r\n    <div className={`alert alert-${variant} text-center fade show d-flex my-0 d-print-none`} role=\"alert\">\r\n      <div className={`flex-grow-1 ${centerContentClass}`}>{children}</div>\r\n      <div className={`align-self-start ml-2`}>\r\n        <GenericButton className=\"close\" aria-label=\"Close\" onClick={handleClose}>\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </GenericButton>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { NotificationBanner } from 'components/info/banners/notification_banner'\r\nimport { useTheme } from 'context/useTheme'\r\n\r\nconst AppBanner = () => {\r\n  const { isDark } = useTheme()\r\n  const name = '2024-goodbye'\r\n\r\n  return (\r\n    <NotificationBanner\r\n      displayOnce={false}\r\n      enableLog={true}\r\n      name={name}\r\n      persistClose={true}\r\n      variant={isDark ? `warning` : `warning`}\r\n    >\r\n      <span>\r\n        AoS Reminders will <strong>not</strong> be updated to AoS 4th Edition. This website is no longer\r\n        actively maintained. <a href=\"/goodbye\">Read more here</a>\r\n      </span>\r\n    </NotificationBanner>\r\n  )\r\n}\r\n\r\n// Sale Banner\r\n// const AppBanner = () => {\r\n//   const { isDark } = useTheme()\r\n//   const { isNotSubscribed } = useSubscription()\r\n//   const name = 'Paypal_Launch_2020'\r\n\r\n//   const subscribeTxt = <>You can now subscribe using PayPal!</>\r\n\r\n//   useEffect(() => {\r\n//     logDisplay(name)\r\n//   }, [])\r\n\r\n//   // Only display to non-subscribers\r\n//   if (!isNotSubscribed) return <></>\r\n\r\n//   return (\r\n//     <NotificationBanner\r\n//       displayOnce={true}\r\n//       enableLog={true}\r\n//       name={name}\r\n//       persistClose={true}\r\n//       variant={isDark ? `dark` : `secondary`}\r\n//     >\r\n//       WAAAGH!&nbsp;\r\n//       <Link to={ROUTES.SUBSCRIBE} onClick={() => logClick(name)}>\r\n//         {subscribeTxt}\r\n//       </Link>\r\n//     </NotificationBanner>\r\n//   )\r\n// }\r\n\r\nexport default AppBanner\r\n"],"sourceRoot":""}