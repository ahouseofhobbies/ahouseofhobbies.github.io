{"version":3,"sources":["../../../Warhammer/AOS Reminders/src/components/modals/generic/generic_modal.tsx","../../../Warhammer/AOS Reminders/src/utils/openPopup.ts","../../../Warhammer/AOS Reminders/src/utils/hooks/useLogin.tsx","../../../Warhammer/AOS Reminders/src/components/modals/generic/generic_two_button_modal.tsx","../../../Warhammer/AOS Reminders/src/components/modals/subscriber_only_modal.tsx","../../../Warhammer/AOS Reminders/src/components/input/savedArmies/saved_army_table.tsx","../../../Warhammer/AOS Reminders/src/components/modals/save_army_modal.tsx","../../../Warhammer/AOS Reminders/src/components/input/savedArmies/save_army_btn.tsx"],"names":["Modal","setAppElement","GenericModal","props","children","closeModal","isOpen","label","isProcessing","isDark","useTheme","modalClassName","concat","_jsx","className","contentLabel","onRequestClose","overlayClassName","_jsxs","ModalSpinner","hidden","_ref","variant","Spinner","size","openPopup","left","window","screenX","innerWidth","top","screenY","innerHeight","open","undefined","useLogin","isLoading","loginWithPopup","useAuth0","popupIsClosed","setPopupIsClosed","useState","useMemo","isLoggingIn","login","e","_e$preventDefault","preventDefault","call","logClick","origin","popup","timer","setInterval","closed","clearInterval","logEvent","onPopupClose","authorizationParams","redirect_uri","location","href","GenericTwoButtonModal","theme","setIsProcessing","bodyText","confirmBtnClass","modalDangerClass","confirmText","denyBtnClass","modalConfirmClass","denyText","disableConfirmIcon","headerText","onConfirm","onConfirmAsync","onDeny","ConfirmIcon","confirmIcon","FaCheck","text","GenericButton","onClick","async","err","console","error","SubscriberOnlyModal","featureName","FaCartPlus","handleConfirm","replace","ROUTES","SUBSCRIBE","_Fragment","LinkNewTab","SavedArmyTable","army","factionName","subFactionName","selections","allySelections","origin_realm","realmscape","realmscape_feature","armySelectionKeys","sortBy","Object","keys","filter","key","length","allies","reduce","a","_allySelections","_allySelections2","allyUnits","units","allyBattalions","battalions","faction","getFactionFromList","subFactionKeys","Tr","items","titleCase","title","map","i","_ref2","textMuted","item","SaveArmyModal","modalIsOpen","showSavedArmies","useSelector","selectors","selectCurrentArmy","relevantNotes","useGetReminders","hiddenReminders","selectReminders","isActive","useSubscription","saveArmy","useSavedArmies","armyName","setArmyName","processing","setProcessing","handleSaveClick","payload","prepareArmy","notes","htmlFor","placeholder","value","onKeyDown","stopPropagation","onChange","target","tabIndex","autoFocus","id","FaSave","SaveArmyBtn","isOffline","useAppStatus","isAuthenticated","saveModalIsOpen","setSaveModalIsOpen","subscribeModalIsOpen","setSubscribeModalIsOpen","OfflineBtn","SaveButton","handleClick"],"mappings":"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","file":"static/js/20.067fc93c.chunk.js","sourcesContent":["import Spinner from 'components/helpers/spinner'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React from 'react'\r\nimport Modal from 'react-modal'\r\n\r\ninterface IGenericModalProps {\r\n  isProcessing?: boolean\r\n  isOpen: boolean\r\n  closeModal: () => void\r\n  label: string\r\n}\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst GenericModal = (props: React.PropsWithChildren<IGenericModalProps>) => {\r\n  const { children, closeModal, isOpen, label, isProcessing = false } = props\r\n  const { isDark } = useTheme()\r\n\r\n  const themeType = isDark ? 'Dark' : 'Light'\r\n  const modalClassName = `Modal-${isProcessing ? `Transparent` : themeType}`\r\n\r\n  return (\r\n    <Modal\r\n      className={modalClassName}\r\n      contentLabel={label}\r\n      isOpen={isOpen}\r\n      onRequestClose={closeModal}\r\n      overlayClassName={'Modal-Overlay'}\r\n    >\r\n      <div className={`container`}>\r\n        {isProcessing && <ModalSpinner />}\r\n        <div hidden={isProcessing}>{children}</div>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default GenericModal\r\n\r\nconst ModalSpinner = ({ isDark = false }) => {\r\n  const variant = isDark ? 'light-gray' : 'dark'\r\n  return (\r\n    <div className={`d-flex flex-row justify-content-center`}>\r\n      <Spinner variant={variant} size=\"large\" />\r\n    </div>\r\n  )\r\n}\r\n","const openPopup = () => {\r\n  const width = 400\r\n  const height = 600\r\n  const left = window.screenX + (window.innerWidth - width) / 2\r\n  const top = window.screenY + (window.innerHeight - height) / 2\r\n\r\n  return window.open(\r\n    undefined,\r\n    'auth0:authorize:popup',\r\n    `left=${left},top=${top},width=${width},height=${height},resizable,scrollbars=yes,status=1`\r\n  )\r\n}\r\n\r\nexport default openPopup\r\n","import { useAuth0 } from '@auth0/auth0-react'\r\nimport { useMemo, useState } from 'react'\r\nimport { logClick, logEvent } from 'utils/analytics'\r\nimport openPopup from 'utils/openPopup'\r\n\r\ninterface IUseLoginProps {\r\n  /**\r\n   * The source of this login, e.g. 'Navbar'\r\n   */\r\n  origin: string\r\n  /**\r\n   * An optional function to run after the user has closed the login popup\r\n   *\r\n   * Note: This is triggered whether the user logged in successfully, or just closed the window.\r\n   */\r\n  onPopupClose?: () => unknown\r\n}\r\n\r\n/**\r\n * A useful hook to help with logins\r\n *\r\n * Includes a tracker for the login window that can notify you when closed.\r\n *\r\n * @param props\r\n *\r\n * @example const { login } =  useLogin({ origin: 'Navbar' })\r\n */\r\nconst useLogin = (props: IUseLoginProps) => {\r\n  const { isLoading, loginWithPopup } = useAuth0()\r\n  const [popupIsClosed, setPopupIsClosed] = useState(false)\r\n\r\n  const value = useMemo(\r\n    () => ({\r\n      isLoggingIn: isLoading && !popupIsClosed,\r\n      popupIsClosed,\r\n      login: (e?: any) => {\r\n        e?.preventDefault?.()\r\n        logClick(`${props.origin}-Login`)\r\n\r\n        const popup = openPopup()\r\n        setPopupIsClosed(false)\r\n\r\n        // https://stackoverflow.com/a/48240128\r\n        const timer = setInterval(() => {\r\n          if (popup?.closed) {\r\n            clearInterval(timer)\r\n            setPopupIsClosed(true)\r\n            logEvent(`${props.origin}-Login-Closed`)\r\n            if (props.onPopupClose) props.onPopupClose()\r\n          }\r\n        }, 1000)\r\n\r\n        return loginWithPopup({ authorizationParams: { redirect_uri: window.location.href } }, { popup })\r\n      },\r\n    }),\r\n    [isLoading, loginWithPopup, popupIsClosed, props]\r\n  )\r\n\r\n  return value\r\n}\r\n\r\nexport default useLogin\r\n","import GenericButton from 'components/input/generic_button'\r\nimport GenericModal from 'components/modals/generic/generic_modal'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useState } from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { FaCheck } from 'react-icons/fa'\r\n\r\ninterface IModalComponentProps {\r\n  bodyText?: string\r\n  closeModal: () => any\r\n  confirmIcon?: IconType\r\n  confirmText?: string\r\n  confirmBtnClass?: string\r\n  denyBtnClass?: string\r\n  denyText?: string\r\n  disableConfirmIcon?: boolean\r\n  headerText?: string\r\n  isOpen: boolean\r\n  onConfirm?: () => any\r\n  onConfirmAsync?: () => Promise<any>\r\n  onDeny?: () => any\r\n}\r\n\r\n/**\r\n * A re-usable generic modal component\r\n *\r\n * Ask if we really want to do an action.\r\n *\r\n * @param props\r\n */\r\nconst GenericTwoButtonModal = (props: React.PropsWithChildren<IModalComponentProps>) => {\r\n  const { theme } = useTheme()\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n  const {\r\n    bodyText = '',\r\n    children = null,\r\n    closeModal,\r\n    confirmBtnClass = theme.modalDangerClass,\r\n    confirmText = 'Confirm',\r\n    denyBtnClass = theme.modalConfirmClass,\r\n    denyText = 'Cancel',\r\n    disableConfirmIcon = false,\r\n    headerText = '',\r\n    isOpen = false,\r\n    onConfirm = null,\r\n    onConfirmAsync = null,\r\n    onDeny = null,\r\n  } = props\r\n\r\n  const ConfirmIcon = props.confirmIcon || FaCheck\r\n\r\n  const handleConfirm = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (onConfirmAsync) {\r\n      try {\r\n        setIsProcessing(true)\r\n        await onConfirmAsync()\r\n      } catch (err) {\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    if (onConfirm) onConfirm()\r\n\r\n    closeModal()\r\n  }\r\n\r\n  const handleDeny = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (onDeny) onDeny()\r\n    closeModal()\r\n  }\r\n\r\n  return (\r\n    <GenericModal\r\n      isOpen={isOpen}\r\n      isProcessing={isProcessing}\r\n      closeModal={closeModal}\r\n      label={`${headerText} Confirmation Modal`}\r\n    >\r\n      <div className=\"flex-row\">\r\n        <div className={`col ${theme.text} text-center`}>\r\n          <h4 className=\"mb-3\">{headerText}</h4>\r\n          {bodyText && <p className=\"mb-3\">{bodyText}</p>}\r\n          {children ? <div className={`mb-3`}>{children}</div> : null}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex flex-row justify-content-around\">\r\n        <GenericButton className={confirmBtnClass} onClick={handleConfirm}>\r\n          {!disableConfirmIcon && <ConfirmIcon className=\"mr-2\" />} {confirmText}\r\n        </GenericButton>\r\n        <GenericButton className={denyBtnClass} onClick={handleDeny}>\r\n          {denyText}\r\n        </GenericButton>\r\n      </div>\r\n    </GenericModal>\r\n  )\r\n}\r\n\r\nexport default GenericTwoButtonModal\r\n","import { LinkNewTab } from 'components/helpers/link'\r\nimport GenericTwoButtonModal from 'components/modals/generic/generic_two_button_modal'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React from 'react'\r\nimport { FaCartPlus } from 'react-icons/fa'\r\nimport { logClick } from 'utils/analytics'\r\nimport { ROUTES } from 'utils/env'\r\n\r\ninterface IModalComponentProps {\r\n  closeModal: () => void\r\n  isOpen: boolean\r\n  featureName: string\r\n}\r\n\r\n/**\r\n * Use this modal when we want to stop non-subscribers from accessing paid functionality\r\n * @param props\r\n */\r\nconst SubscriberOnlyModal = ({ closeModal, isOpen, featureName }: IModalComponentProps) => {\r\n  const { theme } = useTheme()\r\n\r\n  const handleConfirm = () => {\r\n    logClick(`${featureName}-Modal-Subscribe`)\r\n    closeModal()\r\n    window.location.replace(ROUTES.SUBSCRIBE)\r\n  }\r\n\r\n  return (\r\n    <GenericTwoButtonModal\r\n      closeModal={closeModal}\r\n      confirmBtnClass={'btn btn-primary'}\r\n      confirmIcon={FaCartPlus}\r\n      confirmText={'Subscribe'}\r\n      denyBtnClass={theme.modalConfirmClass}\r\n      headerText={`Subscriber-Only Feature`}\r\n      isOpen={isOpen}\r\n      onConfirm={handleConfirm}\r\n    >\r\n      <>\r\n        <p>Saving data to the cloud increases the hosting fees for AoS Reminders.</p>\r\n        <p>Please consider subscribing to use this feature (and many more!)</p>\r\n        <p>\r\n          <small>\r\n            <LinkNewTab href=\"mailto:aosreminders@gmail.com\" label={'Email me'}>\r\n              Send me an email\r\n            </LinkNewTab>{' '}\r\n            if you have feedback or questions.\r\n          </small>\r\n        </p>\r\n      </>\r\n    </GenericTwoButtonModal>\r\n  )\r\n}\r\n\r\nexport default SubscriberOnlyModal\r\n","import { useTheme } from 'context/useTheme'\r\nimport { sortBy } from 'lodash'\r\nimport { TSupportedFaction } from 'meta/factions'\r\nimport { getFactionFromList } from 'meta/faction_list'\r\nimport React, { useMemo } from 'react'\r\nimport { ICurrentArmy } from 'types/army'\r\nimport { ISavedArmy, ISavedArmyFromApi } from 'types/savedArmy'\r\nimport { IAllySelections, TSelections } from 'types/selections'\r\nimport { ITheme } from 'types/theme'\r\nimport { titleCase } from 'utils/textUtils'\r\n\r\ninterface ISavedArmyTable {\r\n  army: ISavedArmyFromApi | ISavedArmy | ICurrentArmy\r\n}\r\n\r\nexport const SavedArmyTable = ({ army }: ISavedArmyTable) => {\r\n  const {\r\n    factionName,\r\n    subFactionName,\r\n    selections,\r\n    allySelections,\r\n    origin_realm,\r\n    realmscape,\r\n    realmscape_feature,\r\n  } = army\r\n  const { theme } = useTheme()\r\n\r\n  const armySelectionKeys = useMemo(\r\n    () => sortBy(Object.keys(selections).filter(key => selections[key as keyof typeof selections].length)),\r\n    [selections]\r\n  )\r\n\r\n  const allies = useMemo(\r\n    () =>\r\n      Object.keys(allySelections).reduce(\r\n        (a, factionName) => {\r\n          const allyUnits = allySelections[factionName as TSupportedFaction]?.units || []\r\n          const allyBattalions = allySelections[factionName as TSupportedFaction]?.battalions || []\r\n          a.units = a.units.concat(allyUnits)\r\n          a.battalions = a.battalions.concat(allyBattalions)\r\n          return a\r\n        },\r\n        { units: [], battalions: [] } as IAllySelections\r\n      ),\r\n    [allySelections]\r\n  )\r\n\r\n  const faction = getFactionFromList(factionName)\r\n\r\n  if (!faction?.subFactionKeys) return <></>\r\n\r\n  return (\r\n    <>\r\n      <table className={`table table-sm`}>\r\n        <tbody>\r\n          <Tr theme={theme} items={[titleCase(factionName)]} title={'Faction'} />\r\n          {!!subFactionName && faction.subFactionKeys.length > 1 && (\r\n            <Tr theme={theme} items={[subFactionName]} title={'SubFaction'} />\r\n          )}\r\n          {armySelectionKeys.map((key, i) => {\r\n            return (\r\n              <Tr\r\n                theme={theme}\r\n                items={sortBy(selections[key as keyof TSelections])}\r\n                title={key}\r\n                key={`${key}_${i}`}\r\n              />\r\n            )\r\n          })}\r\n\r\n          {allies.units.length > 0 && (\r\n            <Tr theme={theme} items={sortBy(allies.units)} title={'Allied Units'} />\r\n          )}\r\n          {allies.battalions.length > 0 && (\r\n            <Tr theme={theme} items={sortBy(allies.battalions)} title={'Allied Battalions'} />\r\n          )}\r\n\r\n          {origin_realm && <Tr theme={theme} items={[origin_realm]} title={'Realm of Origin'} />}\r\n          {realmscape && <Tr theme={theme} items={[realmscape]} title={'Realm of Battle'} />}\r\n          {realmscape_feature && <Tr theme={theme} items={[realmscape_feature]} title={'Realm Feature'} />}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\ninterface ITrProps {\r\n  title: string\r\n  items: string[]\r\n  theme: ITheme\r\n}\r\n\r\nconst Tr = ({ title, items, theme }: ITrProps) => (\r\n  <tr>\r\n    <td className={`text-nowrap ${theme.textMuted}`}>\r\n      <strong>{titleCase(title)}</strong>\r\n    </td>\r\n    <td>\r\n      {items.map((item, i) => {\r\n        return (\r\n          <span key={`${item}_${i}`} className={`badge badge-secondary text-wrap mx-1`}>\r\n            {item}\r\n          </span>\r\n        )\r\n      })}\r\n    </td>\r\n  </tr>\r\n)\r\n","import GenericButton from 'components/input/generic_button'\r\nimport { SavedArmyTable } from 'components/input/savedArmies/saved_army_table'\r\nimport GenericModal from 'components/modals/generic/generic_modal'\r\nimport { useSavedArmies } from 'context/useSavedArmies'\r\nimport { useSubscription } from 'context/useSubscription'\r\nimport { useTheme } from 'context/useTheme'\r\nimport { selectors } from 'ducks'\r\nimport React, { useState } from 'react'\r\nimport { FaSave } from 'react-icons/fa'\r\nimport { useSelector } from 'react-redux'\r\nimport { ISavedArmy } from 'types/savedArmy'\r\nimport { logEvent } from 'utils/analytics'\r\nimport { prepareArmy } from 'utils/armyUtils'\r\nimport useGetReminders from 'utils/hooks/useGetReminders'\r\n\r\ninterface IModalComponentProps {\r\n  modalIsOpen: boolean\r\n  closeModal: () => void\r\n  showSavedArmies: () => void\r\n}\r\n\r\nexport const SaveArmyModal = ({ closeModal, modalIsOpen, showSavedArmies }: IModalComponentProps) => {\r\n  const army = useSelector(selectors.selectCurrentArmy)\r\n  const { relevantNotes } = useGetReminders()\r\n  const hiddenReminders = useSelector(selectors.selectReminders)\r\n  const { isActive } = useSubscription()\r\n  const { saveArmy } = useSavedArmies()\r\n  const { theme } = useTheme()\r\n  const [armyName, setArmyName] = useState('')\r\n  const [processing, setProcessing] = useState(false)\r\n\r\n  const handleUpdateName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault()\r\n    setArmyName(e.target.value)\r\n  }\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      handleSaveClick()\r\n    }\r\n  }\r\n\r\n  const handleSaveClick = async (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    e?.preventDefault?.()\r\n    if (isActive) {\r\n      setProcessing(true)\r\n      const payload = prepareArmy({ ...army, hiddenReminders, armyName, notes: relevantNotes }, 'save')\r\n      await saveArmy(payload as ISavedArmy)\r\n      setProcessing(false)\r\n      setArmyName('')\r\n      closeModal()\r\n      showSavedArmies()\r\n      logEvent(`SaveArmy-${army.factionName}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <GenericModal\r\n      isProcessing={processing}\r\n      isOpen={modalIsOpen}\r\n      closeModal={closeModal}\r\n      label=\"Save Army Modal\"\r\n    >\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"nameInput\">\r\n                <strong className={theme.text}>Army Name</strong>\r\n              </label>\r\n              <input\r\n                className=\"form-control form-control-sm\"\r\n                aria-describedby=\"nameHelp\"\r\n                placeholder=\"Enter army name\"\r\n                value={armyName}\r\n                onKeyDown={handleKeyDown}\r\n                onChange={handleUpdateName}\r\n                tabIndex={0}\r\n                autoFocus\r\n              />\r\n              <small id=\"nameHelp\" className={`form-text ${theme.textMuted}`}>\r\n                Hint: Use a descriptive name.\r\n              </small>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col pl-0\">\r\n          <GenericButton className={theme.modalConfirmClass} onClick={handleSaveClick}>\r\n            <FaSave className=\"mr-2\" /> Save\r\n          </GenericButton>\r\n\r\n          <GenericButton className={theme.modalDangerClass} onClick={closeModal}>\r\n            Cancel\r\n          </GenericButton>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row mt-3\">\r\n        <div className=\"col\">\r\n          <SavedArmyTable army={army} />\r\n        </div>\r\n      </div>\r\n    </GenericModal>\r\n  )\r\n}\r\n","import { useAuth0 } from '@auth0/auth0-react'\r\nimport { OfflineBtn } from 'components/helpers/suspenseFallbacks'\r\nimport GenericButton from 'components/input/generic_button'\r\nimport { SaveArmyModal } from 'components/modals/save_army_modal'\r\nimport SubscriberOnlyModal from 'components/modals/subscriber_only_modal'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useSubscription } from 'context/useSubscription'\r\nimport React, { useState } from 'react'\r\nimport { FaSave } from 'react-icons/fa'\r\nimport useLogin from 'utils/hooks/useLogin'\r\n\r\ninterface ISaveArmyProps {\r\n  showSavedArmies: () => void\r\n}\r\n\r\nconst SaveArmyBtn = ({ showSavedArmies }: ISaveArmyProps) => {\r\n  const { isOffline } = useAppStatus()\r\n  const { isAuthenticated } = useAuth0()\r\n  const { isActive } = useSubscription()\r\n  const { login } = useLogin({ origin: 'SaveArmyBtn' })\r\n\r\n  const [saveModalIsOpen, setSaveModalIsOpen] = useState(false)\r\n  const [subscribeModalIsOpen, setSubscribeModalIsOpen] = useState(false)\r\n\r\n  if (isOffline) return <OfflineBtn text=\"Save Army\" />\r\n\r\n  return (\r\n    <>\r\n      {!isAuthenticated && <SaveButton handleClick={login} />}\r\n\r\n      {isAuthenticated && !isActive && <SaveButton handleClick={() => setSubscribeModalIsOpen(true)} />}\r\n\r\n      {isActive && <SaveButton handleClick={() => setSaveModalIsOpen(true)} />}\r\n\r\n      {saveModalIsOpen && (\r\n        <SaveArmyModal\r\n          showSavedArmies={showSavedArmies}\r\n          modalIsOpen={saveModalIsOpen}\r\n          closeModal={() => setSaveModalIsOpen(false)}\r\n        />\r\n      )}\r\n      {subscribeModalIsOpen && (\r\n        <SubscriberOnlyModal\r\n          isOpen={subscribeModalIsOpen}\r\n          featureName={'SaveArmy'}\r\n          closeModal={() => setSubscribeModalIsOpen(false)}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SaveArmyBtn\r\n\r\nconst SaveButton = (props: { handleClick: () => void }) => {\r\n  return (\r\n    <GenericButton onClick={props.handleClick}>\r\n      <FaSave className=\"mr-2\" /> Save Army\r\n    </GenericButton>\r\n  )\r\n}\r\n"],"sourceRoot":""}