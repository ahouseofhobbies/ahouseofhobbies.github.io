{"version":3,"sources":["components/info/banners/notification_banner.tsx","components/info/banners/update_banner.tsx"],"names":["NotificationBanner","props","children","displayOnce","enableLog","name","persistClose","variant","isHidden","getNotificationBanner","isOn","setIsOn","useState","useEffect","logDisplay","hideNotificationBanner","_jsxs","className","concat","role","_jsx","centerContentClass","GenericButton","onClick","handleClose","logClick","UpdateBanner","hasNewContent","useAppStatus","isDark","useTheme","isTinyMobile","isMobile","useWindowSize","btnText","btnClass","iconClass","async","window","location","reload","MdRefresh","_Fragment"],"mappings":"uHAAA,oFAoBO,MAAMA,EAAsBC,IACjC,MAAM,SACJC,EAAQ,YACRC,GAAc,EAAK,UACnBC,GAAY,EAAK,KACjBC,EAAI,aACJC,GAAe,EAAI,QACnBC,EAAU,WACRN,EACEO,KAAWF,IAAgBH,IAA8C,WAAhCM,YAAsBJ,IAC9DK,EAAMC,GAAWC,oBAAUJ,GAelC,OAPAK,qBAAU,KACJT,GAAaM,GAAMI,YAAWT,GAC3B,KACDF,GAAeO,GAAMK,YAAuBV,EAAK,KAIpDK,EAGHM,eAAA,OAAKC,UAAS,eAAAC,OAAiBX,EAAO,mDAAmDY,KAAK,QAAOjB,SAAA,CACnGkB,cAAA,OAAKH,UAAS,eAAAC,OAAiBG,KAAqBnB,SAAEA,IACtDkB,cAAA,OAAKH,UAAS,wBAA0Bf,SACtCkB,cAACE,IAAa,CAACL,UAAU,QAAQ,aAAW,QAAQM,QAnBtCC,KAClBb,GAAQ,GACJL,GAAcS,YAAuBV,GACrCD,GAAWqB,YAAS,SAADP,OAAUb,GAAO,EAgBqCH,SACvEkB,cAAA,QAAM,cAAY,OAAMlB,SAAC,gBAPf,IAUV,C,mCCvDV,6EAsCewB,UA9BMA,KACnB,MAAM,cAAEC,GAAkBC,eACpB,OAAEC,GAAWC,eACb,aAAEC,EAAY,SAAEC,GAAaC,cAG7B1B,EAAUsB,EAAM,mBAChBK,EAAUH,EAAY,YAEtBI,EAAQ,WAAAjB,OADEa,EAAY,KAAUC,EAAQ,UACX,qBAC7BI,EAAYL,EAAY,UAO9B,OAAKJ,EAGHX,eAAChB,IAAkB,CAACK,KAhBT,8BAgBqBC,cAAc,EAAOC,QAASA,EAASH,WAAW,EAAKF,SAAA,CAAC,yBAEtFc,eAACM,IAAa,CAACC,QAVEc,UACnBZ,YAAS,uBACTa,OAAOC,SAASC,QAAQ,EAQgBvB,UAAWkB,EAASjC,SAAA,CACxDkB,cAACqB,IAAS,CAACxB,UAAWmB,IACrBF,QAPoBd,cAAAsB,WAAA,GASJ,C","file":"static/js/29.30ea4dd5.chunk.js","sourcesContent":["import GenericButton from 'components/input/generic_button'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { centerContentClass } from 'theme/helperClasses'\r\nimport { TBootstrapTypes } from 'types/theme'\r\nimport { logClick, logDisplay } from 'utils/analytics'\r\nimport { getNotificationBanner, hideNotificationBanner } from 'utils/localStore'\r\n\r\ninterface IBannerProps {\r\n  displayOnce?: boolean\r\n  enableLog?: boolean\r\n  name: string\r\n  persistClose?: boolean\r\n  variant?: TBootstrapTypes\r\n}\r\n\r\n/**\r\n * Re-usable component that can broadcast application notifications\r\n * Can be hidden - will be stored in local storage\r\n * @param props\r\n */\r\nexport const NotificationBanner = (props: React.PropsWithChildren<IBannerProps>) => {\r\n  const {\r\n    children,\r\n    displayOnce = false,\r\n    enableLog = false,\r\n    name,\r\n    persistClose = true,\r\n    variant = 'primary',\r\n  } = props\r\n  const isHidden = persistClose || displayOnce ? getNotificationBanner(name) === 'hidden' : false\r\n  const [isOn, setIsOn] = useState(!isHidden)\r\n\r\n  const handleClose = () => {\r\n    setIsOn(false)\r\n    if (persistClose) hideNotificationBanner(name)\r\n    if (enableLog) logClick(`Close-${name}`)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (enableLog && isOn) logDisplay(name)\r\n    return () => {\r\n      if (displayOnce && isOn) hideNotificationBanner(name)\r\n    }\r\n  })\r\n\r\n  if (!isOn) return null\r\n\r\n  return (\r\n    <div className={`alert alert-${variant} text-center fade show d-flex my-0 d-print-none`} role=\"alert\">\r\n      <div className={`flex-grow-1 ${centerContentClass}`}>{children}</div>\r\n      <div className={`align-self-start ml-2`}>\r\n        <GenericButton className=\"close\" aria-label=\"Close\" onClick={handleClose}>\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </GenericButton>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { NotificationBanner } from 'components/info/banners/notification_banner'\r\nimport GenericButton from 'components/input/generic_button'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useTheme } from 'context/useTheme'\r\nimport { MdRefresh } from 'react-icons/md'\r\nimport { logClick } from 'utils/analytics'\r\nimport useWindowSize from 'utils/hooks/useWindowSize'\r\n\r\nconst UpdateBanner = () => {\r\n  const { hasNewContent } = useAppStatus()\r\n  const { isDark } = useTheme()\r\n  const { isTinyMobile, isMobile } = useWindowSize()\r\n  const name = 'Content_Update_Notification'\r\n\r\n  const variant = isDark ? `dark` : `secondary`\r\n  const btnText = isTinyMobile ? `` : `Reload`\r\n  const btnSize = isTinyMobile ? `lg` : isMobile ? `md` : `sm`\r\n  const btnClass = `btn btn-${btnSize} btn-primary ml-3`\r\n  const iconClass = isTinyMobile ? `` : `mr-2`\r\n\r\n  const handleAccept = async () => {\r\n    logClick('ReloadContentButton')\r\n    window.location.reload()\r\n  }\r\n\r\n  if (!hasNewContent) return <></>\r\n\r\n  return (\r\n    <NotificationBanner name={name} persistClose={false} variant={variant} enableLog={true}>\r\n      Updates are available!\r\n      <GenericButton onClick={handleAccept} className={btnClass}>\r\n        <MdRefresh className={iconClass} />\r\n        {btnText}\r\n      </GenericButton>\r\n    </NotificationBanner>\r\n  )\r\n}\r\n\r\nexport default UpdateBanner\r\n"],"sourceRoot":""}