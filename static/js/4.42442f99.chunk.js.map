{"version":3,"sources":["../../../Warhammer/AOS Reminders/src/utils/openPopup.ts","../../../Warhammer/AOS Reminders/src/utils/hooks/useLogin.tsx","../../../Warhammer/AOS Reminders/src/components/page/navbar.tsx"],"names":["openPopup","left","window","screenX","innerWidth","top","screenY","innerHeight","open","undefined","concat","useLogin","props","isLoading","loginWithPopup","useAuth0","popupIsClosed","setPopupIsClosed","useState","useMemo","isLoggingIn","login","e","_e$preventDefault","preventDefault","call","logClick","origin","popup","timer","setInterval","closed","clearInterval","logEvent","onPopupClose","authorizationParams","redirect_uri","location","href","Navbar","isOffline","useAppStatus","isAuthenticated","logout","isActive","subscriptionLoading","useSubscription","isTinyMobile","useWindowSize","pathname","loginBtnText","_jsx","OfflineHeader","LoadingHeader","discount","SubscriptionPlans","some","x","sale","max","map","discount_pct","_jsxs","NavbarWrapper","children","ROUTES","HOME","Link","to","className","navbarStyles","link","onClick","PROFILE","SUBSCRIBE","FAQ","GenericButton","btn","handleLoginBtn","LocalUserName","clear","LocalSavedArmies","LocalTheme","clientId","config","logoutParams","returnTo","BASE_URL"],"mappings":"oJAaeA,MAbGA,KAChB,MAEMC,EAAOC,OAAOC,SAAWD,OAAOE,WAFxB,KAE8C,EACtDC,EAAMH,OAAOI,SAAWJ,OAAOK,YAFtB,KAE8C,EAE7D,OAAOL,OAAOM,UACZC,EACA,wBAAwB,QAADC,OACfT,EAAI,SAAAS,OAAQL,EAAG,WAAAK,OARX,IAQ0B,YAAAA,OAPzB,IAO0C,sCACxD,ECmDYC,IAlCGC,IAChB,MAAM,UAAEC,EAAS,eAAEC,GAAmBC,eAC/BC,EAAeC,GAAoBC,oBAAS,GA6BnD,OA3BcC,mBACZ,MACEC,YAAaP,IAAcG,EAC3BA,gBACAK,MAAQC,IAAa,IAADC,EACjB,OAADD,QAAC,IAADA,GAAiB,QAAhBC,EAADD,EAAGE,sBAAc,IAAAD,GAAjBA,EAAAE,KAAAH,GACAI,YAAS,GAADhB,OAAIE,EAAMe,OAAM,WAExB,MAAMC,EAAQ5B,IACdiB,GAAiB,GAGjB,MAAMY,EAAQC,aAAY,MACf,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOG,UACTC,cAAcH,GACdZ,GAAiB,GACjBgB,YAAS,GAADvB,OAAIE,EAAMe,OAAM,kBACpBf,EAAMsB,cAActB,EAAMsB,eAChC,GACC,KAEH,OAAOpB,EAAe,CAAEqB,oBAAqB,CAAEC,aAAclC,OAAOmC,SAASC,OAAU,CAAEV,SAAQ,KAGrG,CAACf,EAAWC,EAAgBE,EAAeJ,GAGjC,C,mCC1Dd,uJAuFe2B,UAtEAA,KACb,MAAM,UAAEC,GAAcC,eAChB,gBAAEC,EAAe,OAAEC,GAAW5B,eAC9B,MAAEM,EAAK,YAAED,GAAgBT,YAAS,CAAEgB,OAAQ,YAC5C,SAAEiB,EAAQ,oBAAEC,GAAwBC,eACpC,aAAEC,GAAiBC,eAEnB,SAAEC,GAAa/C,OAAOmC,SACtBa,EAAgBR,EAAe,mBAcrC,GAAIF,EAAW,OAAOW,cAACC,IAAa,IACpC,GAAIhC,GAAeyB,EAAqB,OAAOM,cAACE,IAAa,IAE7D,MAAMC,EAAWC,IAAkBC,MAAKC,GAAKA,EAAEC,OAAQC,cAAIJ,IAAkBK,KAAIH,GAAKA,EAAEI,gBAAiB,EAEzG,OACEC,eAACC,IAAa,CAAAC,SAAA,CACXf,IAAagB,IAAOC,MACnBf,cAACgB,IAAI,CAACC,GAAIH,IAAOC,KAAMG,UAAWC,IAAaC,KAAMC,QAASA,IAAM9C,YAAS,eAAesC,SAAC,SAS9FtB,GAAmBO,IAAagB,IAAOQ,SACtCtB,cAACgB,IAAI,CAACC,GAAIH,IAAOQ,QAASJ,UAAWC,IAAaC,KAAMC,QAASA,IAAM9C,YAAS,kBAAkBsC,SAAC,aAInGpB,GAAYK,IAAagB,IAAOS,WAChCZ,eAACK,IAAI,CACHC,GAAIH,IAAOS,UACXL,UAAWC,IAAaC,KACxBC,QAASA,IAAM9C,YAAS,oBAAoBsC,SAAA,CAC7C,cAEIV,IAAaP,GACde,eAAA,QAAMO,UAAU,qCAAoCL,SAAA,CAAEV,EAAS,eAKpEL,IAAagB,IAAOU,KACnBxB,cAACgB,IAAI,CAACC,GAAIH,IAAOU,IAAKN,UAAWC,IAAaC,KAAMC,QAASA,IAAM9C,YAAS,cAAcsC,SAAC,QAK7Fb,cAACyB,IAAa,CAACP,UAAWC,IAAaO,IAAKL,QArDzBM,IACjBpC,GACFhB,YAAS,iBACTqD,IAAcC,QACdC,IAAiBD,QACjBE,IAAWF,QACJrC,EAAO,CAAEwC,SAAUC,EAAOD,SAAUE,aAAc,CAAEC,SAAUC,QAE9DlE,IA6C6D2C,SACjEd,MAEW,C","file":"static/js/4.42442f99.chunk.js","sourcesContent":["const openPopup = () => {\r\n  const width = 400\r\n  const height = 600\r\n  const left = window.screenX + (window.innerWidth - width) / 2\r\n  const top = window.screenY + (window.innerHeight - height) / 2\r\n\r\n  return window.open(\r\n    undefined,\r\n    'auth0:authorize:popup',\r\n    `left=${left},top=${top},width=${width},height=${height},resizable,scrollbars=yes,status=1`\r\n  )\r\n}\r\n\r\nexport default openPopup\r\n","import { useAuth0 } from '@auth0/auth0-react'\r\nimport { useMemo, useState } from 'react'\r\nimport { logClick, logEvent } from 'utils/analytics'\r\nimport openPopup from 'utils/openPopup'\r\n\r\ninterface IUseLoginProps {\r\n  /**\r\n   * The source of this login, e.g. 'Navbar'\r\n   */\r\n  origin: string\r\n  /**\r\n   * An optional function to run after the user has closed the login popup\r\n   *\r\n   * Note: This is triggered whether the user logged in successfully, or just closed the window.\r\n   */\r\n  onPopupClose?: () => unknown\r\n}\r\n\r\n/**\r\n * A useful hook to help with logins\r\n *\r\n * Includes a tracker for the login window that can notify you when closed.\r\n *\r\n * @param props\r\n *\r\n * @example const { login } =  useLogin({ origin: 'Navbar' })\r\n */\r\nconst useLogin = (props: IUseLoginProps) => {\r\n  const { isLoading, loginWithPopup } = useAuth0()\r\n  const [popupIsClosed, setPopupIsClosed] = useState(false)\r\n\r\n  const value = useMemo(\r\n    () => ({\r\n      isLoggingIn: isLoading && !popupIsClosed,\r\n      popupIsClosed,\r\n      login: (e?: any) => {\r\n        e?.preventDefault?.()\r\n        logClick(`${props.origin}-Login`)\r\n\r\n        const popup = openPopup()\r\n        setPopupIsClosed(false)\r\n\r\n        // https://stackoverflow.com/a/48240128\r\n        const timer = setInterval(() => {\r\n          if (popup?.closed) {\r\n            clearInterval(timer)\r\n            setPopupIsClosed(true)\r\n            logEvent(`${props.origin}-Login-Closed`)\r\n            if (props.onPopupClose) props.onPopupClose()\r\n          }\r\n        }, 1000)\r\n\r\n        return loginWithPopup({ authorizationParams: { redirect_uri: window.location.href } }, { popup })\r\n      },\r\n    }),\r\n    [isLoading, loginWithPopup, popupIsClosed, props]\r\n  )\r\n\r\n  return value\r\n}\r\n\r\nexport default useLogin\r\n","import { useAuth0 } from '@auth0/auth0-react'\r\nimport config from 'auth_config.json'\r\nimport { LoadingHeader, OfflineHeader } from 'components/helpers/suspenseFallbacks'\r\nimport GenericButton from 'components/input/generic_button'\r\nimport NavbarWrapper from 'components/page/navbar_wrapper'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useSubscription } from 'context/useSubscription'\r\nimport { max } from 'lodash'\r\nimport { Link } from 'react-router-dom'\r\nimport { navbarStyles } from 'theme/helperClasses'\r\nimport { logClick } from 'utils/analytics'\r\nimport { BASE_URL, ROUTES } from 'utils/env'\r\nimport useLogin from 'utils/hooks/useLogin'\r\nimport useWindowSize from 'utils/hooks/useWindowSize'\r\nimport { LocalSavedArmies, LocalTheme, LocalUserName } from 'utils/localStore'\r\nimport { SubscriptionPlans } from 'utils/plans'\r\n\r\nconst Navbar = () => {\r\n  const { isOffline } = useAppStatus()\r\n  const { isAuthenticated, logout } = useAuth0()\r\n  const { login, isLoggingIn } = useLogin({ origin: 'Navbar' })\r\n  const { isActive, subscriptionLoading } = useSubscription()\r\n  const { isTinyMobile } = useWindowSize()\r\n\r\n  const { pathname } = window.location\r\n  const loginBtnText = !isAuthenticated ? `Log in` : `Log out`\r\n\r\n  const handleLoginBtn = () => {\r\n    if (isAuthenticated) {\r\n      logClick('Navbar-Logout')\r\n      LocalUserName.clear() // Get rid of stored user info\r\n      LocalSavedArmies.clear() // Remove any saved armies that we've fetched from the API\r\n      LocalTheme.clear() // Revert back to default theme settings\r\n      return logout({ clientId: config.clientId, logoutParams: { returnTo: BASE_URL } })\r\n    } else {\r\n      return login()\r\n    }\r\n  }\r\n\r\n  if (isOffline) return <OfflineHeader />\r\n  if (isLoggingIn || subscriptionLoading) return <LoadingHeader />\r\n\r\n  const discount = SubscriptionPlans.some(x => x.sale) ? max(SubscriptionPlans.map(x => x.discount_pct)) : 0\r\n\r\n  return (\r\n    <NavbarWrapper>\r\n      {pathname !== ROUTES.HOME && (\r\n        <Link to={ROUTES.HOME} className={navbarStyles.link} onClick={() => logClick('Navbar-Home')}>\r\n          Home\r\n        </Link>\r\n      )}\r\n      {/* {pathname !== ROUTES.STATS && (\r\n        <Link to={ROUTES.STATS} className={navbarStyles.link} onClick={() => logClick('Navbar-Stats')}>\r\n          Stats\r\n        </Link>\r\n      )} */}\r\n      {isAuthenticated && pathname !== ROUTES.PROFILE && (\r\n        <Link to={ROUTES.PROFILE} className={navbarStyles.link} onClick={() => logClick('Navbar-Profile')}>\r\n          Profile\r\n        </Link>\r\n      )}\r\n      {!isActive && pathname !== ROUTES.SUBSCRIBE && (\r\n        <Link\r\n          to={ROUTES.SUBSCRIBE}\r\n          className={navbarStyles.link}\r\n          onClick={() => logClick('Navbar-Subscribe')}\r\n        >\r\n          Subscribe\r\n          {!!discount && !isTinyMobile && (\r\n            <span className=\"ml-1 badge badge-pill badge-danger\">{discount}% off!</span>\r\n          )}\r\n        </Link>\r\n      )}\r\n\r\n      {pathname !== ROUTES.FAQ && (\r\n        <Link to={ROUTES.FAQ} className={navbarStyles.link} onClick={() => logClick('Navbar-Faq')}>\r\n          FAQ\r\n        </Link>\r\n      )}\r\n\r\n      <GenericButton className={navbarStyles.btn} onClick={handleLoginBtn}>\r\n        {loginBtnText}\r\n      </GenericButton>\r\n    </NavbarWrapper>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n"],"sourceRoot":""}