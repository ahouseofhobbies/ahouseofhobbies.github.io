{"version":3,"sources":["components/modals/generic/generic_modal.tsx","components/modals/generic/generic_destructive_modal.tsx","components/modals/generic/generic_two_button_modal.tsx","components/input/savedArmies/saved_army_table.tsx","components/modals/update_name_modal.tsx","components/input/savedArmies/update_name_btn.tsx","components/input/savedArmies/paginate_buttons.tsx","components/input/savedArmies/load_army_btn.tsx","components/input/savedArmies/saved_army_card.tsx","components/input/savedArmies/saved_armies.tsx","utils/paginate.ts"],"names":["Modal","setAppElement","GenericModal","props","children","closeModal","isOpen","label","isProcessing","isDark","useTheme","modalClassName","concat","_jsx","className","contentLabel","onRequestClose","overlayClassName","_jsxs","ModalSpinner","hidden","_ref","variant","Spinner","size","GenericDestructiveModal","bodyText","confirmText","denyText","headerText","onConfirm","onConfirmAsync","onDeny","theme","setIsProcessing","useState","btnReponsiveClass","text","GenericButton","modalDangerClass","onClick","async","e","preventDefault","err","console","error","FaCheck","modalConfirmClass","GenericTwoButtonModal","confirmBtnClass","denyBtnClass","disableConfirmIcon","ConfirmIcon","confirmIcon","SavedArmyTable","army","factionName","subFactionName","selections","allySelections","origin_realm","realmscape","realmscape_feature","armySelectionKeys","useMemo","sortBy","Object","keys","filter","key","length","allies","reduce","a","_allySelections","_allySelections2","allyUnits","units","allyBattalions","battalions","faction","getFactionFromList","subFactionKeys","_Fragment","Tr","items","titleCase","title","map","i","_ref2","textMuted","item","UpdateArmyNameModal","modalIsOpen","currentArmyName","id","updateArmyName","useSavedArmies","armyName","setArmyName","handleUpdateClick","logEvent","FaSave","htmlFor","value","onKeyDown","stopPropagation","onChange","target","tabIndex","autoFocus","UpdateNameButton","setModalIsOpen","IconContext","Provider","FaPencilAlt","PaginateButtons","pageNum","setPageNum","numPages","canIncrement","canDecrement","FaAngleLeft","FaAngleRight","LoadArmyBtn","isOnline","useAppStatus","setLoadedArmy","resetAnalyticsStore","addArmyToStore","SavedArmyCard","isOffline","deleteSavedArmy","border","setBorder","loadedArmy","useEffect","includes","setTimeout","cardBody","CardTitle","createdAt","openModal","disabled","created","DateTime","fromMillis","toLocaleString","year","month","day","hour","minute","ShowSavedArmies","isAuthenticated","useAuth0","isSubscribed","useSubscription","savedArmies","loadSavedArmies","paginatedArmies","pageSize","arguments","undefined","accum","pages","currPage","push","paginateSavedArmies","NoArmiesFound","role"],"mappings":"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","file":"static/js/21.afe125e4.chunk.js","sourcesContent":["import Spinner from 'components/helpers/spinner'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React from 'react'\r\nimport Modal from 'react-modal'\r\n\r\ninterface IGenericModalProps {\r\n  isProcessing?: boolean\r\n  isOpen: boolean\r\n  closeModal: () => void\r\n  label: string\r\n}\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst GenericModal = (props: React.PropsWithChildren<IGenericModalProps>) => {\r\n  const { children, closeModal, isOpen, label, isProcessing = false } = props\r\n  const { isDark } = useTheme()\r\n\r\n  const themeType = isDark ? 'Dark' : 'Light'\r\n  const modalClassName = `Modal-${isProcessing ? `Transparent` : themeType}`\r\n\r\n  return (\r\n    <Modal\r\n      className={modalClassName}\r\n      contentLabel={label}\r\n      isOpen={isOpen}\r\n      onRequestClose={closeModal}\r\n      overlayClassName={'Modal-Overlay'}\r\n    >\r\n      <div className={`container`}>\r\n        {isProcessing && <ModalSpinner />}\r\n        <div hidden={isProcessing}>{children}</div>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default GenericModal\r\n\r\nconst ModalSpinner = ({ isDark = false }) => {\r\n  const variant = isDark ? 'light-gray' : 'dark'\r\n  return (\r\n    <div className={`d-flex flex-row justify-content-center`}>\r\n      <Spinner variant={variant} size=\"large\" />\r\n    </div>\r\n  )\r\n}\r\n","import GenericButton from 'components/input/generic_button'\r\nimport GenericModal from 'components/modals/generic/generic_modal'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useState } from 'react'\r\nimport { FaCheck } from 'react-icons/fa'\r\n\r\ninterface IModalComponentProps {\r\n  closeModal: () => any\r\n  confirmText?: string\r\n  denyText?: string\r\n  isOpen: boolean\r\n  onConfirmAsync?: () => Promise<any>\r\n  onConfirm?: () => any\r\n  onDeny?: () => any\r\n  headerText: string\r\n  bodyText?: string\r\n}\r\n\r\n/**\r\n * A re-usable generic confirmation modal component\r\n *\r\n * Ask if we really want to do a destructive action.\r\n *\r\n * @param props\r\n */\r\nconst GenericDestructiveModal = (props: React.PropsWithChildren<IModalComponentProps>) => {\r\n  const {\r\n    bodyText = '',\r\n    children,\r\n    closeModal,\r\n    confirmText = 'Confirm',\r\n    denyText = 'Cancel',\r\n    headerText,\r\n    isOpen,\r\n    onConfirm = null,\r\n    onConfirmAsync = null,\r\n    onDeny = null,\r\n  } = props\r\n  const { theme } = useTheme()\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n  const handleConfirm = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (onConfirmAsync) {\r\n      try {\r\n        setIsProcessing(true)\r\n        await onConfirmAsync()\r\n      } catch (err) {\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    if (onConfirm) onConfirm()\r\n\r\n    closeModal()\r\n  }\r\n\r\n  const handleDeny = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (onDeny) onDeny()\r\n    closeModal()\r\n  }\r\n\r\n  const btnReponsiveClass = `mx-2 mx-sm-1`\r\n\r\n  return (\r\n    <GenericModal\r\n      isOpen={isOpen}\r\n      isProcessing={isProcessing}\r\n      closeModal={closeModal}\r\n      label={`${headerText} Confirmation Modal`}\r\n    >\r\n      <div className=\"flex-row\">\r\n        <div className={`col ${theme.text} text-center`}>\r\n          <h4 className=\"mb-3\">{headerText}</h4>\r\n          {bodyText && <p className=\"mb-3\">{bodyText}</p>}\r\n          {children ? <div className={`mb-3`}>{children}</div> : null}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex flex-row justify-content-around\">\r\n        <GenericButton className={`${theme.modalDangerClass} ${btnReponsiveClass}`} onClick={handleConfirm}>\r\n          <FaCheck className=\"mr-2\" /> {confirmText}\r\n        </GenericButton>\r\n        <GenericButton className={`${theme.modalConfirmClass} ${btnReponsiveClass}`} onClick={handleDeny}>\r\n          {denyText}\r\n        </GenericButton>\r\n      </div>\r\n    </GenericModal>\r\n  )\r\n}\r\n\r\nexport default GenericDestructiveModal\r\n","import GenericButton from 'components/input/generic_button'\r\nimport GenericModal from 'components/modals/generic/generic_modal'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useState } from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { FaCheck } from 'react-icons/fa'\r\n\r\ninterface IModalComponentProps {\r\n  bodyText?: string\r\n  closeModal: () => any\r\n  confirmIcon?: IconType\r\n  confirmText?: string\r\n  confirmBtnClass?: string\r\n  denyBtnClass?: string\r\n  denyText?: string\r\n  disableConfirmIcon?: boolean\r\n  headerText?: string\r\n  isOpen: boolean\r\n  onConfirm?: () => any\r\n  onConfirmAsync?: () => Promise<any>\r\n  onDeny?: () => any\r\n}\r\n\r\n/**\r\n * A re-usable generic modal component\r\n *\r\n * Ask if we really want to do an action.\r\n *\r\n * @param props\r\n */\r\nconst GenericTwoButtonModal = (props: React.PropsWithChildren<IModalComponentProps>) => {\r\n  const { theme } = useTheme()\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n  const {\r\n    bodyText = '',\r\n    children = null,\r\n    closeModal,\r\n    confirmBtnClass = theme.modalDangerClass,\r\n    confirmText = 'Confirm',\r\n    denyBtnClass = theme.modalConfirmClass,\r\n    denyText = 'Cancel',\r\n    disableConfirmIcon = false,\r\n    headerText = '',\r\n    isOpen = false,\r\n    onConfirm = null,\r\n    onConfirmAsync = null,\r\n    onDeny = null,\r\n  } = props\r\n\r\n  const ConfirmIcon = props.confirmIcon || FaCheck\r\n\r\n  const handleConfirm = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (onConfirmAsync) {\r\n      try {\r\n        setIsProcessing(true)\r\n        await onConfirmAsync()\r\n      } catch (err) {\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    if (onConfirm) onConfirm()\r\n\r\n    closeModal()\r\n  }\r\n\r\n  const handleDeny = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (onDeny) onDeny()\r\n    closeModal()\r\n  }\r\n\r\n  return (\r\n    <GenericModal\r\n      isOpen={isOpen}\r\n      isProcessing={isProcessing}\r\n      closeModal={closeModal}\r\n      label={`${headerText} Confirmation Modal`}\r\n    >\r\n      <div className=\"flex-row\">\r\n        <div className={`col ${theme.text} text-center`}>\r\n          <h4 className=\"mb-3\">{headerText}</h4>\r\n          {bodyText && <p className=\"mb-3\">{bodyText}</p>}\r\n          {children ? <div className={`mb-3`}>{children}</div> : null}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex flex-row justify-content-around\">\r\n        <GenericButton className={confirmBtnClass} onClick={handleConfirm}>\r\n          {!disableConfirmIcon && <ConfirmIcon className=\"mr-2\" />} {confirmText}\r\n        </GenericButton>\r\n        <GenericButton className={denyBtnClass} onClick={handleDeny}>\r\n          {denyText}\r\n        </GenericButton>\r\n      </div>\r\n    </GenericModal>\r\n  )\r\n}\r\n\r\nexport default GenericTwoButtonModal\r\n","import { useTheme } from 'context/useTheme'\r\nimport { sortBy } from 'lodash'\r\nimport { TSupportedFaction } from 'meta/factions'\r\nimport { getFactionFromList } from 'meta/faction_list'\r\nimport React, { useMemo } from 'react'\r\nimport { ICurrentArmy } from 'types/army'\r\nimport { ISavedArmy, ISavedArmyFromApi } from 'types/savedArmy'\r\nimport { IAllySelections, TSelections } from 'types/selections'\r\nimport { ITheme } from 'types/theme'\r\nimport { titleCase } from 'utils/textUtils'\r\n\r\ninterface ISavedArmyTable {\r\n  army: ISavedArmyFromApi | ISavedArmy | ICurrentArmy\r\n}\r\n\r\nexport const SavedArmyTable = ({ army }: ISavedArmyTable) => {\r\n  const {\r\n    factionName,\r\n    subFactionName,\r\n    selections,\r\n    allySelections,\r\n    origin_realm,\r\n    realmscape,\r\n    realmscape_feature,\r\n  } = army\r\n  const { theme } = useTheme()\r\n\r\n  const armySelectionKeys = useMemo(\r\n    () => sortBy(Object.keys(selections).filter(key => selections[key as keyof typeof selections].length)),\r\n    [selections]\r\n  )\r\n\r\n  const allies = useMemo(\r\n    () =>\r\n      Object.keys(allySelections).reduce(\r\n        (a, factionName) => {\r\n          const allyUnits = allySelections[factionName as TSupportedFaction]?.units || []\r\n          const allyBattalions = allySelections[factionName as TSupportedFaction]?.battalions || []\r\n          a.units = a.units.concat(allyUnits)\r\n          a.battalions = a.battalions.concat(allyBattalions)\r\n          return a\r\n        },\r\n        { units: [], battalions: [] } as IAllySelections\r\n      ),\r\n    [allySelections]\r\n  )\r\n\r\n  const faction = getFactionFromList(factionName)\r\n\r\n  if (!faction?.subFactionKeys) return <></>\r\n\r\n  return (\r\n    <>\r\n      <table className={`table table-sm`}>\r\n        <tbody>\r\n          <Tr theme={theme} items={[titleCase(factionName)]} title={'Faction'} />\r\n          {!!subFactionName && faction.subFactionKeys.length > 1 && (\r\n            <Tr theme={theme} items={[subFactionName]} title={'SubFaction'} />\r\n          )}\r\n          {armySelectionKeys.map((key, i) => {\r\n            return (\r\n              <Tr\r\n                theme={theme}\r\n                items={sortBy(selections[key as keyof TSelections])}\r\n                title={key}\r\n                key={`${key}_${i}`}\r\n              />\r\n            )\r\n          })}\r\n\r\n          {allies.units.length > 0 && (\r\n            <Tr theme={theme} items={sortBy(allies.units)} title={'Allied Units'} />\r\n          )}\r\n          {allies.battalions.length > 0 && (\r\n            <Tr theme={theme} items={sortBy(allies.battalions)} title={'Allied Battalions'} />\r\n          )}\r\n\r\n          {origin_realm && <Tr theme={theme} items={[origin_realm]} title={'Realm of Origin'} />}\r\n          {realmscape && <Tr theme={theme} items={[realmscape]} title={'Realm of Battle'} />}\r\n          {realmscape_feature && <Tr theme={theme} items={[realmscape_feature]} title={'Realm Feature'} />}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\ninterface ITrProps {\r\n  title: string\r\n  items: string[]\r\n  theme: ITheme\r\n}\r\n\r\nconst Tr = ({ title, items, theme }: ITrProps) => (\r\n  <tr>\r\n    <td className={`text-nowrap ${theme.textMuted}`}>\r\n      <strong>{titleCase(title)}</strong>\r\n    </td>\r\n    <td>\r\n      {items.map((item, i) => {\r\n        return (\r\n          <span key={`${item}_${i}`} className={`badge badge-secondary text-wrap mx-1`}>\r\n            {item}\r\n          </span>\r\n        )\r\n      })}\r\n    </td>\r\n  </tr>\r\n)\r\n","import GenericTwoButtonModal from 'components/modals/generic/generic_two_button_modal'\r\nimport { useSavedArmies } from 'context/useSavedArmies'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useState } from 'react'\r\nimport { FaSave } from 'react-icons/fa'\r\nimport { logEvent } from 'utils/analytics'\r\n\r\ninterface IModalComponentProps {\r\n  modalIsOpen: boolean\r\n  closeModal: () => void\r\n  currentArmyName: string\r\n  id: string\r\n}\r\n\r\nconst UpdateArmyNameModal = (props: IModalComponentProps) => {\r\n  const { closeModal, modalIsOpen, currentArmyName, id } = props\r\n  const { updateArmyName } = useSavedArmies()\r\n  const { theme } = useTheme()\r\n  const [armyName, setArmyName] = useState(currentArmyName)\r\n\r\n  const handleUpdateName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault()\r\n    setArmyName(e.target.value)\r\n  }\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      handleUpdateClick()\r\n    }\r\n  }\r\n\r\n  const handleUpdateClick = async () => {\r\n    // Don't hit the API if they don't make a change :)\r\n    if (armyName === currentArmyName) return\r\n\r\n    await updateArmyName(id, armyName || 'Untitled')\r\n    setArmyName(armyName || 'Untitled')\r\n    logEvent(`UpdateArmyName`)\r\n  }\r\n\r\n  return (\r\n    <GenericTwoButtonModal\r\n      closeModal={closeModal}\r\n      confirmBtnClass={theme.modalConfirmClass}\r\n      confirmIcon={FaSave}\r\n      confirmText={'Update'}\r\n      denyBtnClass={theme.modalDangerClass}\r\n      isOpen={modalIsOpen}\r\n      onConfirmAsync={handleUpdateClick}\r\n    >\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"nameInput\">\r\n                <strong className={theme.text}>Rename Army</strong>\r\n              </label>\r\n              <input\r\n                className=\"form-control form-control-sm\"\r\n                aria-describedby=\"nameHelp\"\r\n                value={armyName}\r\n                onKeyDown={handleKeyDown}\r\n                onChange={handleUpdateName}\r\n                tabIndex={0}\r\n                autoFocus\r\n              />\r\n              <small id=\"nameHelp\" className={`form-text ${theme.textMuted}`}>\r\n                Hint: Use a descriptive name.\r\n              </small>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </GenericTwoButtonModal>\r\n  )\r\n}\r\n\r\nexport default UpdateArmyNameModal\r\n","import UpdateArmyNameModal from 'components/modals/update_name_modal'\r\nimport React, { useState } from 'react'\r\nimport { IconContext } from 'react-icons'\r\nimport { FaPencilAlt } from 'react-icons/fa'\r\n\r\ntype TUpdateName = React.FC<{ id: string; armyName: string; className?: string; size?: string }>\r\n\r\nconst UpdateNameButton: TUpdateName = ({ id, armyName, className = '', size = '1rem' }) => {\r\n  const [modalIsOpen, setModalIsOpen] = useState(false)\r\n\r\n  const closeModal = () => setModalIsOpen(false)\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    setModalIsOpen(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <IconContext.Provider value={{ size }}>\r\n        <FaPencilAlt className={`${className} d-print-none`} onClick={handleClick} />\r\n        {modalIsOpen && (\r\n          <UpdateArmyNameModal\r\n            modalIsOpen={modalIsOpen}\r\n            closeModal={closeModal}\r\n            id={id}\r\n            currentArmyName={armyName}\r\n          />\r\n        )}\r\n      </IconContext.Provider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateNameButton\r\n","import GenericButton from 'components/input/generic_button'\r\nimport React from 'react'\r\nimport { FaAngleLeft, FaAngleRight } from 'react-icons/fa'\r\n\r\ninterface IPaginateButtonsProps {\r\n  pageNum: number\r\n  numPages: number\r\n  setPageNum: (num: number) => void\r\n}\r\n\r\nexport const PaginateButtons = (props: IPaginateButtonsProps) => {\r\n  const { pageNum, setPageNum, numPages } = props\r\n\r\n  if (numPages < 2) return null\r\n\r\n  const canIncrement = pageNum !== numPages\r\n  const canDecrement = pageNum !== 1\r\n\r\n  const increment = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (canIncrement) setPageNum(pageNum + 1)\r\n  }\r\n\r\n  const decrement = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (canDecrement) setPageNum(pageNum - 1)\r\n  }\r\n\r\n  return (\r\n    <nav aria-label=\"Saved Army Pagination\">\r\n      <ul className=\"pagination justify-content-center my-2\">\r\n        <li className={`page-item ${canDecrement ? `` : `disabled`}`} onClick={decrement}>\r\n          <GenericButton className=\"page-link\">\r\n            {canDecrement && <FaAngleLeft className=\"mr-1\" />}Previous\r\n          </GenericButton>\r\n        </li>\r\n        <li className={`page-item ${canIncrement ? `` : `disabled`}`} onClick={increment}>\r\n          <GenericButton className=\"page-link\">\r\n            Next{canIncrement && <FaAngleRight className=\"ml-1\" />}\r\n          </GenericButton>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n","import GenericButton from 'components/input/generic_button'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useSavedArmies } from 'context/useSavedArmies'\r\nimport React from 'react'\r\nimport { ISavedArmyFromApi } from 'types/savedArmy'\r\nimport { logEvent, resetAnalyticsStore } from 'utils/analytics'\r\nimport { addArmyToStore } from 'utils/loadArmy/loadArmyHelpers'\r\n\r\ninterface ILoadButtonProps {\r\n  army: ISavedArmyFromApi\r\n}\r\n\r\nexport const LoadArmyBtn = ({ army }: ILoadButtonProps) => {\r\n  const { isOnline } = useAppStatus()\r\n  const { setLoadedArmy } = useSavedArmies()\r\n\r\n  const handleLoadClick = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (isOnline) logEvent(`LoadArmy-${army.factionName}`)\r\n    resetAnalyticsStore()\r\n    setLoadedArmy({ id: army.id, armyName: army.armyName })\r\n    addArmyToStore(army)\r\n  }\r\n\r\n  return (\r\n    <GenericButton className=\"btn btn-sm btn-primary mx-3\" onClick={handleLoadClick}>\r\n      Load Army\r\n    </GenericButton>\r\n  )\r\n}\r\n","import GenericButton from 'components/input/generic_button'\r\nimport { LoadArmyBtn } from 'components/input/savedArmies/load_army_btn'\r\nimport { SavedArmyTable } from 'components/input/savedArmies/saved_army_table'\r\nimport UpdateNameButton from 'components/input/savedArmies/update_name_btn'\r\nimport GenericDestructiveModal from 'components/modals/generic/generic_destructive_modal'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useSavedArmies } from 'context/useSavedArmies'\r\nimport { useTheme } from 'context/useTheme'\r\nimport { DateTime } from 'luxon'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { ISavedArmyFromApi } from 'types/savedArmy'\r\nimport { logEvent } from 'utils/analytics'\r\nimport { titleCase } from 'utils/textUtils'\r\n\r\ninterface ISavedArmyCardProps {\r\n  army: ISavedArmyFromApi\r\n}\r\n\r\nexport const SavedArmyCard = (props: ISavedArmyCardProps) => {\r\n  const { army } = props\r\n  const { isOffline } = useAppStatus()\r\n  const { theme } = useTheme()\r\n  const { deleteSavedArmy } = useSavedArmies()\r\n\r\n  const [modalIsOpen, setModalIsOpen] = useState(false)\r\n  const [border, setBorder] = useState('')\r\n  const { loadedArmy } = useSavedArmies()\r\n\r\n  const openModal = () => setModalIsOpen(true)\r\n  const closeModal = () => setModalIsOpen(false)\r\n\r\n  useEffect(() => {\r\n    if (!loadedArmy) {\r\n      if (border.includes('border-success')) {\r\n        setBorder('shadow-drop-2-center-reverse')\r\n        setTimeout(() => setBorder(''), 500)\r\n      }\r\n      return\r\n    }\r\n\r\n    if (loadedArmy.id === army.id) {\r\n      setBorder('border-success shadow-drop-2-center')\r\n    } else if (border.includes('border-success')) {\r\n      setBorder('shadow-drop-2-center-reverse')\r\n      setTimeout(() => setBorder(''), 500)\r\n    }\r\n  }, [loadedArmy, army.id, border])\r\n\r\n  const handleDelete = async () => {\r\n    await deleteSavedArmy(army.id)\r\n    logEvent(`DeleteArmy-${army.factionName}`)\r\n  }\r\n\r\n  // TODO Make the table stuff collapsable\r\n  return (\r\n    <div className=\"col-12 col-lg-6 col-xl-6 col-xxl-4 mb-2\">\r\n      <div className={`card ${border}`}>\r\n        <div className={theme.cardBody}>\r\n          <CardTitle\r\n            id={army.id}\r\n            armyName={army.armyName}\r\n            factionName={army.factionName}\r\n            createdAt={army.createdAt}\r\n          />\r\n          <div className=\"mt-1\">\r\n            <SavedArmyTable army={army} />\r\n          </div>\r\n          <div className=\"d-flex justify-content-center\">\r\n            <LoadArmyBtn army={army} />\r\n            <GenericButton className=\"btn btn-sm btn-danger mx-3\" onClick={openModal} disabled={isOffline}>\r\n              Delete\r\n            </GenericButton>\r\n\r\n            {modalIsOpen && (\r\n              <GenericDestructiveModal\r\n                isOpen={modalIsOpen}\r\n                closeModal={closeModal}\r\n                headerText={`Delete ${army.armyName}?`}\r\n                bodyText={`This action is irreversible!`}\r\n                onConfirmAsync={handleDelete}\r\n                confirmText={'Delete'}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface ICardTitleProps {\r\n  armyName: ISavedArmyFromApi['armyName']\r\n  factionName: ISavedArmyFromApi['factionName']\r\n  createdAt: ISavedArmyFromApi['createdAt']\r\n  id: ISavedArmyFromApi['id']\r\n}\r\n\r\nconst CardTitle = ({ armyName, factionName, createdAt, id }: ICardTitleProps) => {\r\n  const { isOffline } = useAppStatus()\r\n  const { theme } = useTheme()\r\n\r\n  const faction = titleCase(factionName)\r\n  const created = DateTime.fromMillis(createdAt).toLocaleString({\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: '2-digit',\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <div className={`d-flex ${theme.text} mb-1 justify-content-start align-items-center`}>\r\n        <div hidden={isOffline}>\r\n          <UpdateNameButton size=\"0.75rem\" className=\"mr-3\" armyName={armyName} id={id} />\r\n        </div>\r\n        <div className=\"flex-grow-1\">\r\n          <h5 className=\"card-title mb-0\">{armyName ? armyName : `Untitled`}</h5>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-around\">\r\n        <small className={`flex-fill ${theme.textMuted}`}>{faction}</small>\r\n        <small className={`flex-fill ${theme.textMuted} text-right mr-2`}>Created: {created}</small>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useAuth0 } from '@auth0/auth0-react'\r\nimport { PaginateButtons } from 'components/input/savedArmies/paginate_buttons'\r\nimport { SavedArmyCard } from 'components/input/savedArmies/saved_army_card'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useSavedArmies } from 'context/useSavedArmies'\r\nimport { useSubscription } from 'context/useSubscription'\r\nimport { useEffect, useMemo, useState } from 'react'\r\nimport { paginateSavedArmies } from 'utils/paginate'\r\n\r\nconst ShowSavedArmies = () => {\r\n  const { isOffline } = useAppStatus()\r\n  const { isAuthenticated } = useAuth0()\r\n  const { isSubscribed } = useSubscription()\r\n  const { savedArmies, loadSavedArmies } = useSavedArmies()\r\n  const [pageNum, setPageNum] = useState(1)\r\n\r\n  const paginatedArmies = useMemo(() => paginateSavedArmies(savedArmies, 6), [savedArmies])\r\n\r\n  useEffect(() => {\r\n    if (isOffline || (isAuthenticated && isSubscribed)) {\r\n      loadSavedArmies()\r\n    }\r\n  }, [loadSavedArmies, isAuthenticated, isSubscribed, isOffline])\r\n\r\n  if (paginatedArmies.length === 0) return <NoArmiesFound />\r\n\r\n  return (\r\n    <div className=\"mt-2\">\r\n      <PaginateButtons pageNum={pageNum} setPageNum={setPageNum} numPages={paginatedArmies.length} />\r\n\r\n      <div className=\"row justify-content-center\">\r\n        {paginatedArmies[pageNum - 1].map((army, i) => (\r\n          <SavedArmyCard key={`${army.id}_${i}`} army={army} />\r\n        ))}\r\n      </div>\r\n\r\n      <PaginateButtons pageNum={pageNum} setPageNum={setPageNum} numPages={paginatedArmies.length} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShowSavedArmies\r\n\r\nconst NoArmiesFound = () => (\r\n  <div>\r\n    <div className=\"alert alert-primary text-center\" role=\"alert\">\r\n      You haven't saved any armies yet!\r\n    </div>\r\n  </div>\r\n)\r\n","import { ISavedArmyFromApi } from 'types/savedArmy'\r\n\r\nexport const paginateSavedArmies = (\r\n  savedArmies: ISavedArmyFromApi[],\r\n  pageSize = 6\r\n): ISavedArmyFromApi[][] => {\r\n  return savedArmies.reduce(\r\n    (accum, army, i) => {\r\n      if (i === 0) return { ...accum, pages: [[army]] }\r\n      if (i === accum.currPage * pageSize) {\r\n        accum.currPage = accum.currPage + 1\r\n        accum.pages.push([])\r\n      }\r\n      accum.pages[accum.currPage - 1].push(army)\r\n      return accum\r\n    },\r\n    { currPage: 1, pages: [] as ISavedArmyFromApi[][] }\r\n  ).pages\r\n}\r\n"],"sourceRoot":""}