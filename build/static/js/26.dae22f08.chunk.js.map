{"version":3,"sources":["components/modals/generic/generic_modal.tsx","components/modals/generic/generic_two_button_modal.tsx","components/modals/update_name_modal.tsx","components/input/savedArmies/update_name_btn.tsx","components/input/savedArmies/loaded_army_header.tsx"],"names":["Modal","setAppElement","GenericModal","props","children","closeModal","isOpen","label","isProcessing","isDark","useTheme","modalClassName","concat","_jsx","className","contentLabel","onRequestClose","overlayClassName","_jsxs","ModalSpinner","hidden","_ref","variant","Spinner","size","GenericTwoButtonModal","theme","setIsProcessing","useState","bodyText","confirmBtnClass","modalDangerClass","confirmText","denyBtnClass","modalConfirmClass","denyText","disableConfirmIcon","headerText","onConfirm","onConfirmAsync","onDeny","ConfirmIcon","confirmIcon","FaCheck","text","GenericButton","onClick","async","e","preventDefault","err","console","error","UpdateArmyNameModal","modalIsOpen","currentArmyName","id","updateArmyName","useSavedArmies","armyName","setArmyName","handleUpdateClick","logEvent","FaSave","htmlFor","value","onKeyDown","key","stopPropagation","onChange","target","tabIndex","autoFocus","textMuted","UpdateNameButton","setModalIsOpen","_Fragment","IconContext","Provider","FaPencilAlt","LoadedArmyHeader","isOffline","useAppStatus","loadedArmy","textSecondary"],"mappings":"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","file":"static/js/26.dae22f08.chunk.js","sourcesContent":["import Spinner from 'components/helpers/spinner'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React from 'react'\r\nimport Modal from 'react-modal'\r\n\r\ninterface IGenericModalProps {\r\n  isProcessing?: boolean\r\n  isOpen: boolean\r\n  closeModal: () => void\r\n  label: string\r\n}\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst GenericModal = (props: React.PropsWithChildren<IGenericModalProps>) => {\r\n  const { children, closeModal, isOpen, label, isProcessing = false } = props\r\n  const { isDark } = useTheme()\r\n\r\n  const themeType = isDark ? 'Dark' : 'Light'\r\n  const modalClassName = `Modal-${isProcessing ? `Transparent` : themeType}`\r\n\r\n  return (\r\n    <Modal\r\n      className={modalClassName}\r\n      contentLabel={label}\r\n      isOpen={isOpen}\r\n      onRequestClose={closeModal}\r\n      overlayClassName={'Modal-Overlay'}\r\n    >\r\n      <div className={`container`}>\r\n        {isProcessing && <ModalSpinner />}\r\n        <div hidden={isProcessing}>{children}</div>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default GenericModal\r\n\r\nconst ModalSpinner = ({ isDark = false }) => {\r\n  const variant = isDark ? 'light-gray' : 'dark'\r\n  return (\r\n    <div className={`d-flex flex-row justify-content-center`}>\r\n      <Spinner variant={variant} size=\"large\" />\r\n    </div>\r\n  )\r\n}\r\n","import GenericButton from 'components/input/generic_button'\r\nimport GenericModal from 'components/modals/generic/generic_modal'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useState } from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { FaCheck } from 'react-icons/fa'\r\n\r\ninterface IModalComponentProps {\r\n  bodyText?: string\r\n  closeModal: () => any\r\n  confirmIcon?: IconType\r\n  confirmText?: string\r\n  confirmBtnClass?: string\r\n  denyBtnClass?: string\r\n  denyText?: string\r\n  disableConfirmIcon?: boolean\r\n  headerText?: string\r\n  isOpen: boolean\r\n  onConfirm?: () => any\r\n  onConfirmAsync?: () => Promise<any>\r\n  onDeny?: () => any\r\n}\r\n\r\n/**\r\n * A re-usable generic modal component\r\n *\r\n * Ask if we really want to do an action.\r\n *\r\n * @param props\r\n */\r\nconst GenericTwoButtonModal = (props: React.PropsWithChildren<IModalComponentProps>) => {\r\n  const { theme } = useTheme()\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n  const {\r\n    bodyText = '',\r\n    children = null,\r\n    closeModal,\r\n    confirmBtnClass = theme.modalDangerClass,\r\n    confirmText = 'Confirm',\r\n    denyBtnClass = theme.modalConfirmClass,\r\n    denyText = 'Cancel',\r\n    disableConfirmIcon = false,\r\n    headerText = '',\r\n    isOpen = false,\r\n    onConfirm = null,\r\n    onConfirmAsync = null,\r\n    onDeny = null,\r\n  } = props\r\n\r\n  const ConfirmIcon = props.confirmIcon || FaCheck\r\n\r\n  const handleConfirm = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (onConfirmAsync) {\r\n      try {\r\n        setIsProcessing(true)\r\n        await onConfirmAsync()\r\n      } catch (err) {\r\n        console.error(err)\r\n      }\r\n    }\r\n\r\n    if (onConfirm) onConfirm()\r\n\r\n    closeModal()\r\n  }\r\n\r\n  const handleDeny = async (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (onDeny) onDeny()\r\n    closeModal()\r\n  }\r\n\r\n  return (\r\n    <GenericModal\r\n      isOpen={isOpen}\r\n      isProcessing={isProcessing}\r\n      closeModal={closeModal}\r\n      label={`${headerText} Confirmation Modal`}\r\n    >\r\n      <div className=\"flex-row\">\r\n        <div className={`col ${theme.text} text-center`}>\r\n          <h4 className=\"mb-3\">{headerText}</h4>\r\n          {bodyText && <p className=\"mb-3\">{bodyText}</p>}\r\n          {children ? <div className={`mb-3`}>{children}</div> : null}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex flex-row justify-content-around\">\r\n        <GenericButton className={confirmBtnClass} onClick={handleConfirm}>\r\n          {!disableConfirmIcon && <ConfirmIcon className=\"mr-2\" />} {confirmText}\r\n        </GenericButton>\r\n        <GenericButton className={denyBtnClass} onClick={handleDeny}>\r\n          {denyText}\r\n        </GenericButton>\r\n      </div>\r\n    </GenericModal>\r\n  )\r\n}\r\n\r\nexport default GenericTwoButtonModal\r\n","import GenericTwoButtonModal from 'components/modals/generic/generic_two_button_modal'\r\nimport { useSavedArmies } from 'context/useSavedArmies'\r\nimport { useTheme } from 'context/useTheme'\r\nimport React, { useState } from 'react'\r\nimport { FaSave } from 'react-icons/fa'\r\nimport { logEvent } from 'utils/analytics'\r\n\r\ninterface IModalComponentProps {\r\n  modalIsOpen: boolean\r\n  closeModal: () => void\r\n  currentArmyName: string\r\n  id: string\r\n}\r\n\r\nconst UpdateArmyNameModal = (props: IModalComponentProps) => {\r\n  const { closeModal, modalIsOpen, currentArmyName, id } = props\r\n  const { updateArmyName } = useSavedArmies()\r\n  const { theme } = useTheme()\r\n  const [armyName, setArmyName] = useState(currentArmyName)\r\n\r\n  const handleUpdateName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault()\r\n    setArmyName(e.target.value)\r\n  }\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      handleUpdateClick()\r\n    }\r\n  }\r\n\r\n  const handleUpdateClick = async () => {\r\n    // Don't hit the API if they don't make a change :)\r\n    if (armyName === currentArmyName) return\r\n\r\n    await updateArmyName(id, armyName || 'Untitled')\r\n    setArmyName(armyName || 'Untitled')\r\n    logEvent(`UpdateArmyName`)\r\n  }\r\n\r\n  return (\r\n    <GenericTwoButtonModal\r\n      closeModal={closeModal}\r\n      confirmBtnClass={theme.modalConfirmClass}\r\n      confirmIcon={FaSave}\r\n      confirmText={'Update'}\r\n      denyBtnClass={theme.modalDangerClass}\r\n      isOpen={modalIsOpen}\r\n      onConfirmAsync={handleUpdateClick}\r\n    >\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"nameInput\">\r\n                <strong className={theme.text}>Rename Army</strong>\r\n              </label>\r\n              <input\r\n                className=\"form-control form-control-sm\"\r\n                aria-describedby=\"nameHelp\"\r\n                value={armyName}\r\n                onKeyDown={handleKeyDown}\r\n                onChange={handleUpdateName}\r\n                tabIndex={0}\r\n                autoFocus\r\n              />\r\n              <small id=\"nameHelp\" className={`form-text ${theme.textMuted}`}>\r\n                Hint: Use a descriptive name.\r\n              </small>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </GenericTwoButtonModal>\r\n  )\r\n}\r\n\r\nexport default UpdateArmyNameModal\r\n","import UpdateArmyNameModal from 'components/modals/update_name_modal'\r\nimport React, { useState } from 'react'\r\nimport { IconContext } from 'react-icons'\r\nimport { FaPencilAlt } from 'react-icons/fa'\r\n\r\ntype TUpdateName = React.FC<{ id: string; armyName: string; className?: string; size?: string }>\r\n\r\nconst UpdateNameButton: TUpdateName = ({ id, armyName, className = '', size = '1rem' }) => {\r\n  const [modalIsOpen, setModalIsOpen] = useState(false)\r\n\r\n  const closeModal = () => setModalIsOpen(false)\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    setModalIsOpen(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <IconContext.Provider value={{ size }}>\r\n        <FaPencilAlt className={`${className} d-print-none`} onClick={handleClick} />\r\n        {modalIsOpen && (\r\n          <UpdateArmyNameModal\r\n            modalIsOpen={modalIsOpen}\r\n            closeModal={closeModal}\r\n            id={id}\r\n            currentArmyName={armyName}\r\n          />\r\n        )}\r\n      </IconContext.Provider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateNameButton\r\n","import UpdateNameButton from 'components/input/savedArmies/update_name_btn'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useSavedArmies } from 'context/useSavedArmies'\r\nimport { useTheme } from 'context/useTheme'\r\n\r\nconst LoadedArmyHeader = () => {\r\n  const { isOffline } = useAppStatus()\r\n  const { loadedArmy } = useSavedArmies()\r\n  const { theme } = useTheme()\r\n\r\n  if (!loadedArmy) return null\r\n\r\n  return (\r\n    <div className={`row d-flex text-center justify-content-center mt-3 mb-1`}>\r\n      <div className=\"flex-row d-flex\">\r\n        <div className=\"flex-grow-1 ml-3\">\r\n          <h4 className={theme.textSecondary}>{loadedArmy.armyName}</h4>\r\n        </div>\r\n        <div className=\"ml-2 mr-3\" hidden={isOffline}>\r\n          <UpdateNameButton size=\"0.85rem\" className={theme.textSecondary} {...loadedArmy} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadedArmyHeader\r\n"],"sourceRoot":""}