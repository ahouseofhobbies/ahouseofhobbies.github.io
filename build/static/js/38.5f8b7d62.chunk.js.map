{"version":3,"sources":["components/page/navbar.tsx"],"names":["Navbar","isOffline","useAppStatus","isAuthenticated","logout","useAuth0","login","isLoggingIn","useLogin","origin","isActive","subscriptionLoading","useSubscription","isTinyMobile","useWindowSize","pathname","window","location","loginBtnText","_jsx","OfflineHeader","LoadingHeader","discount","SubscriptionPlans","some","x","sale","max","map","discount_pct","_jsxs","NavbarWrapper","children","ROUTES","HOME","Link","to","className","navbarStyles","link","onClick","logClick","PROFILE","SUBSCRIBE","FAQ","GenericButton","btn","handleLoginBtn","LocalUserName","clear","LocalSavedArmies","LocalTheme","clientId","config","logoutParams","returnTo","BASE_URL"],"mappings":"uHAAA,uJAuFeA,UAtEAA,KACb,MAAM,UAAEC,GAAcC,eAChB,gBAAEC,EAAe,OAAEC,GAAWC,eAC9B,MAAEC,EAAK,YAAEC,GAAgBC,YAAS,CAAEC,OAAQ,YAC5C,SAAEC,EAAQ,oBAAEC,GAAwBC,eACpC,aAAEC,GAAiBC,eAEnB,SAAEC,GAAaC,OAAOC,SACtBC,EAAgBf,EAAe,mBAcrC,GAAIF,EAAW,OAAOkB,cAACC,IAAa,IACpC,GAAIb,GAAeI,EAAqB,OAAOQ,cAACE,IAAa,IAE7D,MAAMC,EAAWC,IAAkBC,MAAKC,GAAKA,EAAEC,OAAQC,cAAIJ,IAAkBK,KAAIH,GAAKA,EAAEI,gBAAiB,EAEzG,OACEC,eAACC,IAAa,CAAAC,SAAA,CACXjB,IAAakB,IAAOC,MACnBf,cAACgB,IAAI,CAACC,GAAIH,IAAOC,KAAMG,UAAWC,IAAaC,KAAMC,QAASA,IAAMC,YAAS,eAAeT,SAAC,SAS9F7B,GAAmBY,IAAakB,IAAOS,SACtCvB,cAACgB,IAAI,CAACC,GAAIH,IAAOS,QAASL,UAAWC,IAAaC,KAAMC,QAASA,IAAMC,YAAS,kBAAkBT,SAAC,aAInGtB,GAAYK,IAAakB,IAAOU,WAChCb,eAACK,IAAI,CACHC,GAAIH,IAAOU,UACXN,UAAWC,IAAaC,KACxBC,QAASA,IAAMC,YAAS,oBAAoBT,SAAA,CAC7C,cAEIV,IAAaT,GACdiB,eAAA,QAAMO,UAAU,qCAAoCL,SAAA,CAAEV,EAAS,eAKpEP,IAAakB,IAAOW,KACnBzB,cAACgB,IAAI,CAACC,GAAIH,IAAOW,IAAKP,UAAWC,IAAaC,KAAMC,QAASA,IAAMC,YAAS,cAAcT,SAAC,QAK7Fb,cAAC0B,IAAa,CAACR,UAAWC,IAAaQ,IAAKN,QArDzBO,IACjB5C,GACFsC,YAAS,iBACTO,IAAcC,QACdC,IAAiBD,QACjBE,IAAWF,QACJ7C,EAAO,CAAEgD,SAAUC,EAAOD,SAAUE,aAAc,CAAEC,SAAUC,QAE9DlD,IA6C6D0B,SACjEd,MAEW,C","file":"static/js/38.5f8b7d62.chunk.js","sourcesContent":["import { useAuth0 } from '@auth0/auth0-react'\r\nimport config from 'auth_config.json'\r\nimport { LoadingHeader, OfflineHeader } from 'components/helpers/suspenseFallbacks'\r\nimport GenericButton from 'components/input/generic_button'\r\nimport NavbarWrapper from 'components/page/navbar_wrapper'\r\nimport { useAppStatus } from 'context/useAppStatus'\r\nimport { useSubscription } from 'context/useSubscription'\r\nimport { max } from 'lodash'\r\nimport { Link } from 'react-router-dom'\r\nimport { navbarStyles } from 'theme/helperClasses'\r\nimport { logClick } from 'utils/analytics'\r\nimport { BASE_URL, ROUTES } from 'utils/env'\r\nimport useLogin from 'utils/hooks/useLogin'\r\nimport useWindowSize from 'utils/hooks/useWindowSize'\r\nimport { LocalSavedArmies, LocalTheme, LocalUserName } from 'utils/localStore'\r\nimport { SubscriptionPlans } from 'utils/plans'\r\n\r\nconst Navbar = () => {\r\n  const { isOffline } = useAppStatus()\r\n  const { isAuthenticated, logout } = useAuth0()\r\n  const { login, isLoggingIn } = useLogin({ origin: 'Navbar' })\r\n  const { isActive, subscriptionLoading } = useSubscription()\r\n  const { isTinyMobile } = useWindowSize()\r\n\r\n  const { pathname } = window.location\r\n  const loginBtnText = !isAuthenticated ? `Log in` : `Log out`\r\n\r\n  const handleLoginBtn = () => {\r\n    if (isAuthenticated) {\r\n      logClick('Navbar-Logout')\r\n      LocalUserName.clear() // Get rid of stored user info\r\n      LocalSavedArmies.clear() // Remove any saved armies that we've fetched from the API\r\n      LocalTheme.clear() // Revert back to default theme settings\r\n      return logout({ clientId: config.clientId, logoutParams: { returnTo: BASE_URL } })\r\n    } else {\r\n      return login()\r\n    }\r\n  }\r\n\r\n  if (isOffline) return <OfflineHeader />\r\n  if (isLoggingIn || subscriptionLoading) return <LoadingHeader />\r\n\r\n  const discount = SubscriptionPlans.some(x => x.sale) ? max(SubscriptionPlans.map(x => x.discount_pct)) : 0\r\n\r\n  return (\r\n    <NavbarWrapper>\r\n      {pathname !== ROUTES.HOME && (\r\n        <Link to={ROUTES.HOME} className={navbarStyles.link} onClick={() => logClick('Navbar-Home')}>\r\n          Home\r\n        </Link>\r\n      )}\r\n      {/* {pathname !== ROUTES.STATS && (\r\n        <Link to={ROUTES.STATS} className={navbarStyles.link} onClick={() => logClick('Navbar-Stats')}>\r\n          Stats\r\n        </Link>\r\n      )} */}\r\n      {isAuthenticated && pathname !== ROUTES.PROFILE && (\r\n        <Link to={ROUTES.PROFILE} className={navbarStyles.link} onClick={() => logClick('Navbar-Profile')}>\r\n          Profile\r\n        </Link>\r\n      )}\r\n      {!isActive && pathname !== ROUTES.SUBSCRIBE && (\r\n        <Link\r\n          to={ROUTES.SUBSCRIBE}\r\n          className={navbarStyles.link}\r\n          onClick={() => logClick('Navbar-Subscribe')}\r\n        >\r\n          Subscribe\r\n          {!!discount && !isTinyMobile && (\r\n            <span className=\"ml-1 badge badge-pill badge-danger\">{discount}% off!</span>\r\n          )}\r\n        </Link>\r\n      )}\r\n\r\n      {pathname !== ROUTES.FAQ && (\r\n        <Link to={ROUTES.FAQ} className={navbarStyles.link} onClick={() => logClick('Navbar-Faq')}>\r\n          FAQ\r\n        </Link>\r\n      )}\r\n\r\n      <GenericButton className={navbarStyles.btn} onClick={handleLoginBtn}>\r\n        {loginBtnText}\r\n      </GenericButton>\r\n    </NavbarWrapper>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n"],"sourceRoot":""}